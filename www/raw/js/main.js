var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_DEFINES;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.DEBUG) {
    if (!caller) {
      throw Error("arguments.caller not defined.  goog.base() expects not " + "to be running in strict mode. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
    }
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;").replace(goog.string.singleQuoteRe_, "\x26#39;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.singleQuoteRe_, "\x26#39;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /"/g;
goog.string.singleQuoteRe_ = /'/g;
goog.string.allRe_ = /[&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2234";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__9127__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__9127 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9127__delegate.call(this, args);
    };
    G__9127.cljs$lang$maxFixedArity = 0;
    G__9127.cljs$lang$applyTo = function(arglist__9128) {
      var args = cljs.core.seq(arglist__9128);
      return G__9127__delegate(args);
    };
    G__9127.cljs$core$IFn$_invoke$arity$variadic = G__9127__delegate;
    return G__9127;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3565__auto__ = ty;
    if (cljs.core.truth_(and__3565__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3565__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4433__auto___9129 = len;
  var i_9130 = 0;
  while (true) {
    if (i_9130 < n__4433__auto___9129) {
      new_arr[i_9130] = arr[i_9130];
      var G__9131 = i_9130 + 1;
      i_9130 = G__9131;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__9132__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__9132 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9132__delegate.call(this, array, i, idxs);
    };
    G__9132.cljs$lang$maxFixedArity = 2;
    G__9132.cljs$lang$applyTo = function(arglist__9133) {
      var array = cljs.core.first(arglist__9133);
      arglist__9133 = cljs.core.next(arglist__9133);
      var i = cljs.core.first(arglist__9133);
      var idxs = cljs.core.rest(arglist__9133);
      return G__9132__delegate(array, i, idxs);
    };
    G__9132.cljs$core$IFn$_invoke$arity$variadic = G__9132__delegate;
    return G__9132;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__9134__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__9134 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9134__delegate.call(this, array, idx, idx2, idxv);
    };
    G__9134.cljs$lang$maxFixedArity = 3;
    G__9134.cljs$lang$applyTo = function(arglist__9135) {
      var array = cljs.core.first(arglist__9135);
      arglist__9135 = cljs.core.next(arglist__9135);
      var idx = cljs.core.first(arglist__9135);
      arglist__9135 = cljs.core.next(arglist__9135);
      var idx2 = cljs.core.first(arglist__9135);
      var idxv = cljs.core.rest(arglist__9135);
      return G__9134__delegate(array, idx, idx2, idxv);
    };
    G__9134.cljs$core$IFn$_invoke$arity$variadic = G__9134__delegate;
    return G__9134;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj9137 = {};
  return obj9137;
}();
cljs.core.IFn = function() {
  var obj9139 = {};
  return obj9139;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj9141 = {};
  return obj9141;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3565__auto__ = value;
    if (and__3565__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4204__auto__ = value == null ? null : value;
    return function() {
      var or__3577__auto__ = cljs.core._clone[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._clone["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj9143 = {};
  return obj9143;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._count[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._count["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj9145 = {};
  return obj9145;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._empty[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._empty["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj9147 = {};
  return obj9147;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._conj[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._conj["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj9149 = {};
  return obj9149;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3565__auto__ = coll;
      if (and__3565__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4204__auto__ = coll == null ? null : coll;
      return function() {
        var or__3577__auto__ = cljs.core._nth[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._nth["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3565__auto__ = coll;
      if (and__3565__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4204__auto__ = coll == null ? null : coll;
      return function() {
        var or__3577__auto__ = cljs.core._nth[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._nth["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj9151 = {};
  return obj9151;
}();
cljs.core.ISeq = function() {
  var obj9153 = {};
  return obj9153;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._first[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._first["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._rest[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._rest["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj9155 = {};
  return obj9155;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._next[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._next["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj9157 = {};
  return obj9157;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._lookup[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._lookup["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._lookup[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._lookup["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj9159 = {};
  return obj9159;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._assoc[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._assoc["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj9161 = {};
  return obj9161;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._dissoc[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._dissoc["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj9163 = {};
  return obj9163;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._key[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._key["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._val[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._val["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj9165 = {};
  return obj9165;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._disjoin[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._disjoin["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj9167 = {};
  return obj9167;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._peek[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._peek["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._pop[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._pop["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj9169 = {};
  return obj9169;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._assoc_n[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj9171 = {};
  return obj9171;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._deref[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._deref["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj9173 = {};
  return obj9173;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj9175 = {};
  return obj9175;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._meta[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._meta["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj9177 = {};
  return obj9177;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._with_meta[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._with_meta["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj9179 = {};
  return obj9179;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3565__auto__ = coll;
      if (and__3565__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4204__auto__ = coll == null ? null : coll;
      return function() {
        var or__3577__auto__ = cljs.core._reduce[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._reduce["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3565__auto__ = coll;
      if (and__3565__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4204__auto__ = coll == null ? null : coll;
      return function() {
        var or__3577__auto__ = cljs.core._reduce[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._reduce["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj9181 = {};
  return obj9181;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj9183 = {};
  return obj9183;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._equiv[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._equiv["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj9185 = {};
  return obj9185;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._hash[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._hash["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj9187 = {};
  return obj9187;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._seq[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._seq["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj9189 = {};
  return obj9189;
}();
cljs.core.IList = function() {
  var obj9191 = {};
  return obj9191;
}();
cljs.core.IRecord = function() {
  var obj9193 = {};
  return obj9193;
}();
cljs.core.IReversible = function() {
  var obj9195 = {};
  return obj9195;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._rseq[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._rseq["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj9197 = {};
  return obj9197;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._entry_key[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._entry_key["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._comparator[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._comparator["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj9199 = {};
  return obj9199;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3565__auto__ = writer;
    if (and__3565__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4204__auto__ = writer == null ? null : writer;
    return function() {
      var or__3577__auto__ = cljs.core._write[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._write["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3565__auto__ = writer;
    if (and__3565__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4204__auto__ = writer == null ? null : writer;
    return function() {
      var or__3577__auto__ = cljs.core._flush[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._flush["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj9201 = {};
  return obj9201;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._pr_writer[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj9203 = {};
  return obj9203;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3565__auto__ = d;
    if (and__3565__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4204__auto__ = d == null ? null : d;
    return function() {
      var or__3577__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj9205 = {};
  return obj9205;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3565__auto__ = this$;
    if (and__3565__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4204__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3577__auto__ = cljs.core._notify_watches[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3565__auto__ = this$;
    if (and__3565__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4204__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3577__auto__ = cljs.core._add_watch[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._add_watch["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3565__auto__ = this$;
    if (and__3565__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4204__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3577__auto__ = cljs.core._remove_watch[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj9207 = {};
  return obj9207;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._as_transient[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._as_transient["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj9209 = {};
  return obj9209;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj9211 = {};
  return obj9211;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj9213 = {};
  return obj9213;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj9215 = {};
  return obj9215;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj9217 = {};
  return obj9217;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj9219 = {};
  return obj9219;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._compare[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._compare["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj9221 = {};
  return obj9221;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._drop_first[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._drop_first["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj9223 = {};
  return obj9223;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._chunked_first[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj9225 = {};
  return obj9225;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._chunked_next[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj9227 = {};
  return obj9227;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._name[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._name["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._namespace[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._namespace["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3565__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3565__auto__) {
        return b.ns;
      } else {
        return and__3565__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3988__auto__ = self__._hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__9229 = null;
  var G__9229__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__9229__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__9229 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9229__2.call(this, self__, coll);
      case 3:
        return G__9229__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9229;
}();
cljs.core.Symbol.prototype.apply = function(self__, args9228) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9228)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__9231 = value;
  if (G__9231) {
    var bit__4227__auto__ = G__9231.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4227__auto__ || G__9231.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__9231.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__9231);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__9231);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__9233 = coll;
      if (G__9233) {
        var bit__4220__auto__ = G__9233.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4220__auto__ || G__9233.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__9235 = coll;
      if (G__9235) {
        var bit__4220__auto__ = G__9235.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4220__auto__ || G__9235.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__9237 = coll;
      if (G__9237) {
        var bit__4220__auto__ = G__9237.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4220__auto__ || G__9237.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__9239 = coll;
      if (G__9239) {
        var bit__4220__auto__ = G__9239.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4220__auto__ || G__9239.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__9240__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__9241 = y;
            var G__9242 = cljs.core.first.call(null, more);
            var G__9243 = cljs.core.next.call(null, more);
            x = G__9241;
            y = G__9242;
            more = G__9243;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9240 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9240__delegate.call(this, x, y, more);
    };
    G__9240.cljs$lang$maxFixedArity = 2;
    G__9240.cljs$lang$applyTo = function(arglist__9244) {
      var x = cljs.core.first(arglist__9244);
      arglist__9244 = cljs.core.next(arglist__9244);
      var y = cljs.core.first(arglist__9244);
      var more = cljs.core.rest(arglist__9244);
      return G__9240__delegate(x, y, more);
    };
    G__9240.cljs$core$IFn$_invoke$arity$variadic = G__9240__delegate;
    return G__9240;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__9245 = nval;
            var G__9246 = n + 1;
            val = G__9245;
            n = G__9246;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9247 = nval;
          var G__9248 = n + 1;
          val__$1 = G__9247;
          n = G__9248;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9249 = nval;
          var G__9250 = n + 1;
          val__$1 = G__9249;
          n = G__9250;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__9251 = nval;
            var G__9252 = n + 1;
            val = G__9251;
            n = G__9252;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9253 = nval;
          var G__9254 = n + 1;
          val__$1 = G__9253;
          n = G__9254;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9255 = nval;
          var G__9256 = n + 1;
          val__$1 = G__9255;
          n = G__9256;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__9258 = x;
  if (G__9258) {
    var bit__4227__auto__ = G__9258.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4227__auto__ || G__9258.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__9258.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__9258);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__9258);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__9260 = x;
  if (G__9260) {
    var bit__4227__auto__ = G__9260.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4227__auto__ || G__9260.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__9260.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__9260);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__9260);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__9261 = sn;
      s = G__9261;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__9262__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__9263 = conj.call(null, coll, x);
          var G__9264 = cljs.core.first.call(null, xs);
          var G__9265 = cljs.core.next.call(null, xs);
          coll = G__9263;
          x = G__9264;
          xs = G__9265;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__9262 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9262__delegate.call(this, coll, x, xs);
    };
    G__9262.cljs$lang$maxFixedArity = 2;
    G__9262.cljs$lang$applyTo = function(arglist__9266) {
      var coll = cljs.core.first(arglist__9266);
      arglist__9266 = cljs.core.next(arglist__9266);
      var x = cljs.core.first(arglist__9266);
      var xs = cljs.core.rest(arglist__9266);
      return G__9262__delegate(coll, x, xs);
    };
    G__9262.cljs$core$IFn$_invoke$arity$variadic = G__9262__delegate;
    return G__9262;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__9267 = cljs.core.next.call(null, s);
      var G__9268 = acc + 1;
      s = G__9267;
      acc = G__9268;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__9270 = coll;
      if (G__9270) {
        var bit__4220__auto__ = G__9270.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4220__auto__ || G__9270.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__9271 = cljs.core.next.call(null, coll);
              var G__9272 = n - 1;
              coll = G__9271;
              n = G__9272;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__9273 = cljs.core.next.call(null, coll);
              var G__9274 = n - 1;
              var G__9275 = not_found;
              coll = G__9273;
              n = G__9274;
              not_found = G__9275;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__9280 = coll;
          if (G__9280) {
            var bit__4220__auto__ = G__9280.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4220__auto__ || G__9280.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__9281 = coll;
                  if (G__9281) {
                    var bit__4227__auto__ = G__9281.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4227__auto__ || G__9281.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__9281.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9281);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9281);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__9282 = coll;
          if (G__9282) {
            var bit__4220__auto__ = G__9282.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4220__auto__ || G__9282.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__9283 = coll;
                  if (G__9283) {
                    var bit__4227__auto__ = G__9283.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4227__auto__ || G__9283.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__9283.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9283);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9283);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__9286 = o;
        if (G__9286) {
          var bit__4220__auto__ = G__9286.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4220__auto__ || G__9286.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__9287 = o;
        if (G__9287) {
          var bit__4220__auto__ = G__9287.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4220__auto__ || G__9287.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__9288__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__9289 = ret;
          var G__9290 = cljs.core.first.call(null, kvs);
          var G__9291 = cljs.core.second.call(null, kvs);
          var G__9292 = cljs.core.nnext.call(null, kvs);
          coll = G__9289;
          k = G__9290;
          v = G__9291;
          kvs = G__9292;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__9288 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9288__delegate.call(this, coll, k, v, kvs);
    };
    G__9288.cljs$lang$maxFixedArity = 3;
    G__9288.cljs$lang$applyTo = function(arglist__9293) {
      var coll = cljs.core.first(arglist__9293);
      arglist__9293 = cljs.core.next(arglist__9293);
      var k = cljs.core.first(arglist__9293);
      arglist__9293 = cljs.core.next(arglist__9293);
      var v = cljs.core.first(arglist__9293);
      var kvs = cljs.core.rest(arglist__9293);
      return G__9288__delegate(coll, k, v, kvs);
    };
    G__9288.cljs$core$IFn$_invoke$arity$variadic = G__9288__delegate;
    return G__9288;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__9294__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__9295 = ret;
            var G__9296 = cljs.core.first.call(null, ks);
            var G__9297 = cljs.core.next.call(null, ks);
            coll = G__9295;
            k = G__9296;
            ks = G__9297;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__9294 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9294__delegate.call(this, coll, k, ks);
    };
    G__9294.cljs$lang$maxFixedArity = 2;
    G__9294.cljs$lang$applyTo = function(arglist__9298) {
      var coll = cljs.core.first(arglist__9298);
      arglist__9298 = cljs.core.next(arglist__9298);
      var k = cljs.core.first(arglist__9298);
      var ks = cljs.core.rest(arglist__9298);
      return G__9294__delegate(coll, k, ks);
    };
    G__9294.cljs$core$IFn$_invoke$arity$variadic = G__9294__delegate;
    return G__9294;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3577__auto__ = goog.isFunction(f);
  if (or__3577__auto__) {
    return or__3577__auto__;
  } else {
    var G__9302 = f;
    if (G__9302) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto____$1 = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto____$1)) {
          return or__3577__auto____$1;
        } else {
          return G__9302.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__9302.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__9302);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__9302);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__9304 = null;
  var G__9304__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__9304__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__9304__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__9304__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__9304__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__9304__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__9304__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__9304__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__9304__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__9304__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__9304__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__9304__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__9304__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__9304__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__9304__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__9304__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__9304__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__9304__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__9304__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__9304__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__9304__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__9304 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__9304__2.call(this, self__, a);
      case 3:
        return G__9304__3.call(this, self__, a, b);
      case 4:
        return G__9304__4.call(this, self__, a, b, c);
      case 5:
        return G__9304__5.call(this, self__, a, b, c, d);
      case 6:
        return G__9304__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__9304__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__9304__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__9304__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__9304__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__9304__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__9304__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__9304__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__9304__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__9304__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__9304__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__9304__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__9304__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__9304__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__9304__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__9304__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__9304__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9304;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args9303) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9303)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__9308 = o;
    if (G__9308) {
      var bit__4227__auto__ = G__9308.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4227__auto__ || G__9308.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__9308.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__9308);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__9308);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3565__auto__ = !(o == null);
    if (and__3565__auto__) {
      var G__9312 = o;
      if (G__9312) {
        var bit__4227__auto__ = G__9312.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4227__auto__ || G__9312.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__9312.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9312);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9312);
      }
    } else {
      return and__3565__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__9313__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__9314 = ret;
            var G__9315 = cljs.core.first.call(null, ks);
            var G__9316 = cljs.core.next.call(null, ks);
            coll = G__9314;
            k = G__9315;
            ks = G__9316;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__9313 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9313__delegate.call(this, coll, k, ks);
    };
    G__9313.cljs$lang$maxFixedArity = 2;
    G__9313.cljs$lang$applyTo = function(arglist__9317) {
      var coll = cljs.core.first(arglist__9317);
      arglist__9317 = cljs.core.next(arglist__9317);
      var k = cljs.core.first(arglist__9317);
      var ks = cljs.core.rest(arglist__9317);
      return G__9313__delegate(coll, k, ks);
    };
    G__9313.cljs$core$IFn$_invoke$arity$variadic = G__9313__delegate;
    return G__9313;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj9319 = {};
  return obj9319;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj9323 = {};
      return obj9323;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__9325 = o;
    if (G__9325) {
      var bit__4220__auto__ = G__9325.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4220__auto__ || G__9325.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__9327 = x;
    if (G__9327) {
      var bit__4227__auto__ = G__9327.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4227__auto__ || G__9327.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__9327.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__9327);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__9327);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__9329 = x;
    if (G__9329) {
      var bit__4227__auto__ = G__9329.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4227__auto__ || G__9329.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__9329.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__9329);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__9329);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__9331 = x;
  if (G__9331) {
    var bit__4227__auto__ = G__9331.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4227__auto__ || G__9331.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__9331.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__9331);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__9331);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__9333 = x;
  if (G__9333) {
    var bit__4227__auto__ = G__9333.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4227__auto__ || G__9333.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__9333.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__9333);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__9333);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__9335 = x;
  if (G__9335) {
    var bit__4227__auto__ = G__9335.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4227__auto__ || G__9335.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__9335.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__9335);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__9335);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__9337 = x;
  if (G__9337) {
    var bit__4227__auto__ = G__9337.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4227__auto__ || G__9337.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__9337.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__9337);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__9337);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__9339 = x;
    if (G__9339) {
      var bit__4227__auto__ = G__9339.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4227__auto__ || G__9339.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__9339.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__9339);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__9339);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__9341 = x;
  if (G__9341) {
    var bit__4227__auto__ = G__9341.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4227__auto__ || G__9341.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__9341.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__9341);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__9341);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__9343 = x;
  if (G__9343) {
    var bit__4220__auto__ = G__9343.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4220__auto__ || G__9343.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj9347 = {};
    return obj9347;
  };
  var js_obj__1 = function() {
    var G__9348__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__9348 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9348__delegate.call(this, keyvals);
    };
    G__9348.cljs$lang$maxFixedArity = 0;
    G__9348.cljs$lang$applyTo = function(arglist__9349) {
      var keyvals = cljs.core.seq(arglist__9349);
      return G__9348__delegate(keyvals);
    };
    G__9348.cljs$core$IFn$_invoke$arity$variadic = G__9348__delegate;
    return G__9348;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__9350 = i__$1 + 1;
      var G__9351 = j__$1 + 1;
      var G__9352 = len__$1 - 1;
      i__$1 = G__9350;
      j__$1 = G__9351;
      len__$1 = G__9352;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__9353 = i__$1 - 1;
      var G__9354 = j__$1 - 1;
      var G__9355 = len__$1 - 1;
      i__$1 = G__9353;
      j__$1 = G__9354;
      len__$1 = G__9355;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj9357 = {};
  return obj9357;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__9359 = s;
    if (G__9359) {
      var bit__4227__auto__ = G__9359.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4227__auto__ || G__9359.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__9359.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9359);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__9359);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__9361 = s;
  if (G__9361) {
    var bit__4227__auto__ = G__9361.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4227__auto__ || G__9361.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__9361.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__9361);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__9361);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3577__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3577__auto__) {
    return or__3577__auto__;
  } else {
    var G__9365 = f;
    if (G__9365) {
      var bit__4227__auto__ = G__9365.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4227__auto__ || G__9365.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__9365.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__9365);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__9365);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__9366__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__9367 = cljs.core.conj.call(null, s, x__$1);
              var G__9368 = etc;
              s = G__9367;
              xs = G__9368;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__9366 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9366__delegate.call(this, x, y, more);
    };
    G__9366.cljs$lang$maxFixedArity = 2;
    G__9366.cljs$lang$applyTo = function(arglist__9369) {
      var x = cljs.core.first(arglist__9369);
      arglist__9369 = cljs.core.next(arglist__9369);
      var y = cljs.core.first(arglist__9369);
      var more = cljs.core.rest(arglist__9369);
      return G__9366__delegate(x, y, more);
    };
    G__9366.cljs$core$IFn$_invoke$arity$variadic = G__9366__delegate;
    return G__9366;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3577__auto__ = cljs.core.seq.call(null, coll);
    if (or__3577__auto__) {
      return or__3577__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__9371 = x;
            if (G__9371) {
              var bit__4220__auto__ = G__9371.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4220__auto__ || G__9371.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__9372 = xs;
        var G__9373 = ys;
        var G__9374 = len;
        var G__9375 = n + 1;
        xs = G__9372;
        ys = G__9373;
        len = G__9374;
        n = G__9375;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__9376 = nval;
          var G__9377 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__9376;
          coll__$1 = G__9377;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__9380 = coll;
      if (G__9380) {
        var bit__4220__auto__ = G__9380.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4220__auto__ || G__9380.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__9381 = coll;
      if (G__9381) {
        var bit__4220__auto__ = G__9381.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4220__auto__ || G__9381.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__9382__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__9382 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9382__delegate.call(this, x, y, more);
    };
    G__9382.cljs$lang$maxFixedArity = 2;
    G__9382.cljs$lang$applyTo = function(arglist__9383) {
      var x = cljs.core.first(arglist__9383);
      arglist__9383 = cljs.core.next(arglist__9383);
      var y = cljs.core.first(arglist__9383);
      var more = cljs.core.rest(arglist__9383);
      return G__9382__delegate(x, y, more);
    };
    G__9382.cljs$core$IFn$_invoke$arity$variadic = G__9382__delegate;
    return G__9382;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__9384__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__9384 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9384__delegate.call(this, x, y, more);
    };
    G__9384.cljs$lang$maxFixedArity = 2;
    G__9384.cljs$lang$applyTo = function(arglist__9385) {
      var x = cljs.core.first(arglist__9385);
      arglist__9385 = cljs.core.next(arglist__9385);
      var y = cljs.core.first(arglist__9385);
      var more = cljs.core.rest(arglist__9385);
      return G__9384__delegate(x, y, more);
    };
    G__9384.cljs$core$IFn$_invoke$arity$variadic = G__9384__delegate;
    return G__9384;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__9386__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__9386 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9386__delegate.call(this, x, y, more);
    };
    G__9386.cljs$lang$maxFixedArity = 2;
    G__9386.cljs$lang$applyTo = function(arglist__9387) {
      var x = cljs.core.first(arglist__9387);
      arglist__9387 = cljs.core.next(arglist__9387);
      var y = cljs.core.first(arglist__9387);
      var more = cljs.core.rest(arglist__9387);
      return G__9386__delegate(x, y, more);
    };
    G__9386.cljs$core$IFn$_invoke$arity$variadic = G__9386__delegate;
    return G__9386;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__9388__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__9388 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9388__delegate.call(this, x, y, more);
    };
    G__9388.cljs$lang$maxFixedArity = 2;
    G__9388.cljs$lang$applyTo = function(arglist__9389) {
      var x = cljs.core.first(arglist__9389);
      arglist__9389 = cljs.core.next(arglist__9389);
      var y = cljs.core.first(arglist__9389);
      var more = cljs.core.rest(arglist__9389);
      return G__9388__delegate(x, y, more);
    };
    G__9388.cljs$core$IFn$_invoke$arity$variadic = G__9388__delegate;
    return G__9388;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__9390__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__9391 = y;
            var G__9392 = cljs.core.first.call(null, more);
            var G__9393 = cljs.core.next.call(null, more);
            x = G__9391;
            y = G__9392;
            more = G__9393;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9390 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9390__delegate.call(this, x, y, more);
    };
    G__9390.cljs$lang$maxFixedArity = 2;
    G__9390.cljs$lang$applyTo = function(arglist__9394) {
      var x = cljs.core.first(arglist__9394);
      arglist__9394 = cljs.core.next(arglist__9394);
      var y = cljs.core.first(arglist__9394);
      var more = cljs.core.rest(arglist__9394);
      return G__9390__delegate(x, y, more);
    };
    G__9390.cljs$core$IFn$_invoke$arity$variadic = G__9390__delegate;
    return G__9390;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__9395__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__9396 = y;
            var G__9397 = cljs.core.first.call(null, more);
            var G__9398 = cljs.core.next.call(null, more);
            x = G__9396;
            y = G__9397;
            more = G__9398;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9395 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9395__delegate.call(this, x, y, more);
    };
    G__9395.cljs$lang$maxFixedArity = 2;
    G__9395.cljs$lang$applyTo = function(arglist__9399) {
      var x = cljs.core.first(arglist__9399);
      arglist__9399 = cljs.core.next(arglist__9399);
      var y = cljs.core.first(arglist__9399);
      var more = cljs.core.rest(arglist__9399);
      return G__9395__delegate(x, y, more);
    };
    G__9395.cljs$core$IFn$_invoke$arity$variadic = G__9395__delegate;
    return G__9395;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__9400__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__9401 = y;
            var G__9402 = cljs.core.first.call(null, more);
            var G__9403 = cljs.core.next.call(null, more);
            x = G__9401;
            y = G__9402;
            more = G__9403;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9400 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9400__delegate.call(this, x, y, more);
    };
    G__9400.cljs$lang$maxFixedArity = 2;
    G__9400.cljs$lang$applyTo = function(arglist__9404) {
      var x = cljs.core.first(arglist__9404);
      arglist__9404 = cljs.core.next(arglist__9404);
      var y = cljs.core.first(arglist__9404);
      var more = cljs.core.rest(arglist__9404);
      return G__9400__delegate(x, y, more);
    };
    G__9400.cljs$core$IFn$_invoke$arity$variadic = G__9400__delegate;
    return G__9400;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__9405__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__9406 = y;
            var G__9407 = cljs.core.first.call(null, more);
            var G__9408 = cljs.core.next.call(null, more);
            x = G__9406;
            y = G__9407;
            more = G__9408;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9405 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9405__delegate.call(this, x, y, more);
    };
    G__9405.cljs$lang$maxFixedArity = 2;
    G__9405.cljs$lang$applyTo = function(arglist__9409) {
      var x = cljs.core.first(arglist__9409);
      arglist__9409 = cljs.core.next(arglist__9409);
      var y = cljs.core.first(arglist__9409);
      var more = cljs.core.rest(arglist__9409);
      return G__9405__delegate(x, y, more);
    };
    G__9405.cljs$core$IFn$_invoke$arity$variadic = G__9405__delegate;
    return G__9405;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3884__auto__ = x;
    var y__3885__auto__ = y;
    return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
  };
  var max__3 = function() {
    var G__9410__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3884__auto__ = x;
        var y__3885__auto__ = y;
        return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
      }(), more);
    };
    var G__9410 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9410__delegate.call(this, x, y, more);
    };
    G__9410.cljs$lang$maxFixedArity = 2;
    G__9410.cljs$lang$applyTo = function(arglist__9411) {
      var x = cljs.core.first(arglist__9411);
      arglist__9411 = cljs.core.next(arglist__9411);
      var y = cljs.core.first(arglist__9411);
      var more = cljs.core.rest(arglist__9411);
      return G__9410__delegate(x, y, more);
    };
    G__9410.cljs$core$IFn$_invoke$arity$variadic = G__9410__delegate;
    return G__9410;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3891__auto__ = x;
    var y__3892__auto__ = y;
    return x__3891__auto__ < y__3892__auto__ ? x__3891__auto__ : y__3892__auto__;
  };
  var min__3 = function() {
    var G__9412__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3891__auto__ = x;
        var y__3892__auto__ = y;
        return x__3891__auto__ < y__3892__auto__ ? x__3891__auto__ : y__3892__auto__;
      }(), more);
    };
    var G__9412 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9412__delegate.call(this, x, y, more);
    };
    G__9412.cljs$lang$maxFixedArity = 2;
    G__9412.cljs$lang$applyTo = function(arglist__9413) {
      var x = cljs.core.first(arglist__9413);
      arglist__9413 = cljs.core.next(arglist__9413);
      var y = cljs.core.first(arglist__9413);
      var more = cljs.core.rest(arglist__9413);
      return G__9412__delegate(x, y, more);
    };
    G__9412.cljs$core$IFn$_invoke$arity$variadic = G__9412__delegate;
    return G__9412;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__9414__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__9414 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9414__delegate.call(this, x, y, more);
    };
    G__9414.cljs$lang$maxFixedArity = 2;
    G__9414.cljs$lang$applyTo = function(arglist__9415) {
      var x = cljs.core.first(arglist__9415);
      arglist__9415 = cljs.core.next(arglist__9415);
      var y = cljs.core.first(arglist__9415);
      var more = cljs.core.rest(arglist__9415);
      return G__9414__delegate(x, y, more);
    };
    G__9414.cljs$core$IFn$_invoke$arity$variadic = G__9414__delegate;
    return G__9414;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__9416__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__9416 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9416__delegate.call(this, x, y, more);
    };
    G__9416.cljs$lang$maxFixedArity = 2;
    G__9416.cljs$lang$applyTo = function(arglist__9417) {
      var x = cljs.core.first(arglist__9417);
      arglist__9417 = cljs.core.next(arglist__9417);
      var y = cljs.core.first(arglist__9417);
      var more = cljs.core.rest(arglist__9417);
      return G__9416__delegate(x, y, more);
    };
    G__9416.cljs$core$IFn$_invoke$arity$variadic = G__9416__delegate;
    return G__9416;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__9418__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__9418 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9418__delegate.call(this, x, y, more);
    };
    G__9418.cljs$lang$maxFixedArity = 2;
    G__9418.cljs$lang$applyTo = function(arglist__9419) {
      var x = cljs.core.first(arglist__9419);
      arglist__9419 = cljs.core.next(arglist__9419);
      var y = cljs.core.first(arglist__9419);
      var more = cljs.core.rest(arglist__9419);
      return G__9418__delegate(x, y, more);
    };
    G__9418.cljs$core$IFn$_invoke$arity$variadic = G__9418__delegate;
    return G__9418;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__9420__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__9420 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9420__delegate.call(this, x, y, more);
    };
    G__9420.cljs$lang$maxFixedArity = 2;
    G__9420.cljs$lang$applyTo = function(arglist__9421) {
      var x = cljs.core.first(arglist__9421);
      arglist__9421 = cljs.core.next(arglist__9421);
      var y = cljs.core.first(arglist__9421);
      var more = cljs.core.rest(arglist__9421);
      return G__9420__delegate(x, y, more);
    };
    G__9420.cljs$core$IFn$_invoke$arity$variadic = G__9420__delegate;
    return G__9420;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__9422__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__9422 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9422__delegate.call(this, x, y, more);
    };
    G__9422.cljs$lang$maxFixedArity = 2;
    G__9422.cljs$lang$applyTo = function(arglist__9423) {
      var x = cljs.core.first(arglist__9423);
      arglist__9423 = cljs.core.next(arglist__9423);
      var y = cljs.core.first(arglist__9423);
      var more = cljs.core.rest(arglist__9423);
      return G__9422__delegate(x, y, more);
    };
    G__9422.cljs$core$IFn$_invoke$arity$variadic = G__9422__delegate;
    return G__9422;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__9424__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__9424 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9424__delegate.call(this, x, y, more);
    };
    G__9424.cljs$lang$maxFixedArity = 2;
    G__9424.cljs$lang$applyTo = function(arglist__9425) {
      var x = cljs.core.first(arglist__9425);
      arglist__9425 = cljs.core.next(arglist__9425);
      var y = cljs.core.first(arglist__9425);
      var more = cljs.core.rest(arglist__9425);
      return G__9424__delegate(x, y, more);
    };
    G__9424.cljs$core$IFn$_invoke$arity$variadic = G__9424__delegate;
    return G__9424;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__9426__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__9426 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9426__delegate.call(this, x, y, more);
    };
    G__9426.cljs$lang$maxFixedArity = 2;
    G__9426.cljs$lang$applyTo = function(arglist__9427) {
      var x = cljs.core.first(arglist__9427);
      arglist__9427 = cljs.core.next(arglist__9427);
      var y = cljs.core.first(arglist__9427);
      var more = cljs.core.rest(arglist__9427);
      return G__9426__delegate(x, y, more);
    };
    G__9426.cljs$core$IFn$_invoke$arity$variadic = G__9426__delegate;
    return G__9426;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__9428__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__9429 = y;
            var G__9430 = cljs.core.first.call(null, more);
            var G__9431 = cljs.core.next.call(null, more);
            x = G__9429;
            y = G__9430;
            more = G__9431;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9428 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9428__delegate.call(this, x, y, more);
    };
    G__9428.cljs$lang$maxFixedArity = 2;
    G__9428.cljs$lang$applyTo = function(arglist__9432) {
      var x = cljs.core.first(arglist__9432);
      arglist__9432 = cljs.core.next(arglist__9432);
      var y = cljs.core.first(arglist__9432);
      var more = cljs.core.rest(arglist__9432);
      return G__9428__delegate(x, y, more);
    };
    G__9428.cljs$core$IFn$_invoke$arity$variadic = G__9428__delegate;
    return G__9428;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__9433 = n__$1 - 1;
      var G__9434 = cljs.core.next.call(null, xs);
      n__$1 = G__9433;
      xs = G__9434;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__9435__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__9436 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__9437 = cljs.core.next.call(null, more);
          sb = G__9436;
          more = G__9437;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__9435 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__9435__delegate.call(this, x, ys);
    };
    G__9435.cljs$lang$maxFixedArity = 1;
    G__9435.cljs$lang$applyTo = function(arglist__9438) {
      var x = cljs.core.first(arglist__9438);
      var ys = cljs.core.rest(arglist__9438);
      return G__9435__delegate(x, ys);
    };
    G__9435.cljs$core$IFn$_invoke$arity$variadic = G__9435__delegate;
    return G__9435;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__9439 = cljs.core.next.call(null, xs);
            var G__9440 = cljs.core.next.call(null, ys);
            xs = G__9439;
            ys = G__9440;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__9441 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__9442 = cljs.core.next.call(null, s);
        res = G__9441;
        s = G__9442;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__9443 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__9444 = cljs.core.next.call(null, s);
      h = G__9443;
      s = G__9444;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__9445 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__9446 = cljs.core.next.call(null, s__$1);
      h = G__9445;
      s__$1 = G__9446;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__9453_9459 = cljs.core.seq.call(null, fn_map);
  var chunk__9454_9460 = null;
  var count__9455_9461 = 0;
  var i__9456_9462 = 0;
  while (true) {
    if (i__9456_9462 < count__9455_9461) {
      var vec__9457_9463 = cljs.core._nth.call(null, chunk__9454_9460, i__9456_9462);
      var key_name_9464 = cljs.core.nth.call(null, vec__9457_9463, 0, null);
      var f_9465 = cljs.core.nth.call(null, vec__9457_9463, 1, null);
      var str_name_9466 = cljs.core.name.call(null, key_name_9464);
      obj[str_name_9466] = f_9465;
      var G__9467 = seq__9453_9459;
      var G__9468 = chunk__9454_9460;
      var G__9469 = count__9455_9461;
      var G__9470 = i__9456_9462 + 1;
      seq__9453_9459 = G__9467;
      chunk__9454_9460 = G__9468;
      count__9455_9461 = G__9469;
      i__9456_9462 = G__9470;
      continue;
    } else {
      var temp__4126__auto___9471 = cljs.core.seq.call(null, seq__9453_9459);
      if (temp__4126__auto___9471) {
        var seq__9453_9472__$1 = temp__4126__auto___9471;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9453_9472__$1)) {
          var c__4333__auto___9473 = cljs.core.chunk_first.call(null, seq__9453_9472__$1);
          var G__9474 = cljs.core.chunk_rest.call(null, seq__9453_9472__$1);
          var G__9475 = c__4333__auto___9473;
          var G__9476 = cljs.core.count.call(null, c__4333__auto___9473);
          var G__9477 = 0;
          seq__9453_9459 = G__9474;
          chunk__9454_9460 = G__9475;
          count__9455_9461 = G__9476;
          i__9456_9462 = G__9477;
          continue;
        } else {
          var vec__9458_9478 = cljs.core.first.call(null, seq__9453_9472__$1);
          var key_name_9479 = cljs.core.nth.call(null, vec__9458_9478, 0, null);
          var f_9480 = cljs.core.nth.call(null, vec__9458_9478, 1, null);
          var str_name_9481 = cljs.core.name.call(null, key_name_9479);
          obj[str_name_9481] = f_9480;
          var G__9482 = cljs.core.next.call(null, seq__9453_9472__$1);
          var G__9483 = null;
          var G__9484 = 0;
          var G__9485 = 0;
          seq__9453_9459 = G__9482;
          chunk__9454_9460 = G__9483;
          count__9455_9461 = G__9484;
          i__9456_9462 = G__9485;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__9487 = coll;
  if (G__9487) {
    var bit__4227__auto__ = G__9487.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4227__auto__ || G__9487.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__9487.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__9487);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__9487);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__9488 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__9488;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__9489 = i - 1;
        var G__9490 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__9489;
        r = G__9490;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__9491) {
    var xs = cljs.core.seq(arglist__9491);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3577__auto__ = coll == null;
    if (or__3577__auto__) {
      return or__3577__auto__;
    } else {
      var G__9495 = coll;
      if (G__9495) {
        var bit__4220__auto__ = G__9495.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4220__auto__ || G__9495.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__9497 = x;
  if (G__9497) {
    var bit__4227__auto__ = G__9497.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4227__auto__ || G__9497.cljs$core$IList$) {
      return true;
    } else {
      if (!G__9497.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__9497);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__9497);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__9499 = null;
  var G__9499__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__9499__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__9499 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9499__2.call(this, self__, coll);
      case 3:
        return G__9499__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9499;
}();
cljs.core.Keyword.prototype.apply = function(self__, args9498) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9498)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__9501 = x;
    if (G__9501) {
      var bit__4220__auto__ = G__9501.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4220__auto__ || G__9501.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__9502 = ls.sval();
        ls = G__9502;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__9504 = s;
    if (G__9504) {
      var bit__4220__auto__ = G__9504.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4220__auto__ || G__9504.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__9505 = cljs.core.next.call(null, s__$1);
      s__$1 = G__9505;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_9506 = 0;
  var xs_9507 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_9507) {
      ret[i_9506] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_9507));
      var G__9508 = i_9506 + 1;
      var G__9509 = cljs.core.next.call(null, xs_9507);
      i_9506 = G__9508;
      xs_9507 = G__9509;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9510 = i + 1;
          var G__9511 = cljs.core.next.call(null, s__$1);
          i = G__9510;
          s__$1 = G__9511;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4433__auto___9512 = size;
      var i_9513 = 0;
      while (true) {
        if (i_9513 < n__4433__auto___9512) {
          a[i_9513] = init_val_or_seq;
          var G__9514 = i_9513 + 1;
          i_9513 = G__9514;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9515 = i + 1;
          var G__9516 = cljs.core.next.call(null, s__$1);
          i = G__9515;
          s__$1 = G__9516;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4433__auto___9517 = size;
      var i_9518 = 0;
      while (true) {
        if (i_9518 < n__4433__auto___9517) {
          a[i_9518] = init_val_or_seq;
          var G__9519 = i_9518 + 1;
          i_9518 = G__9519;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9520 = i + 1;
          var G__9521 = cljs.core.next.call(null, s__$1);
          i = G__9520;
          s__$1 = G__9521;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4433__auto___9522 = size;
      var i_9523 = 0;
      while (true) {
        if (i_9523 < n__4433__auto___9522) {
          a[i_9523] = init_val_or_seq;
          var G__9524 = i_9523 + 1;
          i_9523 = G__9524;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9525 = i + 1;
          var G__9526 = cljs.core.next.call(null, s__$1);
          i = G__9525;
          s__$1 = G__9526;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4433__auto___9527 = size;
      var i_9528 = 0;
      while (true) {
        if (i_9528 < n__4433__auto___9527) {
          a[i_9528] = init_val_or_seq;
          var G__9529 = i_9528 + 1;
          i_9528 = G__9529;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__9530 = cljs.core.next.call(null, s__$1);
        var G__9531 = i - 1;
        var G__9532 = sum + 1;
        s__$1 = G__9530;
        i = G__9531;
        sum = G__9532;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__9533__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__9533 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9533__delegate.call(this, x, y, zs);
    };
    G__9533.cljs$lang$maxFixedArity = 2;
    G__9533.cljs$lang$applyTo = function(arglist__9534) {
      var x = cljs.core.first(arglist__9534);
      arglist__9534 = cljs.core.next(arglist__9534);
      var y = cljs.core.first(arglist__9534);
      var zs = cljs.core.rest(arglist__9534);
      return G__9533__delegate(x, y, zs);
    };
    G__9533.cljs$core$IFn$_invoke$arity$variadic = G__9533__delegate;
    return G__9533;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__9535__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__9535 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9535__delegate.call(this, a, b, c, d, more);
    };
    G__9535.cljs$lang$maxFixedArity = 4;
    G__9535.cljs$lang$applyTo = function(arglist__9536) {
      var a = cljs.core.first(arglist__9536);
      arglist__9536 = cljs.core.next(arglist__9536);
      var b = cljs.core.first(arglist__9536);
      arglist__9536 = cljs.core.next(arglist__9536);
      var c = cljs.core.first(arglist__9536);
      arglist__9536 = cljs.core.next(arglist__9536);
      var d = cljs.core.first(arglist__9536);
      var more = cljs.core.rest(arglist__9536);
      return G__9535__delegate(a, b, c, d, more);
    };
    G__9535.cljs$core$IFn$_invoke$arity$variadic = G__9535__delegate;
    return G__9535;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__9537__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__9538 = ntcoll;
          var G__9539 = cljs.core.first.call(null, vals);
          var G__9540 = cljs.core.next.call(null, vals);
          tcoll = G__9538;
          val = G__9539;
          vals = G__9540;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__9537 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9537__delegate.call(this, tcoll, val, vals);
    };
    G__9537.cljs$lang$maxFixedArity = 2;
    G__9537.cljs$lang$applyTo = function(arglist__9541) {
      var tcoll = cljs.core.first(arglist__9541);
      arglist__9541 = cljs.core.next(arglist__9541);
      var val = cljs.core.first(arglist__9541);
      var vals = cljs.core.rest(arglist__9541);
      return G__9537__delegate(tcoll, val, vals);
    };
    G__9537.cljs$core$IFn$_invoke$arity$variadic = G__9537__delegate;
    return G__9537;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__9542__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__9543 = ntcoll;
          var G__9544 = cljs.core.first.call(null, kvs);
          var G__9545 = cljs.core.second.call(null, kvs);
          var G__9546 = cljs.core.nnext.call(null, kvs);
          tcoll = G__9543;
          key = G__9544;
          val = G__9545;
          kvs = G__9546;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__9542 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9542__delegate.call(this, tcoll, key, val, kvs);
    };
    G__9542.cljs$lang$maxFixedArity = 3;
    G__9542.cljs$lang$applyTo = function(arglist__9547) {
      var tcoll = cljs.core.first(arglist__9547);
      arglist__9547 = cljs.core.next(arglist__9547);
      var key = cljs.core.first(arglist__9547);
      arglist__9547 = cljs.core.next(arglist__9547);
      var val = cljs.core.first(arglist__9547);
      var kvs = cljs.core.rest(arglist__9547);
      return G__9542__delegate(tcoll, key, val, kvs);
    };
    G__9542.cljs$core$IFn$_invoke$arity$variadic = G__9542__delegate;
    return G__9542;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__9548__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__9549 = ntcoll;
          var G__9550 = cljs.core.first.call(null, ks);
          var G__9551 = cljs.core.next.call(null, ks);
          tcoll = G__9549;
          key = G__9550;
          ks = G__9551;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__9548 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9548__delegate.call(this, tcoll, key, ks);
    };
    G__9548.cljs$lang$maxFixedArity = 2;
    G__9548.cljs$lang$applyTo = function(arglist__9552) {
      var tcoll = cljs.core.first(arglist__9552);
      arglist__9552 = cljs.core.next(arglist__9552);
      var key = cljs.core.first(arglist__9552);
      var ks = cljs.core.rest(arglist__9552);
      return G__9548__delegate(tcoll, key, ks);
    };
    G__9548.cljs$core$IFn$_invoke$arity$variadic = G__9548__delegate;
    return G__9548;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__9553__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__9554 = ntcoll;
          var G__9555 = cljs.core.first.call(null, vals);
          var G__9556 = cljs.core.next.call(null, vals);
          tcoll = G__9554;
          val = G__9555;
          vals = G__9556;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__9553 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9553__delegate.call(this, tcoll, val, vals);
    };
    G__9553.cljs$lang$maxFixedArity = 2;
    G__9553.cljs$lang$applyTo = function(arglist__9557) {
      var tcoll = cljs.core.first(arglist__9557);
      arglist__9557 = cljs.core.next(arglist__9557);
      var val = cljs.core.first(arglist__9557);
      var vals = cljs.core.rest(arglist__9557);
      return G__9553__delegate(tcoll, val, vals);
    };
    G__9553.cljs$core$IFn$_invoke$arity$variadic = G__9553__delegate;
    return G__9553;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4477 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4477);
      } else {
        return f.call(null, a4477);
      }
    } else {
      var b4478 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4477, b4478);
        } else {
          return f.call(null, a4477, b4478);
        }
      } else {
        var c4479 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4477, b4478, c4479);
          } else {
            return f.call(null, a4477, b4478, c4479);
          }
        } else {
          var d4480 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4477, b4478, c4479, d4480);
            } else {
              return f.call(null, a4477, b4478, c4479, d4480);
            }
          } else {
            var e4481 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4477, b4478, c4479, d4480, e4481);
              } else {
                return f.call(null, a4477, b4478, c4479, d4480, e4481);
              }
            } else {
              var f4482 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4477, b4478, c4479, d4480, e4481, f4482);
                } else {
                  return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482);
                }
              } else {
                var g4483 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4477, b4478, c4479, d4480, e4481, f4482, g4483);
                  } else {
                    return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483);
                  }
                } else {
                  var h4484 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484);
                    } else {
                      return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484);
                    }
                  } else {
                    var i4485 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485);
                      } else {
                        return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485);
                      }
                    } else {
                      var j4486 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486);
                        } else {
                          return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486);
                        }
                      } else {
                        var k4487 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487);
                          } else {
                            return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487);
                          }
                        } else {
                          var l4488 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488);
                            } else {
                              return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488);
                            }
                          } else {
                            var m4489 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489);
                              } else {
                                return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489);
                              }
                            } else {
                              var n4490 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490);
                                } else {
                                  return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490);
                                }
                              } else {
                                var o4491 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491);
                                  } else {
                                    return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491);
                                  }
                                } else {
                                  var p4492 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492);
                                    } else {
                                      return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492);
                                    }
                                  } else {
                                    var q4493 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493);
                                      } else {
                                        return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493);
                                      }
                                    } else {
                                      var r4494 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494);
                                        } else {
                                          return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494);
                                        }
                                      } else {
                                        var s4495 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494, s4495);
                                          } else {
                                            return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494, s4495);
                                          }
                                        } else {
                                          var t4496 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494, s4495, t4496);
                                            } else {
                                              return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494, s4495, t4496);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__9558__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__9558 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__9558__delegate.call(this, f, a, b, c, d, args);
    };
    G__9558.cljs$lang$maxFixedArity = 5;
    G__9558.cljs$lang$applyTo = function(arglist__9559) {
      var f = cljs.core.first(arglist__9559);
      arglist__9559 = cljs.core.next(arglist__9559);
      var a = cljs.core.first(arglist__9559);
      arglist__9559 = cljs.core.next(arglist__9559);
      var b = cljs.core.first(arglist__9559);
      arglist__9559 = cljs.core.next(arglist__9559);
      var c = cljs.core.first(arglist__9559);
      arglist__9559 = cljs.core.next(arglist__9559);
      var d = cljs.core.first(arglist__9559);
      var args = cljs.core.rest(arglist__9559);
      return G__9558__delegate(f, a, b, c, d, args);
    };
    G__9558.cljs$core$IFn$_invoke$arity$variadic = G__9558__delegate;
    return G__9558;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__9560__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__9560 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__9560__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__9560.cljs$lang$maxFixedArity = 6;
    G__9560.cljs$lang$applyTo = function(arglist__9561) {
      var obj = cljs.core.first(arglist__9561);
      arglist__9561 = cljs.core.next(arglist__9561);
      var f = cljs.core.first(arglist__9561);
      arglist__9561 = cljs.core.next(arglist__9561);
      var a = cljs.core.first(arglist__9561);
      arglist__9561 = cljs.core.next(arglist__9561);
      var b = cljs.core.first(arglist__9561);
      arglist__9561 = cljs.core.next(arglist__9561);
      var c = cljs.core.first(arglist__9561);
      arglist__9561 = cljs.core.next(arglist__9561);
      var d = cljs.core.first(arglist__9561);
      var args = cljs.core.rest(arglist__9561);
      return G__9560__delegate(obj, f, a, b, c, d, args);
    };
    G__9560.cljs$core$IFn$_invoke$arity$variadic = G__9560__delegate;
    return G__9560;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__9562__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__9562 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9562__delegate.call(this, x, y, more);
    };
    G__9562.cljs$lang$maxFixedArity = 2;
    G__9562.cljs$lang$applyTo = function(arglist__9563) {
      var x = cljs.core.first(arglist__9563);
      arglist__9563 = cljs.core.next(arglist__9563);
      var y = cljs.core.first(arglist__9563);
      var more = cljs.core.rest(arglist__9563);
      return G__9562__delegate(x, y, more);
    };
    G__9562.cljs$core$IFn$_invoke$arity$variadic = G__9562__delegate;
    return G__9562;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__9564 = pred;
        var G__9565 = cljs.core.next.call(null, coll);
        pred = G__9564;
        coll = G__9565;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3577__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        var G__9566 = pred;
        var G__9567 = cljs.core.next.call(null, coll);
        pred = G__9566;
        coll = G__9567;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__9568 = null;
    var G__9568__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__9568__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__9568__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__9568__3 = function() {
      var G__9569__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__9569 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__9569__delegate.call(this, x, y, zs);
      };
      G__9569.cljs$lang$maxFixedArity = 2;
      G__9569.cljs$lang$applyTo = function(arglist__9570) {
        var x = cljs.core.first(arglist__9570);
        arglist__9570 = cljs.core.next(arglist__9570);
        var y = cljs.core.first(arglist__9570);
        var zs = cljs.core.rest(arglist__9570);
        return G__9569__delegate(x, y, zs);
      };
      G__9569.cljs$core$IFn$_invoke$arity$variadic = G__9569__delegate;
      return G__9569;
    }();
    G__9568 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__9568__0.call(this);
        case 1:
          return G__9568__1.call(this, x);
        case 2:
          return G__9568__2.call(this, x, y);
        default:
          return G__9568__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9568.cljs$lang$maxFixedArity = 2;
    G__9568.cljs$lang$applyTo = G__9568__3.cljs$lang$applyTo;
    return G__9568;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__9571__delegate = function(args) {
      return x;
    };
    var G__9571 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9571__delegate.call(this, args);
    };
    G__9571.cljs$lang$maxFixedArity = 0;
    G__9571.cljs$lang$applyTo = function(arglist__9572) {
      var args = cljs.core.seq(arglist__9572);
      return G__9571__delegate(args);
    };
    G__9571.cljs$core$IFn$_invoke$arity$variadic = G__9571__delegate;
    return G__9571;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__9573 = null;
      var G__9573__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__9573__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__9573__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__9573__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__9573__4 = function() {
        var G__9574__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__9574 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9574__delegate.call(this, x, y, z, args);
        };
        G__9574.cljs$lang$maxFixedArity = 3;
        G__9574.cljs$lang$applyTo = function(arglist__9575) {
          var x = cljs.core.first(arglist__9575);
          arglist__9575 = cljs.core.next(arglist__9575);
          var y = cljs.core.first(arglist__9575);
          arglist__9575 = cljs.core.next(arglist__9575);
          var z = cljs.core.first(arglist__9575);
          var args = cljs.core.rest(arglist__9575);
          return G__9574__delegate(x, y, z, args);
        };
        G__9574.cljs$core$IFn$_invoke$arity$variadic = G__9574__delegate;
        return G__9574;
      }();
      G__9573 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9573__0.call(this);
          case 1:
            return G__9573__1.call(this, x);
          case 2:
            return G__9573__2.call(this, x, y);
          case 3:
            return G__9573__3.call(this, x, y, z);
          default:
            return G__9573__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9573.cljs$lang$maxFixedArity = 3;
      G__9573.cljs$lang$applyTo = G__9573__4.cljs$lang$applyTo;
      return G__9573;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__9576 = null;
      var G__9576__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__9576__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__9576__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__9576__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__9576__4 = function() {
        var G__9577__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__9577 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9577__delegate.call(this, x, y, z, args);
        };
        G__9577.cljs$lang$maxFixedArity = 3;
        G__9577.cljs$lang$applyTo = function(arglist__9578) {
          var x = cljs.core.first(arglist__9578);
          arglist__9578 = cljs.core.next(arglist__9578);
          var y = cljs.core.first(arglist__9578);
          arglist__9578 = cljs.core.next(arglist__9578);
          var z = cljs.core.first(arglist__9578);
          var args = cljs.core.rest(arglist__9578);
          return G__9577__delegate(x, y, z, args);
        };
        G__9577.cljs$core$IFn$_invoke$arity$variadic = G__9577__delegate;
        return G__9577;
      }();
      G__9576 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9576__0.call(this);
          case 1:
            return G__9576__1.call(this, x);
          case 2:
            return G__9576__2.call(this, x, y);
          case 3:
            return G__9576__3.call(this, x, y, z);
          default:
            return G__9576__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9576.cljs$lang$maxFixedArity = 3;
      G__9576.cljs$lang$applyTo = G__9576__4.cljs$lang$applyTo;
      return G__9576;
    }();
  };
  var comp__4 = function() {
    var G__9579__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__9580__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__9581 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__9582 = cljs.core.next.call(null, fs__$2);
                ret = G__9581;
                fs__$2 = G__9582;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__9580 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__9580__delegate.call(this, args);
          };
          G__9580.cljs$lang$maxFixedArity = 0;
          G__9580.cljs$lang$applyTo = function(arglist__9583) {
            var args = cljs.core.seq(arglist__9583);
            return G__9580__delegate(args);
          };
          G__9580.cljs$core$IFn$_invoke$arity$variadic = G__9580__delegate;
          return G__9580;
        }();
      }(fs__$1);
    };
    var G__9579 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9579__delegate.call(this, f1, f2, f3, fs);
    };
    G__9579.cljs$lang$maxFixedArity = 3;
    G__9579.cljs$lang$applyTo = function(arglist__9584) {
      var f1 = cljs.core.first(arglist__9584);
      arglist__9584 = cljs.core.next(arglist__9584);
      var f2 = cljs.core.first(arglist__9584);
      arglist__9584 = cljs.core.next(arglist__9584);
      var f3 = cljs.core.first(arglist__9584);
      var fs = cljs.core.rest(arglist__9584);
      return G__9579__delegate(f1, f2, f3, fs);
    };
    G__9579.cljs$core$IFn$_invoke$arity$variadic = G__9579__delegate;
    return G__9579;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__9585__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__9585 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9585__delegate.call(this, args);
      };
      G__9585.cljs$lang$maxFixedArity = 0;
      G__9585.cljs$lang$applyTo = function(arglist__9586) {
        var args = cljs.core.seq(arglist__9586);
        return G__9585__delegate(args);
      };
      G__9585.cljs$core$IFn$_invoke$arity$variadic = G__9585__delegate;
      return G__9585;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__9587__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__9587 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9587__delegate.call(this, args);
      };
      G__9587.cljs$lang$maxFixedArity = 0;
      G__9587.cljs$lang$applyTo = function(arglist__9588) {
        var args = cljs.core.seq(arglist__9588);
        return G__9587__delegate(args);
      };
      G__9587.cljs$core$IFn$_invoke$arity$variadic = G__9587__delegate;
      return G__9587;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__9589__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__9589 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9589__delegate.call(this, args);
      };
      G__9589.cljs$lang$maxFixedArity = 0;
      G__9589.cljs$lang$applyTo = function(arglist__9590) {
        var args = cljs.core.seq(arglist__9590);
        return G__9589__delegate(args);
      };
      G__9589.cljs$core$IFn$_invoke$arity$variadic = G__9589__delegate;
      return G__9589;
    }();
  };
  var partial__5 = function() {
    var G__9591__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__9592__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__9592 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__9592__delegate.call(this, args);
        };
        G__9592.cljs$lang$maxFixedArity = 0;
        G__9592.cljs$lang$applyTo = function(arglist__9593) {
          var args = cljs.core.seq(arglist__9593);
          return G__9592__delegate(args);
        };
        G__9592.cljs$core$IFn$_invoke$arity$variadic = G__9592__delegate;
        return G__9592;
      }();
    };
    var G__9591 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9591__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__9591.cljs$lang$maxFixedArity = 4;
    G__9591.cljs$lang$applyTo = function(arglist__9594) {
      var f = cljs.core.first(arglist__9594);
      arglist__9594 = cljs.core.next(arglist__9594);
      var arg1 = cljs.core.first(arglist__9594);
      arglist__9594 = cljs.core.next(arglist__9594);
      var arg2 = cljs.core.first(arglist__9594);
      arglist__9594 = cljs.core.next(arglist__9594);
      var arg3 = cljs.core.first(arglist__9594);
      var more = cljs.core.rest(arglist__9594);
      return G__9591__delegate(f, arg1, arg2, arg3, more);
    };
    G__9591.cljs$core$IFn$_invoke$arity$variadic = G__9591__delegate;
    return G__9591;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__9595 = null;
      var G__9595__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__9595__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__9595__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__9595__4 = function() {
        var G__9596__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__9596 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9596__delegate.call(this, a, b, c, ds);
        };
        G__9596.cljs$lang$maxFixedArity = 3;
        G__9596.cljs$lang$applyTo = function(arglist__9597) {
          var a = cljs.core.first(arglist__9597);
          arglist__9597 = cljs.core.next(arglist__9597);
          var b = cljs.core.first(arglist__9597);
          arglist__9597 = cljs.core.next(arglist__9597);
          var c = cljs.core.first(arglist__9597);
          var ds = cljs.core.rest(arglist__9597);
          return G__9596__delegate(a, b, c, ds);
        };
        G__9596.cljs$core$IFn$_invoke$arity$variadic = G__9596__delegate;
        return G__9596;
      }();
      G__9595 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__9595__1.call(this, a);
          case 2:
            return G__9595__2.call(this, a, b);
          case 3:
            return G__9595__3.call(this, a, b, c);
          default:
            return G__9595__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9595.cljs$lang$maxFixedArity = 3;
      G__9595.cljs$lang$applyTo = G__9595__4.cljs$lang$applyTo;
      return G__9595;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__9598 = null;
      var G__9598__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__9598__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__9598__4 = function() {
        var G__9599__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__9599 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9599__delegate.call(this, a, b, c, ds);
        };
        G__9599.cljs$lang$maxFixedArity = 3;
        G__9599.cljs$lang$applyTo = function(arglist__9600) {
          var a = cljs.core.first(arglist__9600);
          arglist__9600 = cljs.core.next(arglist__9600);
          var b = cljs.core.first(arglist__9600);
          arglist__9600 = cljs.core.next(arglist__9600);
          var c = cljs.core.first(arglist__9600);
          var ds = cljs.core.rest(arglist__9600);
          return G__9599__delegate(a, b, c, ds);
        };
        G__9599.cljs$core$IFn$_invoke$arity$variadic = G__9599__delegate;
        return G__9599;
      }();
      G__9598 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__9598__2.call(this, a, b);
          case 3:
            return G__9598__3.call(this, a, b, c);
          default:
            return G__9598__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9598.cljs$lang$maxFixedArity = 3;
      G__9598.cljs$lang$applyTo = G__9598__4.cljs$lang$applyTo;
      return G__9598;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__9601 = null;
      var G__9601__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__9601__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__9601__4 = function() {
        var G__9602__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__9602 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9602__delegate.call(this, a, b, c, ds);
        };
        G__9602.cljs$lang$maxFixedArity = 3;
        G__9602.cljs$lang$applyTo = function(arglist__9603) {
          var a = cljs.core.first(arglist__9603);
          arglist__9603 = cljs.core.next(arglist__9603);
          var b = cljs.core.first(arglist__9603);
          arglist__9603 = cljs.core.next(arglist__9603);
          var c = cljs.core.first(arglist__9603);
          var ds = cljs.core.rest(arglist__9603);
          return G__9602__delegate(a, b, c, ds);
        };
        G__9602.cljs$core$IFn$_invoke$arity$variadic = G__9602__delegate;
        return G__9602;
      }();
      G__9601 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__9601__2.call(this, a, b);
          case 3:
            return G__9601__3.call(this, a, b, c);
          default:
            return G__9601__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9601.cljs$lang$maxFixedArity = 3;
      G__9601.cljs$lang$applyTo = G__9601__4.cljs$lang$applyTo;
      return G__9601;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4433__auto___9604 = size;
          var i_9605 = 0;
          while (true) {
            if (i_9605 < n__4433__auto___9604) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_9605, cljs.core._nth.call(null, c, i_9605)));
              var G__9606 = i_9605 + 1;
              i_9605 = G__9606;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4433__auto___9607 = size;
        var i_9608 = 0;
        while (true) {
          if (i_9608 < n__4433__auto___9607) {
            var x_9609 = f.call(null, cljs.core._nth.call(null, c, i_9608));
            if (x_9609 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_9609);
            }
            var G__9610 = i_9608 + 1;
            i_9608 = G__9610;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4433__auto___9611 = size;
          var i_9612 = 0;
          while (true) {
            if (i_9612 < n__4433__auto___9611) {
              var x_9613 = f.call(null, idx + i_9612, cljs.core._nth.call(null, c, i_9612));
              if (x_9613 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_9613);
              }
              var G__9614 = i_9612 + 1;
              i_9612 = G__9614;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            return p.call(null, y);
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__9621__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__9621 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9621__delegate.call(this, x, y, z, args);
        };
        G__9621.cljs$lang$maxFixedArity = 3;
        G__9621.cljs$lang$applyTo = function(arglist__9622) {
          var x = cljs.core.first(arglist__9622);
          arglist__9622 = cljs.core.next(arglist__9622);
          var y = cljs.core.first(arglist__9622);
          arglist__9622 = cljs.core.next(arglist__9622);
          var z = cljs.core.first(arglist__9622);
          var args = cljs.core.rest(arglist__9622);
          return G__9621__delegate(x, y, z, args);
        };
        G__9621.cljs$core$IFn$_invoke$arity$variadic = G__9621__delegate;
        return G__9621;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              var and__3565__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3565__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3565__auto____$2;
              }
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              var and__3565__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3565__auto____$2)) {
                var and__3565__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3565__auto____$3)) {
                  var and__3565__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3565__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3565__auto____$4;
                  }
                } else {
                  return and__3565__auto____$3;
                }
              } else {
                return and__3565__auto____$2;
              }
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__9623__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__9615_SHARP_) {
            var and__3565__auto__ = p1.call(null, p1__9615_SHARP_);
            if (cljs.core.truth_(and__3565__auto__)) {
              return p2.call(null, p1__9615_SHARP_);
            } else {
              return and__3565__auto__;
            }
          }, args));
        };
        var G__9623 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9623__delegate.call(this, x, y, z, args);
        };
        G__9623.cljs$lang$maxFixedArity = 3;
        G__9623.cljs$lang$applyTo = function(arglist__9624) {
          var x = cljs.core.first(arglist__9624);
          arglist__9624 = cljs.core.next(arglist__9624);
          var y = cljs.core.first(arglist__9624);
          arglist__9624 = cljs.core.next(arglist__9624);
          var z = cljs.core.first(arglist__9624);
          var args = cljs.core.rest(arglist__9624);
          return G__9623__delegate(x, y, z, args);
        };
        G__9623.cljs$core$IFn$_invoke$arity$variadic = G__9623__delegate;
        return G__9623;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              var and__3565__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3565__auto____$2)) {
                var and__3565__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3565__auto____$3)) {
                  var and__3565__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3565__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3565__auto____$4;
                  }
                } else {
                  return and__3565__auto____$3;
                }
              } else {
                return and__3565__auto____$2;
              }
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              var and__3565__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3565__auto____$2)) {
                var and__3565__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3565__auto____$3)) {
                  var and__3565__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3565__auto____$4)) {
                    var and__3565__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3565__auto____$5)) {
                      var and__3565__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3565__auto____$6)) {
                        var and__3565__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3565__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3565__auto____$7;
                        }
                      } else {
                        return and__3565__auto____$6;
                      }
                    } else {
                      return and__3565__auto____$5;
                    }
                  } else {
                    return and__3565__auto____$4;
                  }
                } else {
                  return and__3565__auto____$3;
                }
              } else {
                return and__3565__auto____$2;
              }
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__9625__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__9616_SHARP_) {
            var and__3565__auto__ = p1.call(null, p1__9616_SHARP_);
            if (cljs.core.truth_(and__3565__auto__)) {
              var and__3565__auto____$1 = p2.call(null, p1__9616_SHARP_);
              if (cljs.core.truth_(and__3565__auto____$1)) {
                return p3.call(null, p1__9616_SHARP_);
              } else {
                return and__3565__auto____$1;
              }
            } else {
              return and__3565__auto__;
            }
          }, args));
        };
        var G__9625 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9625__delegate.call(this, x, y, z, args);
        };
        G__9625.cljs$lang$maxFixedArity = 3;
        G__9625.cljs$lang$applyTo = function(arglist__9626) {
          var x = cljs.core.first(arglist__9626);
          arglist__9626 = cljs.core.next(arglist__9626);
          var y = cljs.core.first(arglist__9626);
          arglist__9626 = cljs.core.next(arglist__9626);
          var z = cljs.core.first(arglist__9626);
          var args = cljs.core.rest(arglist__9626);
          return G__9625__delegate(x, y, z, args);
        };
        G__9625.cljs$core$IFn$_invoke$arity$variadic = G__9625__delegate;
        return G__9625;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__9627__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__9617_SHARP_) {
                return p1__9617_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__9618_SHARP_) {
                var and__3565__auto__ = p1__9618_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3565__auto__)) {
                  return p1__9618_SHARP_.call(null, y);
                } else {
                  return and__3565__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__9619_SHARP_) {
                var and__3565__auto__ = p1__9619_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3565__auto__)) {
                  var and__3565__auto____$1 = p1__9619_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3565__auto____$1)) {
                    return p1__9619_SHARP_.call(null, z);
                  } else {
                    return and__3565__auto____$1;
                  }
                } else {
                  return and__3565__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__9628__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__9620_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__9620_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__9628 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__9628__delegate.call(this, x, y, z, args);
            };
            G__9628.cljs$lang$maxFixedArity = 3;
            G__9628.cljs$lang$applyTo = function(arglist__9629) {
              var x = cljs.core.first(arglist__9629);
              arglist__9629 = cljs.core.next(arglist__9629);
              var y = cljs.core.first(arglist__9629);
              arglist__9629 = cljs.core.next(arglist__9629);
              var z = cljs.core.first(arglist__9629);
              var args = cljs.core.rest(arglist__9629);
              return G__9628__delegate(x, y, z, args);
            };
            G__9628.cljs$core$IFn$_invoke$arity$variadic = G__9628__delegate;
            return G__9628;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__9627 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9627__delegate.call(this, p1, p2, p3, ps);
    };
    G__9627.cljs$lang$maxFixedArity = 3;
    G__9627.cljs$lang$applyTo = function(arglist__9630) {
      var p1 = cljs.core.first(arglist__9630);
      arglist__9630 = cljs.core.next(arglist__9630);
      var p2 = cljs.core.first(arglist__9630);
      arglist__9630 = cljs.core.next(arglist__9630);
      var p3 = cljs.core.first(arglist__9630);
      var ps = cljs.core.rest(arglist__9630);
      return G__9627__delegate(p1, p2, p3, ps);
    };
    G__9627.cljs$core$IFn$_invoke$arity$variadic = G__9627__delegate;
    return G__9627;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3577__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3577__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__9637__delegate = function(x, y, z, args) {
          var or__3577__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__9637 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9637__delegate.call(this, x, y, z, args);
        };
        G__9637.cljs$lang$maxFixedArity = 3;
        G__9637.cljs$lang$applyTo = function(arglist__9638) {
          var x = cljs.core.first(arglist__9638);
          arglist__9638 = cljs.core.next(arglist__9638);
          var y = cljs.core.first(arglist__9638);
          arglist__9638 = cljs.core.next(arglist__9638);
          var z = cljs.core.first(arglist__9638);
          var args = cljs.core.rest(arglist__9638);
          return G__9637__delegate(x, y, z, args);
        };
        G__9637.cljs$core$IFn$_invoke$arity$variadic = G__9637__delegate;
        return G__9637;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            var or__3577__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3577__auto____$2)) {
              return or__3577__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            var or__3577__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3577__auto____$2)) {
              return or__3577__auto____$2;
            } else {
              var or__3577__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3577__auto____$3)) {
                return or__3577__auto____$3;
              } else {
                var or__3577__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3577__auto____$4)) {
                  return or__3577__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__9639__delegate = function(x, y, z, args) {
          var or__3577__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3577__auto__) {
              return function(p1__9631_SHARP_) {
                var or__3577__auto____$1 = p1.call(null, p1__9631_SHARP_);
                if (cljs.core.truth_(or__3577__auto____$1)) {
                  return or__3577__auto____$1;
                } else {
                  return p2.call(null, p1__9631_SHARP_);
                }
              };
            }(or__3577__auto__), args);
          }
        };
        var G__9639 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9639__delegate.call(this, x, y, z, args);
        };
        G__9639.cljs$lang$maxFixedArity = 3;
        G__9639.cljs$lang$applyTo = function(arglist__9640) {
          var x = cljs.core.first(arglist__9640);
          arglist__9640 = cljs.core.next(arglist__9640);
          var y = cljs.core.first(arglist__9640);
          arglist__9640 = cljs.core.next(arglist__9640);
          var z = cljs.core.first(arglist__9640);
          var args = cljs.core.rest(arglist__9640);
          return G__9639__delegate(x, y, z, args);
        };
        G__9639.cljs$core$IFn$_invoke$arity$variadic = G__9639__delegate;
        return G__9639;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            var or__3577__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3577__auto____$2)) {
              return or__3577__auto____$2;
            } else {
              var or__3577__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3577__auto____$3)) {
                return or__3577__auto____$3;
              } else {
                var or__3577__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3577__auto____$4)) {
                  return or__3577__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            var or__3577__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3577__auto____$2)) {
              return or__3577__auto____$2;
            } else {
              var or__3577__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3577__auto____$3)) {
                return or__3577__auto____$3;
              } else {
                var or__3577__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3577__auto____$4)) {
                  return or__3577__auto____$4;
                } else {
                  var or__3577__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3577__auto____$5)) {
                    return or__3577__auto____$5;
                  } else {
                    var or__3577__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3577__auto____$6)) {
                      return or__3577__auto____$6;
                    } else {
                      var or__3577__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3577__auto____$7)) {
                        return or__3577__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__9641__delegate = function(x, y, z, args) {
          var or__3577__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3577__auto__) {
              return function(p1__9632_SHARP_) {
                var or__3577__auto____$1 = p1.call(null, p1__9632_SHARP_);
                if (cljs.core.truth_(or__3577__auto____$1)) {
                  return or__3577__auto____$1;
                } else {
                  var or__3577__auto____$2 = p2.call(null, p1__9632_SHARP_);
                  if (cljs.core.truth_(or__3577__auto____$2)) {
                    return or__3577__auto____$2;
                  } else {
                    return p3.call(null, p1__9632_SHARP_);
                  }
                }
              };
            }(or__3577__auto__), args);
          }
        };
        var G__9641 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9641__delegate.call(this, x, y, z, args);
        };
        G__9641.cljs$lang$maxFixedArity = 3;
        G__9641.cljs$lang$applyTo = function(arglist__9642) {
          var x = cljs.core.first(arglist__9642);
          arglist__9642 = cljs.core.next(arglist__9642);
          var y = cljs.core.first(arglist__9642);
          arglist__9642 = cljs.core.next(arglist__9642);
          var z = cljs.core.first(arglist__9642);
          var args = cljs.core.rest(arglist__9642);
          return G__9641__delegate(x, y, z, args);
        };
        G__9641.cljs$core$IFn$_invoke$arity$variadic = G__9641__delegate;
        return G__9641;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__9643__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__9633_SHARP_) {
                return p1__9633_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__9634_SHARP_) {
                var or__3577__auto__ = p1__9634_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3577__auto__)) {
                  return or__3577__auto__;
                } else {
                  return p1__9634_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__9635_SHARP_) {
                var or__3577__auto__ = p1__9635_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3577__auto__)) {
                  return or__3577__auto__;
                } else {
                  var or__3577__auto____$1 = p1__9635_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3577__auto____$1)) {
                    return or__3577__auto____$1;
                  } else {
                    return p1__9635_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__9644__delegate = function(x, y, z, args) {
              var or__3577__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3577__auto__)) {
                return or__3577__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3577__auto__, ps__$1) {
                  return function(p1__9636_SHARP_) {
                    return cljs.core.some.call(null, p1__9636_SHARP_, args);
                  };
                }(or__3577__auto__, ps__$1), ps__$1);
              }
            };
            var G__9644 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__9644__delegate.call(this, x, y, z, args);
            };
            G__9644.cljs$lang$maxFixedArity = 3;
            G__9644.cljs$lang$applyTo = function(arglist__9645) {
              var x = cljs.core.first(arglist__9645);
              arglist__9645 = cljs.core.next(arglist__9645);
              var y = cljs.core.first(arglist__9645);
              arglist__9645 = cljs.core.next(arglist__9645);
              var z = cljs.core.first(arglist__9645);
              var args = cljs.core.rest(arglist__9645);
              return G__9644__delegate(x, y, z, args);
            };
            G__9644.cljs$core$IFn$_invoke$arity$variadic = G__9644__delegate;
            return G__9644;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__9643 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9643__delegate.call(this, p1, p2, p3, ps);
    };
    G__9643.cljs$lang$maxFixedArity = 3;
    G__9643.cljs$lang$applyTo = function(arglist__9646) {
      var p1 = cljs.core.first(arglist__9646);
      arglist__9646 = cljs.core.next(arglist__9646);
      var p2 = cljs.core.first(arglist__9646);
      arglist__9646 = cljs.core.next(arglist__9646);
      var p3 = cljs.core.first(arglist__9646);
      var ps = cljs.core.rest(arglist__9646);
      return G__9643__delegate(p1, p2, p3, ps);
    };
    G__9643.cljs$core$IFn$_invoke$arity$variadic = G__9643__delegate;
    return G__9643;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4433__auto___9648 = size;
          var i_9649 = 0;
          while (true) {
            if (i_9649 < n__4433__auto___9648) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_9649)));
              var G__9650 = i_9649 + 1;
              i_9649 = G__9650;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__9651__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__9647_SHARP_) {
          return cljs.core.apply.call(null, f, p1__9647_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__9651 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9651__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9651.cljs$lang$maxFixedArity = 4;
    G__9651.cljs$lang$applyTo = function(arglist__9652) {
      var f = cljs.core.first(arglist__9652);
      arglist__9652 = cljs.core.next(arglist__9652);
      var c1 = cljs.core.first(arglist__9652);
      arglist__9652 = cljs.core.next(arglist__9652);
      var c2 = cljs.core.first(arglist__9652);
      arglist__9652 = cljs.core.next(arglist__9652);
      var c3 = cljs.core.first(arglist__9652);
      var colls = cljs.core.rest(arglist__9652);
      return G__9651__delegate(f, c1, c2, c3, colls);
    };
    G__9651.cljs$core$IFn$_invoke$arity$variadic = G__9651__delegate;
    return G__9651;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__9653 = n__$1 - 1;
        var G__9654 = cljs.core.rest.call(null, s);
        n__$1 = G__9653;
        coll__$1 = G__9654;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, n, coll);
    };
  }(step), null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__9655 = cljs.core.next.call(null, s);
      var G__9656 = cljs.core.next.call(null, lead);
      s = G__9655;
      lead = G__9656;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3565__auto__ = s;
        if (and__3565__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3565__auto__;
        }
      }())) {
        var G__9657 = pred__$1;
        var G__9658 = cljs.core.rest.call(null, s);
        pred__$1 = G__9657;
        coll__$1 = G__9658;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, pred, coll);
    };
  }(step), null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__9659__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__9659 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9659__delegate.call(this, c1, c2, colls);
    };
    G__9659.cljs$lang$maxFixedArity = 2;
    G__9659.cljs$lang$applyTo = function(arglist__9660) {
      var c1 = cljs.core.first(arglist__9660);
      arglist__9660 = cljs.core.next(arglist__9660);
      var c2 = cljs.core.first(arglist__9660);
      var colls = cljs.core.rest(arglist__9660);
      return G__9659__delegate(c1, c2, colls);
    };
    G__9659.cljs$core$IFn$_invoke$arity$variadic = G__9659__delegate;
    return G__9659;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__9661__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__9661 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9661__delegate.call(this, f, coll, colls);
    };
    G__9661.cljs$lang$maxFixedArity = 2;
    G__9661.cljs$lang$applyTo = function(arglist__9662) {
      var f = cljs.core.first(arglist__9662);
      arglist__9662 = cljs.core.next(arglist__9662);
      var coll = cljs.core.first(arglist__9662);
      var colls = cljs.core.rest(arglist__9662);
      return G__9661__delegate(f, coll, colls);
    };
    G__9661.cljs$core$IFn$_invoke$arity$variadic = G__9661__delegate;
    return G__9661;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4433__auto___9663 = size;
        var i_9664 = 0;
        while (true) {
          if (i_9664 < n__4433__auto___9663) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_9664)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_9664));
            } else {
            }
            var G__9665 = i_9664 + 1;
            i_9664 = G__9665;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__9666_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__9666_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__9668 = to;
      if (G__9668) {
        var bit__4220__auto__ = G__9668.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4220__auto__ || G__9668.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__9669__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__9669 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9669__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9669.cljs$lang$maxFixedArity = 4;
    G__9669.cljs$lang$applyTo = function(arglist__9670) {
      var f = cljs.core.first(arglist__9670);
      arglist__9670 = cljs.core.next(arglist__9670);
      var c1 = cljs.core.first(arglist__9670);
      arglist__9670 = cljs.core.next(arglist__9670);
      var c2 = cljs.core.first(arglist__9670);
      arglist__9670 = cljs.core.next(arglist__9670);
      var c3 = cljs.core.first(arglist__9670);
      var colls = cljs.core.rest(arglist__9670);
      return G__9669__delegate(f, c1, c2, c3, colls);
    };
    G__9669.cljs$core$IFn$_invoke$arity$variadic = G__9669__delegate;
    return G__9669;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__9672 = m__$1;
          if (G__9672) {
            var bit__4227__auto__ = G__9672.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4227__auto__ || G__9672.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__9672.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__9672);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__9672);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__9673 = sentinel;
            var G__9674 = m__$2;
            var G__9675 = cljs.core.next.call(null, ks__$1);
            sentinel = G__9673;
            m__$1 = G__9674;
            ks__$1 = G__9675;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__9676, v) {
  var vec__9678 = p__9676;
  var k = cljs.core.nth.call(null, vec__9678, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__9678, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__9679, f) {
    var vec__9689 = p__9679;
    var k = cljs.core.nth.call(null, vec__9689, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9689, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__9680, f, a) {
    var vec__9690 = p__9680;
    var k = cljs.core.nth.call(null, vec__9690, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9690, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__9681, f, a, b) {
    var vec__9691 = p__9681;
    var k = cljs.core.nth.call(null, vec__9691, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9691, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__9682, f, a, b, c) {
    var vec__9692 = p__9682;
    var k = cljs.core.nth.call(null, vec__9692, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9692, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__9694__delegate = function(m, p__9683, f, a, b, c, args) {
      var vec__9693 = p__9683;
      var k = cljs.core.nth.call(null, vec__9693, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__9693, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__9694 = function(m, p__9683, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__9694__delegate.call(this, m, p__9683, f, a, b, c, args);
    };
    G__9694.cljs$lang$maxFixedArity = 6;
    G__9694.cljs$lang$applyTo = function(arglist__9695) {
      var m = cljs.core.first(arglist__9695);
      arglist__9695 = cljs.core.next(arglist__9695);
      var p__9683 = cljs.core.first(arglist__9695);
      arglist__9695 = cljs.core.next(arglist__9695);
      var f = cljs.core.first(arglist__9695);
      arglist__9695 = cljs.core.next(arglist__9695);
      var a = cljs.core.first(arglist__9695);
      arglist__9695 = cljs.core.next(arglist__9695);
      var b = cljs.core.first(arglist__9695);
      arglist__9695 = cljs.core.next(arglist__9695);
      var c = cljs.core.first(arglist__9695);
      var args = cljs.core.rest(arglist__9695);
      return G__9694__delegate(m, p__9683, f, a, b, c, args);
    };
    G__9694.cljs$core$IFn$_invoke$arity$variadic = G__9694__delegate;
    return G__9694;
  }();
  update_in = function(m, p__9683, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__9683, f);
      case 4:
        return update_in__4.call(this, m, p__9683, f, a);
      case 5:
        return update_in__5.call(this, m, p__9683, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__9683, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__9683, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4147__auto__, writer__4148__auto__, opts__4149__auto__) {
  return cljs.core._write.call(null, writer__4148__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__9696 = ll - 5;
      var G__9697 = r;
      ll = G__9696;
      ret = G__9697;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__9698 = cljs.core.pv_aget.call(null, node, 0);
      var G__9699 = level - 5;
      node = G__9698;
      level = G__9699;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__9700 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__9701 = level - 5;
        node = G__9700;
        level = G__9701;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__9703 = j + 1;
              var G__9704 = init__$2;
              j = G__9703;
              init__$1 = G__9704;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__9705 = i + step_init[0];
        i = G__9705;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4433__auto___9706 = len;
    var i_9707 = 0;
    while (true) {
      if (i_9707 < n__4433__auto___9706) {
        new_tail[i_9707] = self__.tail[i_9707];
        var G__9708 = i_9707 + 1;
        i_9707 = G__9708;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__9709 = null;
  var G__9709__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9709__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9709 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9709__2.call(this, self__, k);
      case 3:
        return G__9709__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9709;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9702) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9702)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__9710 = i + 1;
        var G__9711 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__9710;
        out = G__9711;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__9712) {
    var args = cljs.core.seq(arglist__9712);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3884__auto__ = self__.end;
    var y__3885__auto__ = v_pos + 1;
    return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__9714 = null;
  var G__9714__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9714__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9714 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9714__2.call(this, self__, k);
      case 3:
        return G__9714__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9714;
}();
cljs.core.Subvec.prototype.apply = function(self__, args9713) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9713)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__9715 = meta;
      var G__9716 = v.v;
      var G__9717 = v.start + start;
      var G__9718 = v.start + end;
      var G__9719 = __hash;
      meta = G__9715;
      v = G__9716;
      start = G__9717;
      end = G__9718;
      __hash = G__9719;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj9723 = {};
    return obj9723;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__9724 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__9725 = level - 5;
        node = G__9724;
        level = G__9725;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__9727 = null;
  var G__9727__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9727__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9727 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9727__2.call(this, self__, k);
      case 3:
        return G__9727__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9727;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args9726) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9726)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3577__auto__ = self__.front;
    if (cljs.core.truth_(or__3577__auto__)) {
      return or__3577__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3577__auto__ = self__.rear;
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__9728 = i + incr;
        i = G__9728;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__9729 = i + 1;
      var G__9730 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__9729;
      out = G__9730;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj9734 = {};
    return obj9734;
  }();
  var l = ks.length;
  var i_9735 = 0;
  while (true) {
    if (i_9735 < l) {
      var k_9736 = ks[i_9735];
      new_obj[k_9736] = obj[k_9736];
      var G__9737 = i_9735 + 1;
      i_9735 = G__9737;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__9740 = cljs.core.rest.call(null, keys__$1);
        var G__9741 = init__$2;
        keys__$1 = G__9740;
        init__$1 = G__9741;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__9738_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9738_SHARP_, self__.strobj[p1__9738_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__9742 = null;
  var G__9742__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9742__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9742 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9742__2.call(this, self__, k);
      case 3:
        return G__9742__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9742;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args9739) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9739)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj9744 = {};
  return obj9744;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9745 = i + 2;
          i = G__9745;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9746 = i + 2;
          i = G__9746;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9747 = i + 2;
          i = G__9747;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9748 = i + 2;
          i = G__9748;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__9749 = i + 2;
          i = G__9749;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_9750 = 0;
  while (true) {
    if (i_9750 < l) {
      narr[i_9750] = arr[i_9750];
      var G__9751 = i_9750 + 1;
      i_9750 = G__9751;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__9756 = i + 2;
        var G__9757 = init__$2;
        i = G__9756;
        init__$1 = G__9757;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj9754 = {};
    return obj9754;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__9758 = s + 2;
            var G__9759 = d;
            s = G__9758;
            d = G__9759;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__9760 = s + 2;
              var G__9761 = d + 2;
              s = G__9760;
              d = G__9761;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__9755 = cljs.core.aclone.call(null, self__.arr);
          G__9755[idx + 1] = v;
          return G__9755;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__9762 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__9763 = cljs.core.next.call(null, es);
          ret = G__9762;
          es = G__9763;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__9764 = null;
  var G__9764__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9764__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9764 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9764__2.call(this, self__, k);
      case 3:
        return G__9764__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9764;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args9752) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9752)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9765 = i + 2;
        var G__9766 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__9765;
        ret = G__9766;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__9767_9769 = self__.arr;
      G__9767_9769.pop();
      G__9767_9769.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__9768 = o;
      if (G__9768) {
        var bit__4227__auto__ = G__9768.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4227__auto__ || G__9768.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9768.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9768);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9768);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__9770 = cljs.core.next.call(null, es);
          var G__9771 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__9770;
          tcoll__$2 = G__9771;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__9772 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__9773 = i + 2;
      out = G__9772;
      i = G__9773;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4147__auto__, writer__4148__auto__, opts__4149__auto__) {
  return cljs.core._write.call(null, writer__4148__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__9776 = cljs.core.aclone.call(null, arr);
    G__9776[i] = a;
    return G__9776;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__9777 = cljs.core.aclone.call(null, arr);
    G__9777[i] = a;
    G__9777[j] = b;
    return G__9777;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__9778 = i + 2;
        var G__9779 = init__$2;
        i = G__9778;
        init__$1 = G__9779;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_9780 = 0;
        var j_9781 = 0;
        while (true) {
          if (i_9780 < 32) {
            if ((self__.bitmap >>> i_9780 & 1) === 0) {
              var G__9782 = i_9780 + 1;
              var G__9783 = j_9781;
              i_9780 = G__9782;
              j_9781 = G__9783;
              continue;
            } else {
              nodes[i_9780] = !(self__.arr[j_9781] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_9781]), self__.arr[j_9781], self__.arr[j_9781 + 1], added_leaf_QMARK_) : self__.arr[j_9781 + 1];
              var G__9784 = i_9780 + 1;
              var G__9785 = j_9781 + 2;
              i_9780 = G__9784;
              j_9781 = G__9785;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_9786 = 0;
      var j_9787 = 0;
      while (true) {
        if (i_9786 < 32) {
          if ((self__.bitmap >>> i_9786 & 1) === 0) {
            var G__9788 = i_9786 + 1;
            var G__9789 = j_9787;
            i_9786 = G__9788;
            j_9787 = G__9789;
            continue;
          } else {
            nodes[i_9786] = !(self__.arr[j_9787] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_9787]), self__.arr[j_9787], self__.arr[j_9787 + 1], added_leaf_QMARK_) : self__.arr[j_9787 + 1];
            var G__9790 = i_9786 + 1;
            var G__9791 = j_9787 + 2;
            i_9786 = G__9790;
            j_9787 = G__9791;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__9792 = i + 1;
        var G__9793 = j + 2;
        var G__9794 = bitmap | 1 << i;
        i = G__9792;
        j = G__9793;
        bitmap = G__9794;
        continue;
      } else {
        var G__9795 = i + 1;
        var G__9796 = j;
        var G__9797 = bitmap;
        i = G__9795;
        j = G__9796;
        bitmap = G__9797;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__9798 = i + 1;
          var G__9799 = init__$2;
          i = G__9798;
          init__$1 = G__9799;
          continue;
        }
      } else {
        var G__9800 = i + 1;
        var G__9801 = init__$1;
        i = G__9800;
        init__$1 = G__9801;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__9802 = i + 2;
        i = G__9802;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__9803 = j + 2;
                j = G__9803;
                continue;
              }
            } else {
              var G__9804 = j + 2;
              j = G__9804;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__9805 = j + 1;
              j = G__9805;
              continue;
            }
          } else {
            var G__9806 = j + 1;
            j = G__9806;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj9809 = {};
    return obj9809;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__9810 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__9811 = cljs.core.next.call(null, es);
          ret = G__9810;
          es = G__9811;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__9812 = null;
  var G__9812__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9812__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9812 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9812__2.call(this, self__, k);
      case 3:
        return G__9812__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9812;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args9807) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9807)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9813 = i + 1;
      var G__9814 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__9813;
      out = G__9814;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__9815 = o;
      if (G__9815) {
        var bit__4227__auto__ = G__9815.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4227__auto__ || G__9815.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9815.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9815);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9815);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__9816 = cljs.core.next.call(null, es);
          var G__9817 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__9816;
          tcoll__$1 = G__9817;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__9818 = ascending_QMARK_ ? t.left : t.right;
      var G__9819 = cljs.core.conj.call(null, stack__$1, t);
      t = G__9818;
      stack__$1 = G__9819;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__9821 = null;
  var G__9821__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9821__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9821 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9821__2.call(this, self__, k);
      case 3:
        return G__9821__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9821;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args9820) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9820)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__9823 = null;
  var G__9823__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9823__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9823 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9823__2.call(this, self__, k);
      case 3:
        return G__9823__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9823;
}();
cljs.core.RedNode.prototype.apply = function(self__, args9822) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9822)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__9825 = t.left;
          t = G__9825;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__9826 = t.right;
            t = G__9826;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__9827 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__9828 = cljs.core.next.call(null, es);
          ret = G__9827;
          es = G__9828;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__9829 = null;
  var G__9829__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9829__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9829 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9829__2.call(this, self__, k);
      case 3:
        return G__9829__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9829;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args9824) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9824)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__9830 = cljs.core.conj.call(null, stack, t);
              var G__9831 = t.left;
              stack = G__9830;
              t = G__9831;
              continue;
            } else {
              var G__9832 = stack;
              var G__9833 = t.right;
              stack = G__9832;
              t = G__9833;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__9834 = cljs.core.conj.call(null, stack, t);
                var G__9835 = t.right;
                stack = G__9834;
                t = G__9835;
                continue;
              } else {
                var G__9836 = stack;
                var G__9837 = t.left;
                stack = G__9836;
                t = G__9837;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__9838 = cljs.core.nnext.call(null, in$);
        var G__9839 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__9838;
        out = G__9839;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__9840) {
    var keyvals = cljs.core.seq(arglist__9840);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__9841) {
    var keyvals = cljs.core.seq(arglist__9841);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj9845 = {};
      return obj9845;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__9846 = cljs.core.nnext.call(null, kvs);
        kvs = G__9846;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__9847) {
    var keyvals = cljs.core.seq(arglist__9847);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__9848 = cljs.core.nnext.call(null, in$);
        var G__9849 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__9848;
        out = G__9849;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__9850) {
    var keyvals = cljs.core.seq(arglist__9850);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__9851 = cljs.core.nnext.call(null, in$);
        var G__9852 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__9851;
        out = G__9852;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__9853) {
    var comparator = cljs.core.first(arglist__9853);
    var keyvals = cljs.core.rest(arglist__9853);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9854 = self__.mseq;
    if (G__9854) {
      var bit__4227__auto__ = G__9854.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4227__auto__ || G__9854.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9854.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9854);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9854);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9855 = self__.mseq;
    if (G__9855) {
      var bit__4227__auto__ = G__9855.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4227__auto__ || G__9855.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9855.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9855);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9855);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9856 = self__.mseq;
    if (G__9856) {
      var bit__4227__auto__ = G__9856.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4227__auto__ || G__9856.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9856.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9856);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9856);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9857 = self__.mseq;
    if (G__9857) {
      var bit__4227__auto__ = G__9857.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4227__auto__ || G__9857.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9857.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9857);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9857);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__9858_SHARP_, p2__9859_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3577__auto__ = p1__9858_SHARP_;
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__9859_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__9860) {
    var maps = cljs.core.seq(arglist__9860);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3577__auto__ = m1;
            if (cljs.core.truth_(or__3577__auto__)) {
              return or__3577__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__9861) {
    var f = cljs.core.first(arglist__9861);
    var maps = cljs.core.rest(arglist__9861);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__9862 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__9863 = cljs.core.next.call(null, keys);
      ret = G__9862;
      keys = G__9863;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__9864_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__9864_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__9866 = null;
  var G__9866__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9866__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9866 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9866__2.call(this, self__, k);
      case 3:
        return G__9866__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9866;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args9865) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9865)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9867 = i + 1;
        var G__9868 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__9867;
        out = G__9868;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__9869 = i + 1;
        var G__9870 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__9869;
        out = G__9870;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__9872 = null;
  var G__9872__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__9872__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__9872 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9872__2.call(this, self__, k);
      case 3:
        return G__9872__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9872;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args9871) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9871)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__9873_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__9873_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__9875 = null;
  var G__9875__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9875__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9875 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9875__2.call(this, self__, k);
      case 3:
        return G__9875__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9875;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args9874) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9874)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4427__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4427__auto__.length) {
        var G__9876 = i + 1;
        var G__9877 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__9876;
        res = G__9877;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__9878 = cljs.core._next.call(null, in$__$1);
            var G__9879 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__9878;
            out = G__9879;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__9880__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__9880 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9880__delegate.call(this, keys);
    };
    G__9880.cljs$lang$maxFixedArity = 0;
    G__9880.cljs$lang$applyTo = function(arglist__9881) {
      var keys = cljs.core.seq(arglist__9881);
      return G__9880__delegate(keys);
    };
    G__9880.cljs$core$IFn$_invoke$arity$variadic = G__9880__delegate;
    return G__9880;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__9882) {
    var keys = cljs.core.seq(arglist__9882);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__9883) {
    var comparator = cljs.core.first(arglist__9883);
    var keys = cljs.core.rest(arglist__9883);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(n) {
      return function(v, i) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__9884_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__9884_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__9884_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__9891, seen__$1) {
        while (true) {
          var vec__9892 = p__9891;
          var f = cljs.core.nth.call(null, vec__9892, 0, null);
          var xs__$1 = vec__9892;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__9893 = cljs.core.rest.call(null, s);
              var G__9894 = seen__$1;
              p__9891 = G__9893;
              seen__$1 = G__9894;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__9895 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__9896 = cljs.core.next.call(null, s__$1);
      ret = G__9895;
      s__$1 = G__9896;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__9898 = x;
    if (G__9898) {
      var bit__4220__auto__ = G__9898.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4220__auto__ || G__9898.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__9899 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__9900 = cljs.core.next.call(null, ks);
      var G__9901 = cljs.core.next.call(null, vs);
      map = G__9899;
      ks = G__9900;
      vs = G__9901;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__9904__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__9902_SHARP_, p2__9903_SHARP_) {
        return max_key.call(null, k, p1__9902_SHARP_, p2__9903_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__9904 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9904__delegate.call(this, k, x, y, more);
    };
    G__9904.cljs$lang$maxFixedArity = 3;
    G__9904.cljs$lang$applyTo = function(arglist__9905) {
      var k = cljs.core.first(arglist__9905);
      arglist__9905 = cljs.core.next(arglist__9905);
      var x = cljs.core.first(arglist__9905);
      arglist__9905 = cljs.core.next(arglist__9905);
      var y = cljs.core.first(arglist__9905);
      var more = cljs.core.rest(arglist__9905);
      return G__9904__delegate(k, x, y, more);
    };
    G__9904.cljs$core$IFn$_invoke$arity$variadic = G__9904__delegate;
    return G__9904;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__9908__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__9906_SHARP_, p2__9907_SHARP_) {
        return min_key.call(null, k, p1__9906_SHARP_, p2__9907_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__9908 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9908__delegate.call(this, k, x, y, more);
    };
    G__9908.cljs$lang$maxFixedArity = 3;
    G__9908.cljs$lang$applyTo = function(arglist__9909) {
      var k = cljs.core.first(arglist__9909);
      arglist__9909 = cljs.core.next(arglist__9909);
      var x = cljs.core.first(arglist__9909);
      arglist__9909 = cljs.core.next(arglist__9909);
      var y = cljs.core.first(arglist__9909);
      var more = cljs.core.rest(arglist__9909);
      return G__9908__delegate(k, x, y, more);
    };
    G__9908.cljs$core$IFn$_invoke$arity$variadic = G__9908__delegate;
    return G__9908;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__9912 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__9912, 0, null);
        var s = vec__9912;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__9913 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__9913, 0, null);
      var s = vec__9913;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__9916 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__9916, 0, null);
        var s = vec__9916;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__9917 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__9917, 0, null);
      var s = vec__9917;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
        return function(p1__9918_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__9918_SHARP_));
        };
      }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__9929 = null;
      var G__9929__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__9929__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__9929__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__9929__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__9929__4 = function() {
        var G__9930__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__9930 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9930__delegate.call(this, x, y, z, args);
        };
        G__9930.cljs$lang$maxFixedArity = 3;
        G__9930.cljs$lang$applyTo = function(arglist__9931) {
          var x = cljs.core.first(arglist__9931);
          arglist__9931 = cljs.core.next(arglist__9931);
          var y = cljs.core.first(arglist__9931);
          arglist__9931 = cljs.core.next(arglist__9931);
          var z = cljs.core.first(arglist__9931);
          var args = cljs.core.rest(arglist__9931);
          return G__9930__delegate(x, y, z, args);
        };
        G__9930.cljs$core$IFn$_invoke$arity$variadic = G__9930__delegate;
        return G__9930;
      }();
      G__9929 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9929__0.call(this);
          case 1:
            return G__9929__1.call(this, x);
          case 2:
            return G__9929__2.call(this, x, y);
          case 3:
            return G__9929__3.call(this, x, y, z);
          default:
            return G__9929__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9929.cljs$lang$maxFixedArity = 3;
      G__9929.cljs$lang$applyTo = G__9929__4.cljs$lang$applyTo;
      return G__9929;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__9932 = null;
      var G__9932__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__9932__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__9932__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__9932__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__9932__4 = function() {
        var G__9933__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__9933 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9933__delegate.call(this, x, y, z, args);
        };
        G__9933.cljs$lang$maxFixedArity = 3;
        G__9933.cljs$lang$applyTo = function(arglist__9934) {
          var x = cljs.core.first(arglist__9934);
          arglist__9934 = cljs.core.next(arglist__9934);
          var y = cljs.core.first(arglist__9934);
          arglist__9934 = cljs.core.next(arglist__9934);
          var z = cljs.core.first(arglist__9934);
          var args = cljs.core.rest(arglist__9934);
          return G__9933__delegate(x, y, z, args);
        };
        G__9933.cljs$core$IFn$_invoke$arity$variadic = G__9933__delegate;
        return G__9933;
      }();
      G__9932 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9932__0.call(this);
          case 1:
            return G__9932__1.call(this, x);
          case 2:
            return G__9932__2.call(this, x, y);
          case 3:
            return G__9932__3.call(this, x, y, z);
          default:
            return G__9932__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9932.cljs$lang$maxFixedArity = 3;
      G__9932.cljs$lang$applyTo = G__9932__4.cljs$lang$applyTo;
      return G__9932;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__9935 = null;
      var G__9935__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__9935__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__9935__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__9935__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__9935__4 = function() {
        var G__9936__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__9936 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9936__delegate.call(this, x, y, z, args);
        };
        G__9936.cljs$lang$maxFixedArity = 3;
        G__9936.cljs$lang$applyTo = function(arglist__9937) {
          var x = cljs.core.first(arglist__9937);
          arglist__9937 = cljs.core.next(arglist__9937);
          var y = cljs.core.first(arglist__9937);
          arglist__9937 = cljs.core.next(arglist__9937);
          var z = cljs.core.first(arglist__9937);
          var args = cljs.core.rest(arglist__9937);
          return G__9936__delegate(x, y, z, args);
        };
        G__9936.cljs$core$IFn$_invoke$arity$variadic = G__9936__delegate;
        return G__9936;
      }();
      G__9935 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9935__0.call(this);
          case 1:
            return G__9935__1.call(this, x);
          case 2:
            return G__9935__2.call(this, x, y);
          case 3:
            return G__9935__3.call(this, x, y, z);
          default:
            return G__9935__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9935.cljs$lang$maxFixedArity = 3;
      G__9935.cljs$lang$applyTo = G__9935__4.cljs$lang$applyTo;
      return G__9935;
    }();
  };
  var juxt__4 = function() {
    var G__9938__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__9939 = null;
          var G__9939__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__9919_SHARP_, p2__9920_SHARP_) {
                return cljs.core.conj.call(null, p1__9919_SHARP_, p2__9920_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__9939__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__9921_SHARP_, p2__9922_SHARP_) {
                return cljs.core.conj.call(null, p1__9921_SHARP_, p2__9922_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__9939__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__9923_SHARP_, p2__9924_SHARP_) {
                return cljs.core.conj.call(null, p1__9923_SHARP_, p2__9924_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__9939__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__9925_SHARP_, p2__9926_SHARP_) {
                return cljs.core.conj.call(null, p1__9925_SHARP_, p2__9926_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__9939__4 = function() {
            var G__9940__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__9927_SHARP_, p2__9928_SHARP_) {
                  return cljs.core.conj.call(null, p1__9927_SHARP_, cljs.core.apply.call(null, p2__9928_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__9940 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__9940__delegate.call(this, x, y, z, args);
            };
            G__9940.cljs$lang$maxFixedArity = 3;
            G__9940.cljs$lang$applyTo = function(arglist__9941) {
              var x = cljs.core.first(arglist__9941);
              arglist__9941 = cljs.core.next(arglist__9941);
              var y = cljs.core.first(arglist__9941);
              arglist__9941 = cljs.core.next(arglist__9941);
              var z = cljs.core.first(arglist__9941);
              var args = cljs.core.rest(arglist__9941);
              return G__9940__delegate(x, y, z, args);
            };
            G__9940.cljs$core$IFn$_invoke$arity$variadic = G__9940__delegate;
            return G__9940;
          }();
          G__9939 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__9939__0.call(this);
              case 1:
                return G__9939__1.call(this, x);
              case 2:
                return G__9939__2.call(this, x, y);
              case 3:
                return G__9939__3.call(this, x, y, z);
              default:
                return G__9939__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9939.cljs$lang$maxFixedArity = 3;
          G__9939.cljs$lang$applyTo = G__9939__4.cljs$lang$applyTo;
          return G__9939;
        }();
      }(fs__$1);
    };
    var G__9938 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9938__delegate.call(this, f, g, h, fs);
    };
    G__9938.cljs$lang$maxFixedArity = 3;
    G__9938.cljs$lang$applyTo = function(arglist__9942) {
      var f = cljs.core.first(arglist__9942);
      arglist__9942 = cljs.core.next(arglist__9942);
      var g = cljs.core.first(arglist__9942);
      arglist__9942 = cljs.core.next(arglist__9942);
      var h = cljs.core.first(arglist__9942);
      var fs = cljs.core.rest(arglist__9942);
      return G__9938__delegate(f, g, h, fs);
    };
    G__9938.cljs$core$IFn$_invoke$arity$variadic = G__9938__delegate;
    return G__9938;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__9943 = cljs.core.next.call(null, coll);
        coll = G__9943;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__9944 = n - 1;
        var G__9945 = cljs.core.next.call(null, coll);
        n = G__9944;
        coll = G__9945;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__9947 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__9947, 0, null);
  var flags = cljs.core.nth.call(null, vec__9947, 1, null);
  var pattern = cljs.core.nth.call(null, vec__9947, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_9949 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_9950__$1 = cljs.core.next.call(null, coll);
      var n_9951 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_9950__$1 && (n_9951 == null || !(n_9951 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_9950__$1), writer, opts);
          var G__9952 = cljs.core.next.call(null, coll_9950__$1);
          var G__9953 = n_9951 - 1;
          coll_9950__$1 = G__9952;
          n_9951 = G__9953;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_9950__$1) && n_9951 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_9949;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__9958 = cljs.core.seq.call(null, ss);
    var chunk__9959 = null;
    var count__9960 = 0;
    var i__9961 = 0;
    while (true) {
      if (i__9961 < count__9960) {
        var s = cljs.core._nth.call(null, chunk__9959, i__9961);
        cljs.core._write.call(null, writer, s);
        var G__9962 = seq__9958;
        var G__9963 = chunk__9959;
        var G__9964 = count__9960;
        var G__9965 = i__9961 + 1;
        seq__9958 = G__9962;
        chunk__9959 = G__9963;
        count__9960 = G__9964;
        i__9961 = G__9965;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__9958);
        if (temp__4126__auto__) {
          var seq__9958__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9958__$1)) {
            var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__9958__$1);
            var G__9966 = cljs.core.chunk_rest.call(null, seq__9958__$1);
            var G__9967 = c__4333__auto__;
            var G__9968 = cljs.core.count.call(null, c__4333__auto__);
            var G__9969 = 0;
            seq__9958 = G__9966;
            chunk__9959 = G__9967;
            count__9960 = G__9968;
            i__9961 = G__9969;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__9958__$1);
            cljs.core._write.call(null, writer, s);
            var G__9970 = cljs.core.next.call(null, seq__9958__$1);
            var G__9971 = null;
            var G__9972 = 0;
            var G__9973 = 0;
            seq__9958 = G__9970;
            chunk__9959 = G__9971;
            count__9960 = G__9972;
            i__9961 = G__9973;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__9974) {
    var writer = cljs.core.first(arglist__9974);
    var ss = cljs.core.rest(arglist__9974);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj9976 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj9976;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3565__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = function() {
              var G__9982 = obj;
              if (G__9982) {
                var bit__4227__auto__ = G__9982.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4227__auto__ || G__9982.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__9982.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9982);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9982);
              }
            }();
            if (and__3565__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__9983 = obj;
              if (G__9983) {
                var bit__4220__auto__ = G__9983.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4220__auto__ || G__9983.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__9985 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                                ns = G__9985;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__9984 = obj;
                              if (G__9984) {
                                var bit__4227__auto__ = G__9984.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4227__auto__ || G__9984.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__9984.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__9984);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__9984);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__9990 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__9991 = null;
  var count__9992 = 0;
  var i__9993 = 0;
  while (true) {
    if (i__9993 < count__9992) {
      var obj = cljs.core._nth.call(null, chunk__9991, i__9993);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__9994 = seq__9990;
      var G__9995 = chunk__9991;
      var G__9996 = count__9992;
      var G__9997 = i__9993 + 1;
      seq__9990 = G__9994;
      chunk__9991 = G__9995;
      count__9992 = G__9996;
      i__9993 = G__9997;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__9990);
      if (temp__4126__auto__) {
        var seq__9990__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9990__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__9990__$1);
          var G__9998 = cljs.core.chunk_rest.call(null, seq__9990__$1);
          var G__9999 = c__4333__auto__;
          var G__10000 = cljs.core.count.call(null, c__4333__auto__);
          var G__10001 = 0;
          seq__9990 = G__9998;
          chunk__9991 = G__9999;
          count__9992 = G__10000;
          i__9993 = G__10001;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__9990__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__10002 = cljs.core.next.call(null, seq__9990__$1);
          var G__10003 = null;
          var G__10004 = 0;
          var G__10005 = 0;
          seq__9990 = G__10002;
          chunk__9991 = G__10003;
          count__9992 = G__10004;
          i__9993 = G__10005;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__10006) {
    var objs = cljs.core.seq(arglist__10006);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__10007) {
    var objs = cljs.core.seq(arglist__10007);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__10008) {
    var objs = cljs.core.seq(arglist__10008);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__10009) {
    var objs = cljs.core.seq(arglist__10009);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__10010) {
    var objs = cljs.core.seq(arglist__10010);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__10011) {
    var objs = cljs.core.seq(arglist__10011);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__10012) {
    var objs = cljs.core.seq(arglist__10012);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__10013) {
    var objs = cljs.core.seq(arglist__10013);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj10015 = {};
  return obj10015;
}();
cljs.core.IReset = function() {
  var obj10017 = {};
  return obj10017;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj10019 = {};
  return obj10019;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__10020 = cljs.core.seq.call(null, self__.watches);
  var chunk__10021 = null;
  var count__10022 = 0;
  var i__10023 = 0;
  while (true) {
    if (i__10023 < count__10022) {
      var vec__10024 = cljs.core._nth.call(null, chunk__10021, i__10023);
      var key = cljs.core.nth.call(null, vec__10024, 0, null);
      var f = cljs.core.nth.call(null, vec__10024, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__10026 = seq__10020;
      var G__10027 = chunk__10021;
      var G__10028 = count__10022;
      var G__10029 = i__10023 + 1;
      seq__10020 = G__10026;
      chunk__10021 = G__10027;
      count__10022 = G__10028;
      i__10023 = G__10029;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__10020);
      if (temp__4126__auto__) {
        var seq__10020__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10020__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__10020__$1);
          var G__10030 = cljs.core.chunk_rest.call(null, seq__10020__$1);
          var G__10031 = c__4333__auto__;
          var G__10032 = cljs.core.count.call(null, c__4333__auto__);
          var G__10033 = 0;
          seq__10020 = G__10030;
          chunk__10021 = G__10031;
          count__10022 = G__10032;
          i__10023 = G__10033;
          continue;
        } else {
          var vec__10025 = cljs.core.first.call(null, seq__10020__$1);
          var key = cljs.core.nth.call(null, vec__10025, 0, null);
          var f = cljs.core.nth.call(null, vec__10025, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__10034 = cljs.core.next.call(null, seq__10020__$1);
          var G__10035 = null;
          var G__10036 = 0;
          var G__10037 = 0;
          seq__10020 = G__10034;
          chunk__10021 = G__10035;
          count__10022 = G__10036;
          i__10023 = G__10037;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__10041__delegate = function(x, p__10038) {
      var map__10040 = p__10038;
      var map__10040__$1 = cljs.core.seq_QMARK_.call(null, map__10040) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10040) : map__10040;
      var validator = cljs.core.get.call(null, map__10040__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__10040__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__10041 = function(x, var_args) {
      var p__10038 = null;
      if (arguments.length > 1) {
        p__10038 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__10041__delegate.call(this, x, p__10038);
    };
    G__10041.cljs$lang$maxFixedArity = 1;
    G__10041.cljs$lang$applyTo = function(arglist__10042) {
      var x = cljs.core.first(arglist__10042);
      var p__10038 = cljs.core.rest(arglist__10042);
      return G__10041__delegate(x, p__10038);
    };
    G__10041.cljs$core$IFn$_invoke$arity$variadic = G__10041__delegate;
    return G__10041;
  }();
  atom = function(x, var_args) {
    var p__10038 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__10043__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__10043 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__10043__delegate.call(this, a, f, x, y, more);
    };
    G__10043.cljs$lang$maxFixedArity = 4;
    G__10043.cljs$lang$applyTo = function(arglist__10044) {
      var a = cljs.core.first(arglist__10044);
      arglist__10044 = cljs.core.next(arglist__10044);
      var f = cljs.core.first(arglist__10044);
      arglist__10044 = cljs.core.next(arglist__10044);
      var x = cljs.core.first(arglist__10044);
      arglist__10044 = cljs.core.next(arglist__10044);
      var y = cljs.core.first(arglist__10044);
      var more = cljs.core.rest(arglist__10044);
      return G__10043__delegate(a, f, x, y, more);
    };
    G__10043.cljs$core$IFn$_invoke$arity$variadic = G__10043__delegate;
    return G__10043;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__10045) {
    var iref = cljs.core.first(arglist__10045);
    arglist__10045 = cljs.core.next(arglist__10045);
    var f = cljs.core.first(arglist__10045);
    var args = cljs.core.rest(arglist__10045);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(___$1) {
    return function(p__10046) {
      var map__10047 = p__10046;
      var map__10047__$1 = cljs.core.seq_QMARK_.call(null, map__10047) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10047) : map__10047;
      var curr_state = map__10047__$1;
      var done = cljs.core.get.call(null, map__10047__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
      if (cljs.core.truth_(done)) {
        return curr_state;
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
      }
    };
  }(___$1)));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj10049 = {};
  return obj10049;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__10051 = k;
    if (G__10051) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto__ = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return G__10051.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__10051.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__10051);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__10051);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__10065 = x;
      if (G__10065) {
        var bit__4227__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3577__auto__ = bit__4227__auto__;
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return G__10065.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__10065.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__10065);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__10065);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj10067 = {};
              return obj10067;
            }();
            var seq__10068_10078 = cljs.core.seq.call(null, x);
            var chunk__10069_10079 = null;
            var count__10070_10080 = 0;
            var i__10071_10081 = 0;
            while (true) {
              if (i__10071_10081 < count__10070_10080) {
                var vec__10072_10082 = cljs.core._nth.call(null, chunk__10069_10079, i__10071_10081);
                var k_10083 = cljs.core.nth.call(null, vec__10072_10082, 0, null);
                var v_10084 = cljs.core.nth.call(null, vec__10072_10082, 1, null);
                m[cljs.core.key__GT_js.call(null, k_10083)] = clj__GT_js.call(null, v_10084);
                var G__10085 = seq__10068_10078;
                var G__10086 = chunk__10069_10079;
                var G__10087 = count__10070_10080;
                var G__10088 = i__10071_10081 + 1;
                seq__10068_10078 = G__10085;
                chunk__10069_10079 = G__10086;
                count__10070_10080 = G__10087;
                i__10071_10081 = G__10088;
                continue;
              } else {
                var temp__4126__auto___10089 = cljs.core.seq.call(null, seq__10068_10078);
                if (temp__4126__auto___10089) {
                  var seq__10068_10090__$1 = temp__4126__auto___10089;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__10068_10090__$1)) {
                    var c__4333__auto___10091 = cljs.core.chunk_first.call(null, seq__10068_10090__$1);
                    var G__10092 = cljs.core.chunk_rest.call(null, seq__10068_10090__$1);
                    var G__10093 = c__4333__auto___10091;
                    var G__10094 = cljs.core.count.call(null, c__4333__auto___10091);
                    var G__10095 = 0;
                    seq__10068_10078 = G__10092;
                    chunk__10069_10079 = G__10093;
                    count__10070_10080 = G__10094;
                    i__10071_10081 = G__10095;
                    continue;
                  } else {
                    var vec__10073_10096 = cljs.core.first.call(null, seq__10068_10090__$1);
                    var k_10097 = cljs.core.nth.call(null, vec__10073_10096, 0, null);
                    var v_10098 = cljs.core.nth.call(null, vec__10073_10096, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_10097)] = clj__GT_js.call(null, v_10098);
                    var G__10099 = cljs.core.next.call(null, seq__10068_10090__$1);
                    var G__10100 = null;
                    var G__10101 = 0;
                    var G__10102 = 0;
                    seq__10068_10078 = G__10099;
                    chunk__10069_10079 = G__10100;
                    count__10070_10080 = G__10101;
                    i__10071_10081 = G__10102;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__10074_10103 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__10075_10104 = null;
              var count__10076_10105 = 0;
              var i__10077_10106 = 0;
              while (true) {
                if (i__10077_10106 < count__10076_10105) {
                  var x_10107__$1 = cljs.core._nth.call(null, chunk__10075_10104, i__10077_10106);
                  arr.push(x_10107__$1);
                  var G__10108 = seq__10074_10103;
                  var G__10109 = chunk__10075_10104;
                  var G__10110 = count__10076_10105;
                  var G__10111 = i__10077_10106 + 1;
                  seq__10074_10103 = G__10108;
                  chunk__10075_10104 = G__10109;
                  count__10076_10105 = G__10110;
                  i__10077_10106 = G__10111;
                  continue;
                } else {
                  var temp__4126__auto___10112 = cljs.core.seq.call(null, seq__10074_10103);
                  if (temp__4126__auto___10112) {
                    var seq__10074_10113__$1 = temp__4126__auto___10112;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__10074_10113__$1)) {
                      var c__4333__auto___10114 = cljs.core.chunk_first.call(null, seq__10074_10113__$1);
                      var G__10115 = cljs.core.chunk_rest.call(null, seq__10074_10113__$1);
                      var G__10116 = c__4333__auto___10114;
                      var G__10117 = cljs.core.count.call(null, c__4333__auto___10114);
                      var G__10118 = 0;
                      seq__10074_10103 = G__10115;
                      chunk__10075_10104 = G__10116;
                      count__10076_10105 = G__10117;
                      i__10077_10106 = G__10118;
                      continue;
                    } else {
                      var x_10119__$1 = cljs.core.first.call(null, seq__10074_10113__$1);
                      arr.push(x_10119__$1);
                      var G__10120 = cljs.core.next.call(null, seq__10074_10113__$1);
                      var G__10121 = null;
                      var G__10122 = 0;
                      var G__10123 = 0;
                      seq__10074_10103 = G__10120;
                      chunk__10075_10104 = G__10121;
                      count__10076_10105 = G__10122;
                      i__10077_10106 = G__10123;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj10125 = {};
  return obj10125;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__10146__delegate = function(x, opts) {
      if (function() {
        var G__10136 = x;
        if (G__10136) {
          var bit__4227__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3577__auto__ = bit__4227__auto__;
            if (cljs.core.truth_(or__3577__auto__)) {
              return or__3577__auto__;
            } else {
              return G__10136.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__10136.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__10136);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__10136);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__10137 = opts;
          var map__10137__$1 = cljs.core.seq_QMARK_.call(null, map__10137) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10137) : map__10137;
          var keywordize_keys = cljs.core.get.call(null, map__10137__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__10137, map__10137__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4302__auto__ = function(map__10137, map__10137__$1, keywordize_keys, keyfn) {
                          return function iter__10142(s__10143) {
                            return new cljs.core.LazySeq(null, function(map__10137, map__10137__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__10143__$1 = s__10143;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__10143__$1);
                                  if (temp__4126__auto__) {
                                    var s__10143__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__10143__$2)) {
                                      var c__4300__auto__ = cljs.core.chunk_first.call(null, s__10143__$2);
                                      var size__4301__auto__ = cljs.core.count.call(null, c__4300__auto__);
                                      var b__10145 = cljs.core.chunk_buffer.call(null, size__4301__auto__);
                                      if (function() {
                                        var i__10144 = 0;
                                        while (true) {
                                          if (i__10144 < size__4301__auto__) {
                                            var k = cljs.core._nth.call(null, c__4300__auto__, i__10144);
                                            cljs.core.chunk_append.call(null, b__10145, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__10147 = i__10144 + 1;
                                            i__10144 = G__10147;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10145), iter__10142.call(null, cljs.core.chunk_rest.call(null, s__10143__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10145), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__10143__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__10142.call(null, cljs.core.rest.call(null, s__10143__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__10137, map__10137__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__10137, map__10137__$1, keywordize_keys, keyfn);
                        return iter__4302__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__10137, map__10137__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__10146 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__10146__delegate.call(this, x, opts);
    };
    G__10146.cljs$lang$maxFixedArity = 1;
    G__10146.cljs$lang$applyTo = function(arglist__10148) {
      var x = cljs.core.first(arglist__10148);
      var opts = cljs.core.rest(arglist__10148);
      return G__10146__delegate(x, opts);
    };
    G__10146.cljs$core$IFn$_invoke$arity$variadic = G__10146__delegate;
    return G__10146;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__10149__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__10149 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__10149__delegate.call(this, args);
      };
      G__10149.cljs$lang$maxFixedArity = 0;
      G__10149.cljs$lang$applyTo = function(arglist__10150) {
        var args = cljs.core.seq(arglist__10150);
        return G__10149__delegate(args);
      };
      G__10149.cljs$core$IFn$_invoke$arity$variadic = G__10149__delegate;
      return G__10149;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__10151 = ret;
        f = G__10151;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__10152__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__10152 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__10152__delegate.call(this, f, args);
    };
    G__10152.cljs$lang$maxFixedArity = 1;
    G__10152.cljs$lang$applyTo = function(arglist__10153) {
      var f = cljs.core.first(arglist__10153);
      var args = cljs.core.rest(arglist__10153);
      return G__10152__delegate(f, args);
    };
    G__10152.cljs$core$IFn$_invoke$arity$variadic = G__10152__delegate;
    return G__10152;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__10154) {
    var f = cljs.core.first(arglist__10154);
    var args = cljs.core.rest(arglist__10154);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3577__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3577__auto__) {
      return or__3577__auto__;
    } else {
      var or__3577__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3577__auto____$1) {
        return or__3577__auto____$1;
      } else {
        var and__3565__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3565__auto__) {
          var and__3565__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3565__auto____$1) {
            var and__3565__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3565__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__10155 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__10156 = i + 1;
                  ret = G__10155;
                  i = G__10156;
                  continue;
                }
                break;
              }
            } else {
              return and__3565__auto____$2;
            }
          } else {
            return and__3565__auto____$1;
          }
        } else {
          return and__3565__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3577__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3577__auto__)) {
      return or__3577__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__10157_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__10157_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__10157_SHARP_), cljs.core.second.call(null, p1__10157_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__10158_SHARP_, p2__10159_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__10158_SHARP_, p2__10159_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3577__auto__ = cljs.core.truth_(function() {
    var and__3565__auto__ = xprefs;
    if (cljs.core.truth_(and__3565__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3565__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    var or__3577__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__10160 = cljs.core.rest.call(null, ps);
          ps = G__10160;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3577__auto____$1)) {
      return or__3577__auto____$1;
    } else {
      var or__3577__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__10161 = cljs.core.rest.call(null, ps);
            ps = G__10161;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3577__auto____$2)) {
        return or__3577__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3577__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__10164) {
    var vec__10165 = p__10164;
    var k = cljs.core.nth.call(null, vec__10165, 0, null);
    var _ = cljs.core.nth.call(null, vec__10165, 1, null);
    var e = vec__10165;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3577__auto__ = be == null;
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj10167 = {};
  return obj10167;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._reset[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._reset["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._add_method[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._add_method["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._remove_method[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._remove_method["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._prefer_method[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._get_method[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._get_method["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._methods[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._methods["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._prefers[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._prefers["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__10169 = null;
  var G__10169__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__10169__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__10169__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__10169__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__10169__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__10169__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__10169__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__10169__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__10169__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__10169__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__10169__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__10169__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__10169__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__10169__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__10169__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__10169__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__10169__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__10169__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__10169__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__10169__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__10169__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__10169 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__10169__2.call(this, self__, a);
      case 3:
        return G__10169__3.call(this, self__, a, b);
      case 4:
        return G__10169__4.call(this, self__, a, b, c);
      case 5:
        return G__10169__5.call(this, self__, a, b, c, d);
      case 6:
        return G__10169__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__10169__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__10169__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__10169__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__10169__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__10169__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__10169__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__10169__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__10169__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__10169__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__10169__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__10169__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__10169__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__10169__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__10169__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__10169__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__10169__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__10169;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args10168) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args10168)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4147__auto__, writer__4148__auto__, opts__4149__auto__) {
  return cljs.core._write.call(null, writer__4148__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("util.map");
goog.require("cljs.core");
util.map.deep_merge_with = function() {
  var deep_merge_with__delegate = function(f, maps) {
    return cljs.core.apply.call(null, function() {
      var m__delegate = function(maps__$1) {
        if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, maps__$1)) {
          return cljs.core.apply.call(null, cljs.core.merge_with, m, maps__$1);
        } else {
          return cljs.core.apply.call(null, f, maps__$1);
        }
      };
      var m = function(var_args) {
        var maps__$1 = null;
        if (arguments.length > 0) {
          maps__$1 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return m__delegate.call(this, maps__$1);
      };
      m.cljs$lang$maxFixedArity = 0;
      m.cljs$lang$applyTo = function(arglist__9125) {
        var maps__$1 = cljs.core.seq(arglist__9125);
        return m__delegate(maps__$1);
      };
      m.cljs$core$IFn$_invoke$arity$variadic = m__delegate;
      return m;
    }(), maps);
  };
  var deep_merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return deep_merge_with__delegate.call(this, f, maps);
  };
  deep_merge_with.cljs$lang$maxFixedArity = 1;
  deep_merge_with.cljs$lang$applyTo = function(arglist__9126) {
    var f = cljs.core.first(arglist__9126);
    var maps = cljs.core.rest(arglist__9126);
    return deep_merge_with__delegate(f, maps);
  };
  deep_merge_with.cljs$core$IFn$_invoke$arity$variadic = deep_merge_with__delegate;
  return deep_merge_with;
}();
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (Math.pow(10, x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = goog.string.startsWith(ua, "Opera");
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && (goog.string.contains(ua, "MSIE") || goog.string.contains(ua, "Trident"));
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && goog.string.contains(ua, "WebKit");
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && goog.string.contains(ua, "Mobile");
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && (!goog.userAgent.detectedIe_ && navigator.product == "Gecko"));
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__10660 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__10660;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__10664 = cljs.core._EQ_;
    var expr__10665 = limit;
    if (cljs.core.truth_(pred__10664.call(null, 1, expr__10665))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__10664.call(null, 2, expr__10665))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__10667 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__10668 = limit__$1 - 1;
            var G__10669 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__10667;
            limit__$1 = G__10668;
            parts = G__10669;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__10670 = index - 1;
        index = G__10670;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___10671 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___10671)) {
        var replacement_10672 = temp__4124__auto___10671;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_10672));
      } else {
        buffer.append(ch);
      }
      var G__10673 = index + 1;
      index = G__10673;
      continue;
    }
    break;
  }
};
goog.provide("pathetic.core");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
goog.require("goog.Uri");
goog.require("goog.Uri");
goog.require("clojure.string");
goog.require("clojure.string");
pathetic.core.separator = "/";
pathetic.core.separator_pattern = cljs.core.re_pattern.call(null, pathetic.core.separator);
pathetic.core.common_prefix = function common_prefix(coll1, coll2) {
  return cljs.core.map.call(null, cljs.core.first, cljs.core.take_while.call(null, function(p1__11228_SHARP_) {
    return cljs.core._EQ_.call(null, cljs.core.first.call(null, p1__11228_SHARP_), cljs.core.second.call(null, p1__11228_SHARP_));
  }, cljs.core.map.call(null, function(p1__11229_SHARP_, p2__11230_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11229_SHARP_, p2__11230_SHARP_], null);
  }, coll1, coll2)));
};
pathetic.core.unique_suffix = function unique_suffix(uninteresting_coll, interesting_coll) {
  var common_parts = pathetic.core.common_prefix.call(null, uninteresting_coll, interesting_coll);
  return cljs.core.drop.call(null, cljs.core.count.call(null, common_parts), interesting_coll);
};
pathetic.core.split = function split(path) {
  if (cljs.core._EQ_.call(null, path, pathetic.core.separator)) {
    return cljs.core.PersistentVector.EMPTY;
  } else {
    return clojure.string.split.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(path), pathetic.core.separator_pattern);
  }
};
pathetic.core.parse_path = function parse_path(path) {
  if (cljs.core.empty_QMARK_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(path))) {
    return null;
  } else {
    var path_pieces = pathetic.core.split.call(null, path);
    if (cljs.core._EQ_.call(null, 0, cljs.core.count.call(null, path_pieces))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "root", "root", 1017410644)], null);
    } else {
      var G__11232 = cljs.core.first.call(null, path_pieces);
      switch(G__11232) {
        case "":
          return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "root", "root", 1017410644), cljs.core.rest.call(null, path_pieces));
          break;
        case ".":
          return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "cwd", "cwd", 1014003170), cljs.core.rest.call(null, path_pieces));
          break;
        default:
          return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "cwd", "cwd", 1014003170), path_pieces);
      }
    }
  }
};
pathetic.core.render_path = function render_path(path_pieces) {
  var G__11235 = cljs.core.first.call(null, path_pieces) instanceof cljs.core.Keyword ? cljs.core.first.call(null, path_pieces).fqn : null;
  switch(G__11235) {
    case "cwd":
      if (cljs.core.next.call(null, path_pieces)) {
        return clojure.string.join.call(null, pathetic.core.separator, cljs.core.rest.call(null, path_pieces));
      } else {
        return ".";
      }
      break;
    case "root":
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pathetic.core.separator) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.call(null, pathetic.core.separator, cljs.core.rest.call(null, path_pieces)));
      break;
    default:
      return clojure.string.join.call(null, pathetic.core.separator, path_pieces);
  }
};
pathetic.core.starts_with = function starts_with(s, prefix) {
  return goog.string.startsWith(s, prefix);
};
pathetic.core.absolute_path_QMARK_ = function absolute_path_QMARK_(path) {
  return pathetic.core.starts_with.call(null, path, pathetic.core.separator);
};
pathetic.core.up_dir = function up_dir(path_pieces) {
  var G__11238 = cljs.core.last.call(null, path_pieces);
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "root", "root", 1017410644), G__11238)) {
    return path_pieces;
  } else {
    if (cljs.core._EQ_.call(null, "..", G__11238)) {
      return cljs.core.conj.call(null, path_pieces, "..");
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "cwd", "cwd", 1014003170), G__11238)) {
        return cljs.core.conj.call(null, path_pieces, "..");
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.pop.call(null, path_pieces);
        } else {
          return null;
        }
      }
    }
  }
};
pathetic.core.normalize_STAR_ = function normalize_STAR_(path_pieces) {
  var result = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, path_pieces)], null);
  var remaining_path = cljs.core.rest.call(null, path_pieces);
  while (true) {
    var vec__11243 = remaining_path;
    var curr = cljs.core.nth.call(null, vec__11243, 0, null);
    var remainder = cljs.core.nthnext.call(null, vec__11243, 1);
    var pred__11244 = cljs.core._EQ_;
    var expr__11245 = curr;
    if (cljs.core.truth_(pred__11244.call(null, null, expr__11245))) {
      return result;
    } else {
      if (cljs.core.truth_(pred__11244.call(null, "", expr__11245))) {
        var G__11247 = result;
        var G__11248 = remainder;
        result = G__11247;
        remaining_path = G__11248;
        continue;
      } else {
        if (cljs.core.truth_(pred__11244.call(null, ".", expr__11245))) {
          var G__11249 = result;
          var G__11250 = remainder;
          result = G__11249;
          remaining_path = G__11250;
          continue;
        } else {
          if (cljs.core.truth_(pred__11244.call(null, "..", expr__11245))) {
            var G__11251 = pathetic.core.up_dir.call(null, result);
            var G__11252 = remainder;
            result = G__11251;
            remaining_path = G__11252;
            continue;
          } else {
            var G__11253 = cljs.core.conj.call(null, result, curr);
            var G__11254 = remainder;
            result = G__11253;
            remaining_path = G__11254;
            continue;
          }
        }
      }
    }
    break;
  }
};
pathetic.core.normalize = function normalize(path) {
  return pathetic.core.render_path.call(null, pathetic.core.normalize_STAR_.call(null, pathetic.core.parse_path.call(null, path)));
};
pathetic.core.relativize_STAR_ = function relativize_STAR_(base_path, dest_path) {
  var common_path = pathetic.core.common_prefix.call(null, base_path, dest_path);
  var base_suffix = cljs.core.drop.call(null, cljs.core.count.call(null, common_path), base_path);
  var dest_suffix = cljs.core.drop.call(null, cljs.core.count.call(null, common_path), dest_path);
  if (common_path == null) {
    throw cljs.core.ex_info.call(null, "Paths contain no common components.", cljs.core.PersistentArrayMap.EMPTY);
  } else {
  }
  return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cwd", "cwd", 1014003170)], null), cljs.core.repeat.call(null, cljs.core.count.call(null, base_suffix), ".."), function() {
    var suffix = cljs.core.PersistentVector.EMPTY;
    var remainder = dest_suffix;
    while (true) {
      var curr = cljs.core.first.call(null, remainder);
      var pred__11258 = cljs.core._EQ_;
      var expr__11259 = curr;
      if (cljs.core.truth_(pred__11258.call(null, null, expr__11259))) {
        return suffix;
      } else {
        if (cljs.core.truth_(pred__11258.call(null, "", expr__11259))) {
          var G__11261 = suffix;
          var G__11262 = cljs.core.rest.call(null, remainder);
          suffix = G__11261;
          remainder = G__11262;
          continue;
        } else {
          if (cljs.core.truth_(pred__11258.call(null, ".", expr__11259))) {
            var G__11263 = suffix;
            var G__11264 = cljs.core.rest.call(null, remainder);
            suffix = G__11263;
            remainder = G__11264;
            continue;
          } else {
            if (cljs.core.truth_(pred__11258.call(null, "..", expr__11259))) {
              var G__11265 = cljs.core.conj.call(null, suffix, "..");
              var G__11266 = cljs.core.rest.call(null, remainder);
              suffix = G__11265;
              remainder = G__11266;
              continue;
            } else {
              var G__11267 = cljs.core.conj.call(null, suffix, curr);
              var G__11268 = cljs.core.rest.call(null, remainder);
              suffix = G__11267;
              remainder = G__11268;
              continue;
            }
          }
        }
      }
      break;
    }
  }());
};
pathetic.core.relativize = function relativize(base_path, dest_path) {
  var base_path__$1 = pathetic.core.normalize_STAR_.call(null, pathetic.core.parse_path.call(null, base_path));
  var dest_path__$1 = pathetic.core.normalize_STAR_.call(null, pathetic.core.parse_path.call(null, dest_path));
  return pathetic.core.render_path.call(null, pathetic.core.relativize_STAR_.call(null, base_path__$1, dest_path__$1));
};
pathetic.core.resolve_STAR_ = function resolve_STAR_(base_path, other_path) {
  if (other_path == null) {
    return base_path;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "root", "root", 1017410644), cljs.core.first.call(null, other_path))) {
      return other_path;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var base_components = pathetic.core.normalize_STAR_.call(null, base_path);
        var other_components = cljs.core.rest.call(null, pathetic.core.normalize_STAR_.call(null, other_path));
        return cljs.core.concat.call(null, base_components, other_components);
      } else {
        return null;
      }
    }
  }
};
pathetic.core.resolve = function resolve(base_path, other_path) {
  return pathetic.core.render_path.call(null, pathetic.core.resolve_STAR_.call(null, pathetic.core.parse_path.call(null, base_path), pathetic.core.parse_path.call(null, other_path)));
};
pathetic.core.ends_with = function ends_with(s, suffix) {
  return goog.string.endsWith(s, suffix);
};
pathetic.core.ensure_trailing_separator = function ensure_trailing_separator(path) {
  if (cljs.core.truth_(pathetic.core.ends_with.call(null, path, pathetic.core.separator))) {
    return path;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(path) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pathetic.core.separator);
  }
};
pathetic.core.as_url = function as_url(url_or_string) {
  if (url_or_string instanceof goog.Uri) {
    return url_or_string;
  } else {
    return new goog.Uri(url_or_string);
  }
};
pathetic.core.split_url_on_path = function split_url_on_path(url_or_string) {
  var url = pathetic.core.as_url.call(null, url_or_string);
  var url_string = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(url);
  var path = url.getPath();
  var path_idx = url_string.lastIndexOf(path);
  var pre_path = url_string.substring(0, path_idx);
  var post_path = url_string.substring(path_idx + cljs.core.count.call(null, path));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [pre_path, path, post_path], null);
};
pathetic.core.url_normalize = function url_normalize(url_or_string) {
  var vec__11270 = pathetic.core.split_url_on_path.call(null, url_or_string);
  var pre_path = cljs.core.nth.call(null, vec__11270, 0, null);
  var path = cljs.core.nth.call(null, vec__11270, 1, null);
  var post_path = cljs.core.nth.call(null, vec__11270, 2, null);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pre_path) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pathetic.core.normalize.call(null, path)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(post_path);
};
pathetic.core.url_ensure_trailing_separator = function url_ensure_trailing_separator(url_or_string) {
  var vec__11272 = pathetic.core.split_url_on_path.call(null, url_or_string);
  var pre_path = cljs.core.nth.call(null, vec__11272, 0, null);
  var path = cljs.core.nth.call(null, vec__11272, 1, null);
  var post_path = cljs.core.nth.call(null, vec__11272, 2, null);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pre_path) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pathetic.core.ensure_trailing_separator.call(null, path)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(post_path);
};
goog.provide("jayq.util");
goog.require("cljs.core");
jayq.util.wait = function wait(ms, func) {
  return setTimeout(func, ms);
};
jayq.util.log = function() {
  var log__delegate = function(v, text) {
    var vs = typeof v === "string" ? cljs.core.apply.call(null, cljs.core.str, v, text) : v;
    console.log(vs);
    return v;
  };
  var log = function(v, var_args) {
    var text = null;
    if (arguments.length > 1) {
      text = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return log__delegate.call(this, v, text);
  };
  log.cljs$lang$maxFixedArity = 1;
  log.cljs$lang$applyTo = function(arglist__10170) {
    var v = cljs.core.first(arglist__10170);
    var text = cljs.core.rest(arglist__10170);
    return log__delegate(v, text);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
goog.provide("translate");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
goog.require("pathetic.core");
goog.require("pathetic.core");
translate.get_locale = function get_locale() {
  return cljs.core.keyword.call(null, cljs.core.second.call(null, pathetic.core.parse_path.call(null, window["location"]["pathname"])));
};
translate.translate = function() {
  var translate__$1__delegate = function(m, keys) {
    var locale = translate.get_locale.call(null);
    return cljs.core.get_in.call(null, m, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [locale], null), keys));
  };
  var translate__$1 = function(m, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return translate__$1__delegate.call(this, m, keys);
  };
  translate__$1.cljs$lang$maxFixedArity = 1;
  translate__$1.cljs$lang$applyTo = function(arglist__9124) {
    var m = cljs.core.first(arglist__9124);
    var keys = cljs.core.rest(arglist__9124);
    return translate__$1__delegate(m, keys);
  };
  translate__$1.cljs$core$IFn$_invoke$arity$variadic = translate__$1__delegate;
  return translate__$1;
}();
goog.provide("monet.core");
goog.require("cljs.core");
monet.core.animation_frame = function() {
  var or__3577__auto__ = window.requestAnimationFrame;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    var or__3577__auto____$1 = window.webkitRequestAnimationFrame;
    if (cljs.core.truth_(or__3577__auto____$1)) {
      return or__3577__auto____$1;
    } else {
      var or__3577__auto____$2 = window.mozRequestAnimationFrame;
      if (cljs.core.truth_(or__3577__auto____$2)) {
        return or__3577__auto____$2;
      } else {
        var or__3577__auto____$3 = window.oRequestAnimationFrame;
        if (cljs.core.truth_(or__3577__auto____$3)) {
          return or__3577__auto____$3;
        } else {
          var or__3577__auto____$4 = window.msRequestAnimationFrame;
          if (cljs.core.truth_(or__3577__auto____$4)) {
            return or__3577__auto____$4;
          } else {
            return function(or__3577__auto____$4, or__3577__auto____$3, or__3577__auto____$2, or__3577__auto____$1, or__3577__auto__) {
              return function(callback) {
                return setTimeout(callback, 17);
              };
            }(or__3577__auto____$4, or__3577__auto____$3, or__3577__auto____$2, or__3577__auto____$1, or__3577__auto__);
          }
        }
      }
    }
  }
}();
goog.provide("monet.canvas");
goog.require("cljs.core");
goog.require("monet.core");
goog.require("monet.core");
monet.canvas.get_context = function get_context(canvas, type) {
  return canvas.getContext(cljs.core.name.call(null, type));
};
monet.canvas.begin_path = function begin_path(ctx) {
  ctx.beginPath();
  return ctx;
};
monet.canvas.close_path = function close_path(ctx) {
  ctx.closePath();
  return ctx;
};
monet.canvas.fill = function fill(ctx) {
  ctx.fill();
  return ctx;
};
monet.canvas.stroke = function stroke(ctx) {
  ctx.stroke();
  return ctx;
};
monet.canvas.clear_rect = function clear_rect(ctx, p__10171) {
  var map__10173 = p__10171;
  var map__10173__$1 = cljs.core.seq_QMARK_.call(null, map__10173) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10173) : map__10173;
  var h = cljs.core.get.call(null, map__10173__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__10173__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__10173__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__10173__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.clearRect(x, y, w, h);
  return ctx;
};
monet.canvas.rect = function rect(ctx, p__10174) {
  var map__10176 = p__10174;
  var map__10176__$1 = cljs.core.seq_QMARK_.call(null, map__10176) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10176) : map__10176;
  var h = cljs.core.get.call(null, map__10176__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__10176__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__10176__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__10176__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  monet.canvas.begin_path.call(null, ctx);
  ctx.rect(x, y, w, h);
  monet.canvas.close_path.call(null, ctx);
  monet.canvas.fill.call(null, ctx);
  return ctx;
};
monet.canvas.stroke_rect = function stroke_rect(ctx, p__10177) {
  var map__10179 = p__10177;
  var map__10179__$1 = cljs.core.seq_QMARK_.call(null, map__10179) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10179) : map__10179;
  var h = cljs.core.get.call(null, map__10179__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__10179__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__10179__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__10179__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.strokeRect(x, y, w, h);
  return ctx;
};
monet.canvas.fill_rect = function fill_rect(ctx, p__10180) {
  var map__10182 = p__10180;
  var map__10182__$1 = cljs.core.seq_QMARK_.call(null, map__10182) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10182) : map__10182;
  var h = cljs.core.get.call(null, map__10182__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__10182__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__10182__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__10182__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.fillRect(x, y, w, h);
  return ctx;
};
monet.canvas.circle = function circle(ctx, p__10183) {
  var map__10185 = p__10183;
  var map__10185__$1 = cljs.core.seq_QMARK_.call(null, map__10185) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10185) : map__10185;
  var r = cljs.core.get.call(null, map__10185__$1, new cljs.core.Keyword(null, "r", "r", 1013904356));
  var y = cljs.core.get.call(null, map__10185__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__10185__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  monet.canvas.begin_path.call(null, ctx);
  ctx.arc(x, y, r, 0, Math.PI * 2, true);
  monet.canvas.close_path.call(null, ctx);
  monet.canvas.fill.call(null, ctx);
  return ctx;
};
monet.canvas.text = function text(ctx, p__10186) {
  var map__10188 = p__10186;
  var map__10188__$1 = cljs.core.seq_QMARK_.call(null, map__10188) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10188) : map__10188;
  var y = cljs.core.get.call(null, map__10188__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__10188__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  var text__$1 = cljs.core.get.call(null, map__10188__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
  ctx.fillText(text__$1, x, y);
  return ctx;
};
monet.canvas.font_style = function font_style(ctx, font) {
  ctx.font = font;
  return ctx;
};
monet.canvas.fill_style = function fill_style(ctx, color__$1) {
  ctx.fillStyle = cljs.core.name.call(null, color__$1);
  return ctx;
};
monet.canvas.stroke_style = function stroke_style(ctx, color__$1) {
  ctx.strokeStyle = cljs.core.name.call(null, color__$1);
  return ctx;
};
monet.canvas.stroke_width = function stroke_width(ctx, w) {
  ctx.lineWidth = w;
  return ctx;
};
monet.canvas.stroke_cap = function stroke_cap(ctx, cap) {
  ctx.lineCap = cljs.core.name.call(null, cap);
  return ctx;
};
monet.canvas.move_to = function move_to(ctx, x, y) {
  ctx.moveTo(x, y);
  return ctx;
};
monet.canvas.line_to = function line_to(ctx, x, y) {
  ctx.lineTo(x, y);
  return ctx;
};
monet.canvas.alpha = function alpha(ctx, a) {
  ctx.globalAlpha = a;
  return ctx;
};
monet.canvas.composition_operation = function composition_operation(ctx, operation) {
  ctx.globalCompositionOperation = cljs.core.name.call(null, operation);
  return ctx;
};
monet.canvas.text_align = function text_align(ctx, alignment) {
  ctx.textAlign = cljs.core.name.call(null, alignment);
  return ctx;
};
monet.canvas.text_baseline = function text_baseline(ctx, alignment) {
  ctx.textBaseline = cljs.core.name.call(null, alignment);
  return ctx;
};
monet.canvas.get_pixel = function get_pixel(ctx, x, y) {
  var imgd = ctx.getImageData(x, y, 1, 1).data;
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "red", "red", 1014017027), imgd[0], new cljs.core.Keyword(null, "green", "green", 1112523381), imgd[1], new cljs.core.Keyword(null, "blue", "blue", 1016931276), imgd[2], new cljs.core.Keyword(null, "alpha", "alpha", 1106814160), imgd[3]], null);
};
monet.canvas.save = function save(ctx) {
  ctx.save();
  return ctx;
};
monet.canvas.restore = function restore(ctx) {
  ctx.restore();
  return ctx;
};
monet.canvas.rotate = function rotate(ctx, angle) {
  ctx.rotate(angle);
  return ctx;
};
monet.canvas.scale = function scale(ctx, x, y) {
  ctx.scale(x, y);
  return ctx;
};
monet.canvas.translate = function translate__$1(ctx, x, y) {
  ctx.translate(x, y);
  return ctx;
};
monet.canvas.transform = function() {
  var transform = null;
  var transform__2 = function(ctx, p__10189) {
    var map__10191 = p__10189;
    var map__10191__$1 = cljs.core.seq_QMARK_.call(null, map__10191) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10191) : map__10191;
    var dy = cljs.core.get.call(null, map__10191__$1, new cljs.core.Keyword(null, "dy", "dy", 1013907463));
    var dx = cljs.core.get.call(null, map__10191__$1, new cljs.core.Keyword(null, "dx", "dx", 1013907462));
    var m22 = cljs.core.get.call(null, map__10191__$1, new cljs.core.Keyword(null, "m22", "m22", 1014010591));
    var m21 = cljs.core.get.call(null, map__10191__$1, new cljs.core.Keyword(null, "m21", "m21", 1014010590));
    var m12 = cljs.core.get.call(null, map__10191__$1, new cljs.core.Keyword(null, "m12", "m12", 1014010560));
    var m11 = cljs.core.get.call(null, map__10191__$1, new cljs.core.Keyword(null, "m11", "m11", 1014010559));
    ctx.transform(m11, m12, m21, m22, dx, dy);
    return ctx;
  };
  var transform__7 = function(ctx, m11, m12, m21, m22, dx, dy) {
    ctx.transform(m11, m12, m21, m22, dx, dy);
    return ctx;
  };
  transform = function(ctx, m11, m12, m21, m22, dx, dy) {
    switch(arguments.length) {
      case 2:
        return transform__2.call(this, ctx, m11);
      case 7:
        return transform__7.call(this, ctx, m11, m12, m21, m22, dx, dy);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transform.cljs$core$IFn$_invoke$arity$2 = transform__2;
  transform.cljs$core$IFn$_invoke$arity$7 = transform__7;
  return transform;
}();
monet.canvas.draw_image = function() {
  var draw_image = null;
  var draw_image__3 = function(ctx, img, p__10192) {
    var map__10197 = p__10192;
    var map__10197__$1 = cljs.core.seq_QMARK_.call(null, map__10197) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10197) : map__10197;
    var params = map__10197__$1;
    var sh = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "sh", "sh", 1013907911));
    var sw = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "sw", "sw", 1013907926));
    var x = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
    var y = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
    var dh = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "dh", "dh", 1013907446));
    var dx = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "dx", "dx", 1013907462));
    var w = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
    var sy = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "sy", "sy", 1013907928));
    var dy = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "dy", "dy", 1013907463));
    var h = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
    var dw = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "dw", "dw", 1013907461));
    var sx = cljs.core.get.call(null, map__10197__$1, new cljs.core.Keyword(null, "sx", "sx", 1013907927));
    var pred__10198_10201 = cljs.core._EQ_;
    var expr__10199_10202 = cljs.core.count.call(null, params);
    if (cljs.core.truth_(pred__10198_10201.call(null, 2, expr__10199_10202))) {
      ctx.drawImage(img, x, y);
    } else {
      if (cljs.core.truth_(pred__10198_10201.call(null, 4, expr__10199_10202))) {
        ctx.drawImage(img, x, y, w, h);
      } else {
        if (cljs.core.truth_(pred__10198_10201.call(null, 8, expr__10199_10202))) {
          ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh);
        } else {
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__10199_10202));
        }
      }
    }
    return ctx;
  };
  var draw_image__4 = function(ctx, img, x, y) {
    ctx.drawImage(img, x, y);
    return ctx;
  };
  draw_image = function(ctx, img, x, y) {
    switch(arguments.length) {
      case 3:
        return draw_image__3.call(this, ctx, img, x);
      case 4:
        return draw_image__4.call(this, ctx, img, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  draw_image.cljs$core$IFn$_invoke$arity$3 = draw_image__3;
  draw_image.cljs$core$IFn$_invoke$arity$4 = draw_image__4;
  return draw_image;
}();
monet.canvas.quadratic_curve_to = function() {
  var quadratic_curve_to = null;
  var quadratic_curve_to__2 = function(ctx, p__10203) {
    var map__10205 = p__10203;
    var map__10205__$1 = cljs.core.seq_QMARK_.call(null, map__10205) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10205) : map__10205;
    var y = cljs.core.get.call(null, map__10205__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
    var x = cljs.core.get.call(null, map__10205__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
    var cpy = cljs.core.get.call(null, map__10205__$1, new cljs.core.Keyword(null, "cpy", "cpy", 1014002974));
    var cpx = cljs.core.get.call(null, map__10205__$1, new cljs.core.Keyword(null, "cpx", "cpx", 1014002973));
    ctx.quadraticCurveTo(cpx, cpy, x, y);
    return ctx;
  };
  var quadratic_curve_to__5 = function(ctx, cpx, cpy, x, y) {
    ctx.quadraticCurveTo(cpx, cpy, x, y);
    return ctx;
  };
  quadratic_curve_to = function(ctx, cpx, cpy, x, y) {
    switch(arguments.length) {
      case 2:
        return quadratic_curve_to__2.call(this, ctx, cpx);
      case 5:
        return quadratic_curve_to__5.call(this, ctx, cpx, cpy, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  quadratic_curve_to.cljs$core$IFn$_invoke$arity$2 = quadratic_curve_to__2;
  quadratic_curve_to.cljs$core$IFn$_invoke$arity$5 = quadratic_curve_to__5;
  return quadratic_curve_to;
}();
monet.canvas.bezier_curve_to = function() {
  var bezier_curve_to = null;
  var bezier_curve_to__2 = function(ctx, p__10206) {
    var map__10208 = p__10206;
    var map__10208__$1 = cljs.core.seq_QMARK_.call(null, map__10208) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10208) : map__10208;
    var y = cljs.core.get.call(null, map__10208__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
    var x = cljs.core.get.call(null, map__10208__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
    var cp2y = cljs.core.get.call(null, map__10208__$1, new cljs.core.Keyword(null, "cp2y", "cp2y", 1016962854));
    var cp2x = cljs.core.get.call(null, map__10208__$1, new cljs.core.Keyword(null, "cp2x", "cp2x", 1016962853));
    var cp1y = cljs.core.get.call(null, map__10208__$1, new cljs.core.Keyword(null, "cp1y", "cp1y", 1016962823));
    var cp1x = cljs.core.get.call(null, map__10208__$1, new cljs.core.Keyword(null, "cp1x", "cp1x", 1016962822));
    ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    return ctx;
  };
  var bezier_curve_to__7 = function(ctx, cp1x, cp1y, cp2x, cp2y, x, y) {
    ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    return ctx;
  };
  bezier_curve_to = function(ctx, cp1x, cp1y, cp2x, cp2y, x, y) {
    switch(arguments.length) {
      case 2:
        return bezier_curve_to__2.call(this, ctx, cp1x);
      case 7:
        return bezier_curve_to__7.call(this, ctx, cp1x, cp1y, cp2x, cp2y, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bezier_curve_to.cljs$core$IFn$_invoke$arity$2 = bezier_curve_to__2;
  bezier_curve_to.cljs$core$IFn$_invoke$arity$7 = bezier_curve_to__7;
  return bezier_curve_to;
}();
monet.canvas.rounded_rect = function rounded_rect(ctx, p__10209) {
  var map__10211 = p__10209;
  var map__10211__$1 = cljs.core.seq_QMARK_.call(null, map__10211) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10211) : map__10211;
  var r = cljs.core.get.call(null, map__10211__$1, new cljs.core.Keyword(null, "r", "r", 1013904356));
  var h = cljs.core.get.call(null, map__10211__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__10211__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__10211__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__10211__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  monet.canvas.stroke.call(null, monet.canvas.quadratic_curve_to.call(null, monet.canvas.line_to.call(null, monet.canvas.quadratic_curve_to.call(null, monet.canvas.line_to.call(null, monet.canvas.quadratic_curve_to.call(null, monet.canvas.line_to.call(null, monet.canvas.quadratic_curve_to.call(null, monet.canvas.line_to.call(null, monet.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), x, y + r), x, y + h - r), x, y + h, x + r, y + h), x + w - r, y + h), x + w, y + h, x + w, y + 
  h - r), x + w, y + r), x + w, y, x + w - r, y), x + r, y), x, y, x, y + r));
  return ctx;
};
monet.canvas.add_entity = function add_entity(mc, k, ent) {
  return(new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k] = ent;
};
monet.canvas.remove_entity = function remove_entity(mc, k) {
  return delete (new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k];
};
monet.canvas.get_entity = function get_entity(mc, k) {
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k]);
};
monet.canvas.update_entity = function() {
  var update_entity__delegate = function(mc, k, func, extra) {
    var cur = (new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k];
    var res = cljs.core.apply.call(null, func, cur, extra);
    return(new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k] = res;
  };
  var update_entity = function(mc, k, func, var_args) {
    var extra = null;
    if (arguments.length > 3) {
      extra = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return update_entity__delegate.call(this, mc, k, func, extra);
  };
  update_entity.cljs$lang$maxFixedArity = 3;
  update_entity.cljs$lang$applyTo = function(arglist__10212) {
    var mc = cljs.core.first(arglist__10212);
    arglist__10212 = cljs.core.next(arglist__10212);
    var k = cljs.core.first(arglist__10212);
    arglist__10212 = cljs.core.next(arglist__10212);
    var func = cljs.core.first(arglist__10212);
    var extra = cljs.core.rest(arglist__10212);
    return update_entity__delegate(mc, k, func, extra);
  };
  update_entity.cljs$core$IFn$_invoke$arity$variadic = update_entity__delegate;
  return update_entity;
}();
monet.canvas.clear_BANG_ = function clear_BANG_(mc) {
  var ks = cljs.core.js_keys.call(null, (new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc));
  var seq__10217 = cljs.core.seq.call(null, ks);
  var chunk__10218 = null;
  var count__10219 = 0;
  var i__10220 = 0;
  while (true) {
    if (i__10220 < count__10219) {
      var k = cljs.core._nth.call(null, chunk__10218, i__10220);
      monet.canvas.remove_entity.call(null, mc, k);
      var G__10221 = seq__10217;
      var G__10222 = chunk__10218;
      var G__10223 = count__10219;
      var G__10224 = i__10220 + 1;
      seq__10217 = G__10221;
      chunk__10218 = G__10222;
      count__10219 = G__10223;
      i__10220 = G__10224;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__10217);
      if (temp__4126__auto__) {
        var seq__10217__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__10217__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__10217__$1);
          var G__10225 = cljs.core.chunk_rest.call(null, seq__10217__$1);
          var G__10226 = c__4333__auto__;
          var G__10227 = cljs.core.count.call(null, c__4333__auto__);
          var G__10228 = 0;
          seq__10217 = G__10225;
          chunk__10218 = G__10226;
          count__10219 = G__10227;
          i__10220 = G__10228;
          continue;
        } else {
          var k = cljs.core.first.call(null, seq__10217__$1);
          monet.canvas.remove_entity.call(null, mc, k);
          var G__10229 = cljs.core.next.call(null, seq__10217__$1);
          var G__10230 = null;
          var G__10231 = 0;
          var G__10232 = 0;
          seq__10217 = G__10229;
          chunk__10218 = G__10230;
          count__10219 = G__10231;
          i__10220 = G__10232;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
monet.canvas.entity = function entity(v, update, draw) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "value", "value", 1125876963), v, new cljs.core.Keyword(null, "draw", "draw", 1016996022), draw, new cljs.core.Keyword(null, "update", "update", 4470025275), update], null);
};
monet.canvas.attr = function attr(e, a) {
  return e.getAttribute(a);
};
monet.canvas.draw_loop = function draw_loop(p__10233) {
  var map__10239 = p__10233;
  var map__10239__$1 = cljs.core.seq_QMARK_.call(null, map__10239) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10239) : map__10239;
  var mc = map__10239__$1;
  var entities = cljs.core.get.call(null, map__10239__$1, new cljs.core.Keyword(null, "entities", "entities", 3206757171));
  var active = cljs.core.get.call(null, map__10239__$1, new cljs.core.Keyword(null, "active", "active", 3885920888));
  var ctx = cljs.core.get.call(null, map__10239__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var updating_QMARK_ = cljs.core.get.call(null, map__10239__$1, new cljs.core.Keyword(null, "updating?", "updating?", 3359806763));
  var canvas = cljs.core.get.call(null, map__10239__$1, new cljs.core.Keyword(null, "canvas", "canvas", 3941165258));
  monet.canvas.clear_rect.call(null, ctx, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "x", "x", 1013904362), 0, new cljs.core.Keyword(null, "y", "y", 1013904363), 0, new cljs.core.Keyword(null, "w", "w", 1013904361), monet.canvas.attr.call(null, canvas, "width"), new cljs.core.Keyword(null, "h", "h", 1013904346), monet.canvas.attr.call(null, canvas, "height")], null));
  if (cljs.core.truth_(cljs.core.deref.call(null, active))) {
    var ks_10244 = cljs.core.js_keys.call(null, entities);
    var cnt_10245 = ks_10244.length;
    var i_10246 = 0;
    while (true) {
      if (i_10246 < cnt_10245) {
        var k_10247 = ks_10244[i_10246];
        var map__10240_10248 = entities[k_10247];
        var map__10240_10249__$1 = cljs.core.seq_QMARK_.call(null, map__10240_10248) ? cljs.core.apply.call(null, cljs.core.hash_map, map__10240_10248) : map__10240_10248;
        var ent_10250 = map__10240_10249__$1;
        var value_10251 = cljs.core.get.call(null, map__10240_10249__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
        var update_10252 = cljs.core.get.call(null, map__10240_10249__$1, new cljs.core.Keyword(null, "update", "update", 4470025275));
        var draw_10253 = cljs.core.get.call(null, map__10240_10249__$1, new cljs.core.Keyword(null, "draw", "draw", 1016996022));
        if (cljs.core.truth_(function() {
          var and__3565__auto__ = update_10252;
          if (cljs.core.truth_(and__3565__auto__)) {
            return cljs.core.deref.call(null, updating_QMARK_);
          } else {
            return and__3565__auto__;
          }
        }())) {
          var updated_10254 = function() {
            var or__3577__auto__ = function() {
              try {
                return update_10252.call(null, value_10251);
              } catch (e10242) {
                if (e10242 instanceof Error) {
                  var e = e10242;
                  console.log(e);
                  return value_10251;
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw e10242;
                  } else {
                    return null;
                  }
                }
              }
            }();
            if (cljs.core.truth_(or__3577__auto__)) {
              return or__3577__auto__;
            } else {
              return value_10251;
            }
          }();
          if (cljs.core.truth_(entities[k_10247])) {
            entities[k_10247] = cljs.core.assoc.call(null, ent_10250, new cljs.core.Keyword(null, "value", "value", 1125876963), updated_10254);
          } else {
          }
        } else {
        }
        if (cljs.core.truth_(draw_10253)) {
          try {
            draw_10253.call(null, ctx, (new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(entities[k_10247]));
          } catch (e10243) {
            if (e10243 instanceof Error) {
              var e_10255 = e10243;
              console.log(e_10255);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e10243;
              } else {
              }
            }
          }
        } else {
        }
        var G__10256 = i_10246 + 1;
        i_10246 = G__10256;
        continue;
      } else {
      }
      break;
    }
    return monet.core.animation_frame.call(null, function(map__10239, map__10239__$1, mc, entities, active, ctx, updating_QMARK_, canvas) {
      return function() {
        return draw_loop.call(null, mc);
      };
    }(map__10239, map__10239__$1, mc, entities, active, ctx, updating_QMARK_, canvas));
  } else {
    return null;
  }
};
monet.canvas.monet_canvas = function monet_canvas(elem, context_type) {
  var ct = function() {
    var or__3577__auto__ = context_type;
    if (cljs.core.truth_(or__3577__auto__)) {
      return or__3577__auto__;
    } else {
      return "2d";
    }
  }();
  var ctx = monet.canvas.get_context.call(null, elem, ct);
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "canvas", "canvas", 3941165258), elem, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097), ctx, new cljs.core.Keyword(null, "entities", "entities", 3206757171), function() {
    var obj10260 = {};
    return obj10260;
  }(), new cljs.core.Keyword(null, "updating?", "updating?", 3359806763), cljs.core.atom.call(null, true), new cljs.core.Keyword(null, "active", "active", 3885920888), cljs.core.atom.call(null, true)], null);
};
monet.canvas.init = function() {
  var init__delegate = function(canvas, p__10261) {
    var vec__10263 = p__10261;
    var context_type = cljs.core.nth.call(null, vec__10263, 0, null);
    var mc = monet.canvas.monet_canvas.call(null, canvas, context_type);
    monet.canvas.draw_loop.call(null, mc);
    return mc;
  };
  var init = function(canvas, var_args) {
    var p__10261 = null;
    if (arguments.length > 1) {
      p__10261 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return init__delegate.call(this, canvas, p__10261);
  };
  init.cljs$lang$maxFixedArity = 1;
  init.cljs$lang$applyTo = function(arglist__10264) {
    var canvas = cljs.core.first(arglist__10264);
    var p__10261 = cljs.core.rest(arglist__10264);
    return init__delegate(canvas, p__10261);
  };
  init.cljs$core$IFn$_invoke$arity$variadic = init__delegate;
  return init;
}();
monet.canvas.stop = function stop(mc) {
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "active", "active", 3885920888)).cljs$core$IFn$_invoke$arity$1(mc), false);
};
monet.canvas.stop_updating = function stop_updating(mc) {
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "updating?", "updating?", 3359806763)).cljs$core$IFn$_invoke$arity$1(mc), false);
};
monet.canvas.start_updating = function start_updating(mc) {
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "updating?", "updating?", 3359806763)).cljs$core$IFn$_invoke$arity$1(mc), true);
};
monet.canvas.restart = function restart(mc) {
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "active", "active", 3885920888)).cljs$core$IFn$_invoke$arity$1(mc), true);
  return monet.canvas.draw_loop.call(null, mc);
};
goog.provide("html.canvas");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
goog.require("monet.canvas");
goog.require("monet.canvas");
html.canvas.point = function point(x, y) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "x", "x", 1013904362), x, new cljs.core.Keyword(null, "y", "y", 1013904363), y], null);
};
html.canvas.move_to = function move_to(ctx, p__8483) {
  var map__8485 = p__8483;
  var map__8485__$1 = cljs.core.seq_QMARK_.call(null, map__8485) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8485) : map__8485;
  var y = cljs.core.get.call(null, map__8485__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__8485__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.moveTo(x, y);
  return ctx;
};
html.canvas.line_to = function line_to(ctx, p__8486) {
  var map__8488 = p__8486;
  var map__8488__$1 = cljs.core.seq_QMARK_.call(null, map__8488) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8488) : map__8488;
  var y = cljs.core.get.call(null, map__8488__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__8488__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.lineTo(x, y);
  return ctx;
};
html.canvas.arc = function arc(ctx, p__8489, radius, start, end, direction) {
  var map__8491 = p__8489;
  var map__8491__$1 = cljs.core.seq_QMARK_.call(null, map__8491) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8491) : map__8491;
  var y = cljs.core.get.call(null, map__8491__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__8491__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.arc(x, y, radius, start, end, direction.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "cw", "cw", 1013907430), false, new cljs.core.Keyword(null, "ccw", "ccw", 1014002569), true], null)));
  return ctx;
};
html.canvas.offset = function offset(e) {
  var temp__4124__auto__ = e.offsetX;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var ox = temp__4124__auto__;
    return html.canvas.point.call(null, ox, e.offsetY);
  } else {
    var rect = e.target.getBoundingClientRect();
    var item = function() {
      var temp__4124__auto____$1 = e.touches;
      if (cljs.core.truth_(temp__4124__auto____$1)) {
        var touches = temp__4124__auto____$1;
        return touches.item(0);
      } else {
        return e;
      }
    }();
    return html.canvas.point.call(null, item.clientX - rect.left, item.clientY - rect.top);
  }
};
html.canvas.center = function center(item) {
  var e = cljs.core.truth_(item.nodeType) ? item : item.target;
  return html.canvas.point.call(null, e.width / 2, e.height / 2);
};
html.canvas.distance = function distance(a, b) {
  var xd = (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(a) - (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(b);
  var yd = (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(a) - (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(b);
  return Math.sqrt.call(null, xd * xd + yd * yd);
};
html.canvas.point_diff = function point_diff(p1, p2) {
  return html.canvas.point.call(null, (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(p1) - (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(p2), (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(p1) - (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(p2));
};
html.canvas.extent = function extent(ctx) {
  var canvas = ctx.canvas;
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "x", "x", 1013904362), 0, new cljs.core.Keyword(null, "y", "y", 1013904363), 0, new cljs.core.Keyword(null, "w", "w", 1013904361), canvas.width, new cljs.core.Keyword(null, "h", "h", 1013904346), canvas.height], null);
};
html.canvas.clear = function clear(ctx) {
  return monet.canvas.clear_rect.call(null, ctx, html.canvas.extent.call(null, ctx));
};
html.canvas.image = function image(ctx, img, p__8492) {
  var map__8494 = p__8492;
  var map__8494__$1 = cljs.core.seq_QMARK_.call(null, map__8494) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8494) : map__8494;
  var y = cljs.core.get.call(null, map__8494__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__8494__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.drawImage(img, x, y);
  return ctx;
};
goog.provide("dommy.attrs");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.attrs.class_match_QMARK_ = function class_match_QMARK_(class_name, class$, idx) {
  var and__3565__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__3565__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__3565__auto__;
  }
};
dommy.attrs.class_index = function class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.attrs.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__10677 = i + class$.length;
        start_from = G__10677;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.attrs.has_class_QMARK_ = function has_class_QMARK_(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = cljs.core.name.call(null, class$);
  var temp__4124__auto__ = elem__$1.classList;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var class_list = temp__4124__auto__;
    return class_list.contains(class$__$1);
  } else {
    var temp__4126__auto__ = elem__$1.className;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var class_name = temp__4126__auto__;
      var temp__4126__auto____$1 = dommy.attrs.class_index.call(null, class_name, class$__$1);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var i = temp__4126__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.attrs.add_class_BANG_ = function() {
  var add_class_BANG_ = null;
  var add_class_BANG___2 = function(elem, classes) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var classes__$1 = clojure.string.trim.call(null, cljs.core.name.call(null, classes));
    if (cljs.core.seq.call(null, classes__$1)) {
      var temp__4124__auto___10702 = elem__$1.classList;
      if (cljs.core.truth_(temp__4124__auto___10702)) {
        var class_list_10703 = temp__4124__auto___10702;
        var seq__10690_10704 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__10691_10705 = null;
        var count__10692_10706 = 0;
        var i__10693_10707 = 0;
        while (true) {
          if (i__10693_10707 < count__10692_10706) {
            var class_10708 = cljs.core._nth.call(null, chunk__10691_10705, i__10693_10707);
            class_list_10703.add(class_10708);
            var G__10709 = seq__10690_10704;
            var G__10710 = chunk__10691_10705;
            var G__10711 = count__10692_10706;
            var G__10712 = i__10693_10707 + 1;
            seq__10690_10704 = G__10709;
            chunk__10691_10705 = G__10710;
            count__10692_10706 = G__10711;
            i__10693_10707 = G__10712;
            continue;
          } else {
            var temp__4126__auto___10713 = cljs.core.seq.call(null, seq__10690_10704);
            if (temp__4126__auto___10713) {
              var seq__10690_10714__$1 = temp__4126__auto___10713;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__10690_10714__$1)) {
                var c__4333__auto___10715 = cljs.core.chunk_first.call(null, seq__10690_10714__$1);
                var G__10716 = cljs.core.chunk_rest.call(null, seq__10690_10714__$1);
                var G__10717 = c__4333__auto___10715;
                var G__10718 = cljs.core.count.call(null, c__4333__auto___10715);
                var G__10719 = 0;
                seq__10690_10704 = G__10716;
                chunk__10691_10705 = G__10717;
                count__10692_10706 = G__10718;
                i__10693_10707 = G__10719;
                continue;
              } else {
                var class_10720 = cljs.core.first.call(null, seq__10690_10714__$1);
                class_list_10703.add(class_10720);
                var G__10721 = cljs.core.next.call(null, seq__10690_10714__$1);
                var G__10722 = null;
                var G__10723 = 0;
                var G__10724 = 0;
                seq__10690_10704 = G__10721;
                chunk__10691_10705 = G__10722;
                count__10692_10706 = G__10723;
                i__10693_10707 = G__10724;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        var class_name_10725 = elem__$1.className;
        var seq__10694_10726 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__10695_10727 = null;
        var count__10696_10728 = 0;
        var i__10697_10729 = 0;
        while (true) {
          if (i__10697_10729 < count__10696_10728) {
            var class_10730 = cljs.core._nth.call(null, chunk__10695_10727, i__10697_10729);
            if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_10725, class_10730))) {
            } else {
              elem__$1.className = class_name_10725 === "" ? class_10730 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_10725) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_10730);
            }
            var G__10731 = seq__10694_10726;
            var G__10732 = chunk__10695_10727;
            var G__10733 = count__10696_10728;
            var G__10734 = i__10697_10729 + 1;
            seq__10694_10726 = G__10731;
            chunk__10695_10727 = G__10732;
            count__10696_10728 = G__10733;
            i__10697_10729 = G__10734;
            continue;
          } else {
            var temp__4126__auto___10735 = cljs.core.seq.call(null, seq__10694_10726);
            if (temp__4126__auto___10735) {
              var seq__10694_10736__$1 = temp__4126__auto___10735;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__10694_10736__$1)) {
                var c__4333__auto___10737 = cljs.core.chunk_first.call(null, seq__10694_10736__$1);
                var G__10738 = cljs.core.chunk_rest.call(null, seq__10694_10736__$1);
                var G__10739 = c__4333__auto___10737;
                var G__10740 = cljs.core.count.call(null, c__4333__auto___10737);
                var G__10741 = 0;
                seq__10694_10726 = G__10738;
                chunk__10695_10727 = G__10739;
                count__10696_10728 = G__10740;
                i__10697_10729 = G__10741;
                continue;
              } else {
                var class_10742 = cljs.core.first.call(null, seq__10694_10736__$1);
                if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_10725, class_10742))) {
                } else {
                  elem__$1.className = class_name_10725 === "" ? class_10742 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_10725) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_10742);
                }
                var G__10743 = cljs.core.next.call(null, seq__10694_10736__$1);
                var G__10744 = null;
                var G__10745 = 0;
                var G__10746 = 0;
                seq__10694_10726 = G__10743;
                chunk__10695_10727 = G__10744;
                count__10696_10728 = G__10745;
                i__10697_10729 = G__10746;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
    } else {
    }
    return elem__$1;
  };
  var add_class_BANG___3 = function() {
    var G__10747__delegate = function(elem, classes, more_classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__10698_10748 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
      var chunk__10699_10749 = null;
      var count__10700_10750 = 0;
      var i__10701_10751 = 0;
      while (true) {
        if (i__10701_10751 < count__10700_10750) {
          var c_10752 = cljs.core._nth.call(null, chunk__10699_10749, i__10701_10751);
          add_class_BANG_.call(null, elem__$1, c_10752);
          var G__10753 = seq__10698_10748;
          var G__10754 = chunk__10699_10749;
          var G__10755 = count__10700_10750;
          var G__10756 = i__10701_10751 + 1;
          seq__10698_10748 = G__10753;
          chunk__10699_10749 = G__10754;
          count__10700_10750 = G__10755;
          i__10701_10751 = G__10756;
          continue;
        } else {
          var temp__4126__auto___10757 = cljs.core.seq.call(null, seq__10698_10748);
          if (temp__4126__auto___10757) {
            var seq__10698_10758__$1 = temp__4126__auto___10757;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10698_10758__$1)) {
              var c__4333__auto___10759 = cljs.core.chunk_first.call(null, seq__10698_10758__$1);
              var G__10760 = cljs.core.chunk_rest.call(null, seq__10698_10758__$1);
              var G__10761 = c__4333__auto___10759;
              var G__10762 = cljs.core.count.call(null, c__4333__auto___10759);
              var G__10763 = 0;
              seq__10698_10748 = G__10760;
              chunk__10699_10749 = G__10761;
              count__10700_10750 = G__10762;
              i__10701_10751 = G__10763;
              continue;
            } else {
              var c_10764 = cljs.core.first.call(null, seq__10698_10758__$1);
              add_class_BANG_.call(null, elem__$1, c_10764);
              var G__10765 = cljs.core.next.call(null, seq__10698_10758__$1);
              var G__10766 = null;
              var G__10767 = 0;
              var G__10768 = 0;
              seq__10698_10748 = G__10765;
              chunk__10699_10749 = G__10766;
              count__10700_10750 = G__10767;
              i__10701_10751 = G__10768;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__10747 = function(elem, classes, var_args) {
      var more_classes = null;
      if (arguments.length > 2) {
        more_classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__10747__delegate.call(this, elem, classes, more_classes);
    };
    G__10747.cljs$lang$maxFixedArity = 2;
    G__10747.cljs$lang$applyTo = function(arglist__10769) {
      var elem = cljs.core.first(arglist__10769);
      arglist__10769 = cljs.core.next(arglist__10769);
      var classes = cljs.core.first(arglist__10769);
      var more_classes = cljs.core.rest(arglist__10769);
      return G__10747__delegate(elem, classes, more_classes);
    };
    G__10747.cljs$core$IFn$_invoke$arity$variadic = G__10747__delegate;
    return G__10747;
  }();
  add_class_BANG_ = function(elem, classes, var_args) {
    var more_classes = var_args;
    switch(arguments.length) {
      case 2:
        return add_class_BANG___2.call(this, elem, classes);
      default:
        return add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, classes, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_class_BANG_.cljs$lang$maxFixedArity = 2;
  add_class_BANG_.cljs$lang$applyTo = add_class_BANG___3.cljs$lang$applyTo;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = add_class_BANG___2;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return add_class_BANG_;
}();
dommy.attrs.remove_class_str = function remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4124__auto__ = dommy.attrs.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var i = temp__4124__auto__;
      var G__10770 = function() {
        var end = i + class$.length;
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(end < class_len ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substring(0, i)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substr(end + 1)) : class_name.substring(0, i - 1));
      }();
      class_name = G__10770;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_ = function() {
  var remove_class_BANG_ = null;
  var remove_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___10779 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___10779)) {
      var class_list_10780 = temp__4124__auto___10779;
      class_list_10780.remove(class$__$1);
    } else {
      var class_name_10781 = elem__$1.className;
      var new_class_name_10782 = dommy.attrs.remove_class_str.call(null, class_name_10781, class$__$1);
      if (class_name_10781 === new_class_name_10782) {
      } else {
        elem__$1.className = new_class_name_10782;
      }
    }
    return elem__$1;
  };
  var remove_class_BANG___3 = function() {
    var G__10783__delegate = function(elem, class$, classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__10775 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
      var chunk__10776 = null;
      var count__10777 = 0;
      var i__10778 = 0;
      while (true) {
        if (i__10778 < count__10777) {
          var c = cljs.core._nth.call(null, chunk__10776, i__10778);
          remove_class_BANG_.call(null, elem__$1, c);
          var G__10784 = seq__10775;
          var G__10785 = chunk__10776;
          var G__10786 = count__10777;
          var G__10787 = i__10778 + 1;
          seq__10775 = G__10784;
          chunk__10776 = G__10785;
          count__10777 = G__10786;
          i__10778 = G__10787;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__10775);
          if (temp__4126__auto__) {
            var seq__10775__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10775__$1)) {
              var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__10775__$1);
              var G__10788 = cljs.core.chunk_rest.call(null, seq__10775__$1);
              var G__10789 = c__4333__auto__;
              var G__10790 = cljs.core.count.call(null, c__4333__auto__);
              var G__10791 = 0;
              seq__10775 = G__10788;
              chunk__10776 = G__10789;
              count__10777 = G__10790;
              i__10778 = G__10791;
              continue;
            } else {
              var c = cljs.core.first.call(null, seq__10775__$1);
              remove_class_BANG_.call(null, elem__$1, c);
              var G__10792 = cljs.core.next.call(null, seq__10775__$1);
              var G__10793 = null;
              var G__10794 = 0;
              var G__10795 = 0;
              seq__10775 = G__10792;
              chunk__10776 = G__10793;
              count__10777 = G__10794;
              i__10778 = G__10795;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
    var G__10783 = function(elem, class$, var_args) {
      var classes = null;
      if (arguments.length > 2) {
        classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__10783__delegate.call(this, elem, class$, classes);
    };
    G__10783.cljs$lang$maxFixedArity = 2;
    G__10783.cljs$lang$applyTo = function(arglist__10796) {
      var elem = cljs.core.first(arglist__10796);
      arglist__10796 = cljs.core.next(arglist__10796);
      var class$ = cljs.core.first(arglist__10796);
      var classes = cljs.core.rest(arglist__10796);
      return G__10783__delegate(elem, class$, classes);
    };
    G__10783.cljs$core$IFn$_invoke$arity$variadic = G__10783__delegate;
    return G__10783;
  }();
  remove_class_BANG_ = function(elem, class$, var_args) {
    var classes = var_args;
    switch(arguments.length) {
      case 2:
        return remove_class_BANG___2.call(this, elem, class$);
      default:
        return remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, class$, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_class_BANG_.cljs$lang$maxFixedArity = 2;
  remove_class_BANG_.cljs$lang$applyTo = remove_class_BANG___3.cljs$lang$applyTo;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_class_BANG___2;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_class_BANG_;
}();
dommy.attrs.toggle_class_BANG_ = function() {
  var toggle_class_BANG_ = null;
  var toggle_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = cljs.core.name.call(null, class$);
    var temp__4124__auto___10797 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___10797)) {
      var class_list_10798 = temp__4124__auto___10797;
      class_list_10798.toggle(class$__$1);
    } else {
      toggle_class_BANG_.call(null, elem__$1, class$__$1, !dommy.attrs.has_class_QMARK_.call(null, elem__$1, class$__$1));
    }
    return elem__$1;
  };
  var toggle_class_BANG___3 = function(elem, class$, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      dommy.attrs.add_class_BANG_.call(null, elem__$1, class$);
    } else {
      dommy.attrs.remove_class_BANG_.call(null, elem__$1, class$);
    }
    return elem__$1;
  };
  toggle_class_BANG_ = function(elem, class$, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_class_BANG___2.call(this, elem, class$);
      case 3:
        return toggle_class_BANG___3.call(this, elem, class$, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_class_BANG___2;
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_class_BANG___3;
  return toggle_class_BANG_;
}();
dommy.attrs.style_str = function style_str(x) {
  if (typeof x === "string") {
    return x;
  } else {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, function(p__10801) {
      var vec__10802 = p__10801;
      var k = cljs.core.nth.call(null, vec__10802, 0, null);
      var v = cljs.core.nth.call(null, vec__10802, 1, null);
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, k)) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, v)) + ";";
    }, x));
  }
};
dommy.attrs.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var style = elem__$1.style;
    var seq__10809_10815 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__10810_10816 = null;
    var count__10811_10817 = 0;
    var i__10812_10818 = 0;
    while (true) {
      if (i__10812_10818 < count__10811_10817) {
        var vec__10813_10819 = cljs.core._nth.call(null, chunk__10810_10816, i__10812_10818);
        var k_10820 = cljs.core.nth.call(null, vec__10813_10819, 0, null);
        var v_10821 = cljs.core.nth.call(null, vec__10813_10819, 1, null);
        style[cljs.core.name.call(null, k_10820)] = v_10821;
        var G__10822 = seq__10809_10815;
        var G__10823 = chunk__10810_10816;
        var G__10824 = count__10811_10817;
        var G__10825 = i__10812_10818 + 1;
        seq__10809_10815 = G__10822;
        chunk__10810_10816 = G__10823;
        count__10811_10817 = G__10824;
        i__10812_10818 = G__10825;
        continue;
      } else {
        var temp__4126__auto___10826 = cljs.core.seq.call(null, seq__10809_10815);
        if (temp__4126__auto___10826) {
          var seq__10809_10827__$1 = temp__4126__auto___10826;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10809_10827__$1)) {
            var c__4333__auto___10828 = cljs.core.chunk_first.call(null, seq__10809_10827__$1);
            var G__10829 = cljs.core.chunk_rest.call(null, seq__10809_10827__$1);
            var G__10830 = c__4333__auto___10828;
            var G__10831 = cljs.core.count.call(null, c__4333__auto___10828);
            var G__10832 = 0;
            seq__10809_10815 = G__10829;
            chunk__10810_10816 = G__10830;
            count__10811_10817 = G__10831;
            i__10812_10818 = G__10832;
            continue;
          } else {
            var vec__10814_10833 = cljs.core.first.call(null, seq__10809_10827__$1);
            var k_10834 = cljs.core.nth.call(null, vec__10814_10833, 0, null);
            var v_10835 = cljs.core.nth.call(null, vec__10814_10833, 1, null);
            style[cljs.core.name.call(null, k_10834)] = v_10835;
            var G__10836 = cljs.core.next.call(null, seq__10809_10827__$1);
            var G__10837 = null;
            var G__10838 = 0;
            var G__10839 = 0;
            seq__10809_10815 = G__10836;
            chunk__10810_10816 = G__10837;
            count__10811_10817 = G__10838;
            i__10812_10818 = G__10839;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_style_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_style_BANG___delegate.call(this, elem, kvs);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 1;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__10840) {
    var elem = cljs.core.first(arglist__10840);
    var kvs = cljs.core.rest(arglist__10840);
    return set_style_BANG___delegate(elem, kvs);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
dommy.attrs.style = function style(elem, k) {
  if (cljs.core.truth_(k)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "k", "k", -1640531420, null))));
  }
  return window.getComputedStyle(dommy.template.__GT_node_like.call(null, elem))[cljs.core.name.call(null, k)];
};
dommy.attrs.set_px_BANG_ = function() {
  var set_px_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var seq__10847_10853 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__10848_10854 = null;
    var count__10849_10855 = 0;
    var i__10850_10856 = 0;
    while (true) {
      if (i__10850_10856 < count__10849_10855) {
        var vec__10851_10857 = cljs.core._nth.call(null, chunk__10848_10854, i__10850_10856);
        var k_10858 = cljs.core.nth.call(null, vec__10851_10857, 0, null);
        var v_10859 = cljs.core.nth.call(null, vec__10851_10857, 1, null);
        dommy.attrs.set_style_BANG_.call(null, elem__$1, k_10858, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_10859) + "px");
        var G__10860 = seq__10847_10853;
        var G__10861 = chunk__10848_10854;
        var G__10862 = count__10849_10855;
        var G__10863 = i__10850_10856 + 1;
        seq__10847_10853 = G__10860;
        chunk__10848_10854 = G__10861;
        count__10849_10855 = G__10862;
        i__10850_10856 = G__10863;
        continue;
      } else {
        var temp__4126__auto___10864 = cljs.core.seq.call(null, seq__10847_10853);
        if (temp__4126__auto___10864) {
          var seq__10847_10865__$1 = temp__4126__auto___10864;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10847_10865__$1)) {
            var c__4333__auto___10866 = cljs.core.chunk_first.call(null, seq__10847_10865__$1);
            var G__10867 = cljs.core.chunk_rest.call(null, seq__10847_10865__$1);
            var G__10868 = c__4333__auto___10866;
            var G__10869 = cljs.core.count.call(null, c__4333__auto___10866);
            var G__10870 = 0;
            seq__10847_10853 = G__10867;
            chunk__10848_10854 = G__10868;
            count__10849_10855 = G__10869;
            i__10850_10856 = G__10870;
            continue;
          } else {
            var vec__10852_10871 = cljs.core.first.call(null, seq__10847_10865__$1);
            var k_10872 = cljs.core.nth.call(null, vec__10852_10871, 0, null);
            var v_10873 = cljs.core.nth.call(null, vec__10852_10871, 1, null);
            dommy.attrs.set_style_BANG_.call(null, elem__$1, k_10872, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_10873) + "px");
            var G__10874 = cljs.core.next.call(null, seq__10847_10865__$1);
            var G__10875 = null;
            var G__10876 = 0;
            var G__10877 = 0;
            seq__10847_10853 = G__10874;
            chunk__10848_10854 = G__10875;
            count__10849_10855 = G__10876;
            i__10850_10856 = G__10877;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_px_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_px_BANG___delegate.call(this, elem, kvs);
  };
  set_px_BANG_.cljs$lang$maxFixedArity = 1;
  set_px_BANG_.cljs$lang$applyTo = function(arglist__10878) {
    var elem = cljs.core.first(arglist__10878);
    var kvs = cljs.core.rest(arglist__10878);
    return set_px_BANG___delegate(elem, kvs);
  };
  set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_px_BANG___delegate;
  return set_px_BANG_;
}();
dommy.attrs.px = function px(elem, k) {
  var pixels = dommy.attrs.style.call(null, dommy.template.__GT_node_like.call(null, elem), k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_ = function() {
  var set_attr_BANG_ = null;
  var set_attr_BANG___2 = function(elem, k) {
    return set_attr_BANG_.call(null, dommy.template.__GT_node_like.call(null, elem), k, "true");
  };
  var set_attr_BANG___3 = function(elem, k, v) {
    if (cljs.core.truth_(v)) {
      if (cljs.core.fn_QMARK_.call(null, v)) {
        var G__10887 = dommy.template.__GT_node_like.call(null, elem);
        G__10887[cljs.core.name.call(null, k)] = v;
        return G__10887;
      } else {
        var G__10888 = dommy.template.__GT_node_like.call(null, elem);
        G__10888.setAttribute(cljs.core.name.call(null, k), k === new cljs.core.Keyword(null, "style", "style", 1123684643) ? dommy.attrs.style_str.call(null, v) : v);
        return G__10888;
      }
    } else {
      return null;
    }
  };
  var set_attr_BANG___4 = function() {
    var G__10895__delegate = function(elem, k, v, kvs) {
      if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null))))));
      }
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__10889_10896 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
      var chunk__10890_10897 = null;
      var count__10891_10898 = 0;
      var i__10892_10899 = 0;
      while (true) {
        if (i__10892_10899 < count__10891_10898) {
          var vec__10893_10900 = cljs.core._nth.call(null, chunk__10890_10897, i__10892_10899);
          var k_10901__$1 = cljs.core.nth.call(null, vec__10893_10900, 0, null);
          var v_10902__$1 = cljs.core.nth.call(null, vec__10893_10900, 1, null);
          set_attr_BANG_.call(null, elem__$1, k_10901__$1, v_10902__$1);
          var G__10903 = seq__10889_10896;
          var G__10904 = chunk__10890_10897;
          var G__10905 = count__10891_10898;
          var G__10906 = i__10892_10899 + 1;
          seq__10889_10896 = G__10903;
          chunk__10890_10897 = G__10904;
          count__10891_10898 = G__10905;
          i__10892_10899 = G__10906;
          continue;
        } else {
          var temp__4126__auto___10907 = cljs.core.seq.call(null, seq__10889_10896);
          if (temp__4126__auto___10907) {
            var seq__10889_10908__$1 = temp__4126__auto___10907;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10889_10908__$1)) {
              var c__4333__auto___10909 = cljs.core.chunk_first.call(null, seq__10889_10908__$1);
              var G__10910 = cljs.core.chunk_rest.call(null, seq__10889_10908__$1);
              var G__10911 = c__4333__auto___10909;
              var G__10912 = cljs.core.count.call(null, c__4333__auto___10909);
              var G__10913 = 0;
              seq__10889_10896 = G__10910;
              chunk__10890_10897 = G__10911;
              count__10891_10898 = G__10912;
              i__10892_10899 = G__10913;
              continue;
            } else {
              var vec__10894_10914 = cljs.core.first.call(null, seq__10889_10908__$1);
              var k_10915__$1 = cljs.core.nth.call(null, vec__10894_10914, 0, null);
              var v_10916__$1 = cljs.core.nth.call(null, vec__10894_10914, 1, null);
              set_attr_BANG_.call(null, elem__$1, k_10915__$1, v_10916__$1);
              var G__10917 = cljs.core.next.call(null, seq__10889_10908__$1);
              var G__10918 = null;
              var G__10919 = 0;
              var G__10920 = 0;
              seq__10889_10896 = G__10917;
              chunk__10890_10897 = G__10918;
              count__10891_10898 = G__10919;
              i__10892_10899 = G__10920;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__10895 = function(elem, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__10895__delegate.call(this, elem, k, v, kvs);
    };
    G__10895.cljs$lang$maxFixedArity = 3;
    G__10895.cljs$lang$applyTo = function(arglist__10921) {
      var elem = cljs.core.first(arglist__10921);
      arglist__10921 = cljs.core.next(arglist__10921);
      var k = cljs.core.first(arglist__10921);
      arglist__10921 = cljs.core.next(arglist__10921);
      var v = cljs.core.first(arglist__10921);
      var kvs = cljs.core.rest(arglist__10921);
      return G__10895__delegate(elem, k, v, kvs);
    };
    G__10895.cljs$core$IFn$_invoke$arity$variadic = G__10895__delegate;
    return G__10895;
  }();
  set_attr_BANG_ = function(elem, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 2:
        return set_attr_BANG___2.call(this, elem, k);
      case 3:
        return set_attr_BANG___3.call(this, elem, k, v);
      default:
        return set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic(elem, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 3;
  set_attr_BANG_.cljs$lang$applyTo = set_attr_BANG___4.cljs$lang$applyTo;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_attr_BANG___2;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_attr_BANG___3;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return set_attr_BANG_;
}();
dommy.attrs.remove_attr_BANG_ = function() {
  var remove_attr_BANG_ = null;
  var remove_attr_BANG___2 = function(elem, k) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", 1108647146), null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), null], null), null)).call(null, k))) {
      elem__$1.className = "";
    } else {
      elem__$1.removeAttribute(cljs.core.name.call(null, k));
    }
    return elem__$1;
  };
  var remove_attr_BANG___3 = function() {
    var G__10930__delegate = function(elem, k, ks) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__10926_10931 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
      var chunk__10927_10932 = null;
      var count__10928_10933 = 0;
      var i__10929_10934 = 0;
      while (true) {
        if (i__10929_10934 < count__10928_10933) {
          var k_10935__$1 = cljs.core._nth.call(null, chunk__10927_10932, i__10929_10934);
          remove_attr_BANG_.call(null, elem__$1, k_10935__$1);
          var G__10936 = seq__10926_10931;
          var G__10937 = chunk__10927_10932;
          var G__10938 = count__10928_10933;
          var G__10939 = i__10929_10934 + 1;
          seq__10926_10931 = G__10936;
          chunk__10927_10932 = G__10937;
          count__10928_10933 = G__10938;
          i__10929_10934 = G__10939;
          continue;
        } else {
          var temp__4126__auto___10940 = cljs.core.seq.call(null, seq__10926_10931);
          if (temp__4126__auto___10940) {
            var seq__10926_10941__$1 = temp__4126__auto___10940;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10926_10941__$1)) {
              var c__4333__auto___10942 = cljs.core.chunk_first.call(null, seq__10926_10941__$1);
              var G__10943 = cljs.core.chunk_rest.call(null, seq__10926_10941__$1);
              var G__10944 = c__4333__auto___10942;
              var G__10945 = cljs.core.count.call(null, c__4333__auto___10942);
              var G__10946 = 0;
              seq__10926_10931 = G__10943;
              chunk__10927_10932 = G__10944;
              count__10928_10933 = G__10945;
              i__10929_10934 = G__10946;
              continue;
            } else {
              var k_10947__$1 = cljs.core.first.call(null, seq__10926_10941__$1);
              remove_attr_BANG_.call(null, elem__$1, k_10947__$1);
              var G__10948 = cljs.core.next.call(null, seq__10926_10941__$1);
              var G__10949 = null;
              var G__10950 = 0;
              var G__10951 = 0;
              seq__10926_10931 = G__10948;
              chunk__10927_10932 = G__10949;
              count__10928_10933 = G__10950;
              i__10929_10934 = G__10951;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__10930 = function(elem, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__10930__delegate.call(this, elem, k, ks);
    };
    G__10930.cljs$lang$maxFixedArity = 2;
    G__10930.cljs$lang$applyTo = function(arglist__10952) {
      var elem = cljs.core.first(arglist__10952);
      arglist__10952 = cljs.core.next(arglist__10952);
      var k = cljs.core.first(arglist__10952);
      var ks = cljs.core.rest(arglist__10952);
      return G__10930__delegate(elem, k, ks);
    };
    G__10930.cljs$core$IFn$_invoke$arity$variadic = G__10930__delegate;
    return G__10930;
  }();
  remove_attr_BANG_ = function(elem, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return remove_attr_BANG___2.call(this, elem, k);
      default:
        return remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
  remove_attr_BANG_.cljs$lang$applyTo = remove_attr_BANG___3.cljs$lang$applyTo;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_attr_BANG___2;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_attr_BANG_;
}();
dommy.attrs.attr = function attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return dommy.template.__GT_node_like.call(null, elem).getAttribute(cljs.core.name.call(null, k));
  } else {
    return null;
  }
};
dommy.attrs.toggle_attr_BANG_ = function() {
  var toggle_attr_BANG_ = null;
  var toggle_attr_BANG___2 = function(elem, k) {
    return toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.attrs.attr.call(null, elem, k)));
  };
  var toggle_attr_BANG___3 = function(elem, k, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      return dommy.attrs.set_attr_BANG_.call(null, elem__$1, k);
    } else {
      return dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k);
    }
  };
  toggle_attr_BANG_ = function(elem, k, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_attr_BANG___2.call(this, elem, k);
      case 3:
        return toggle_attr_BANG___3.call(this, elem, k, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_attr_BANG___2;
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_attr_BANG___3;
  return toggle_attr_BANG_;
}();
dommy.attrs.hidden_QMARK_ = function hidden_QMARK_(elem) {
  return "none" === dommy.template.__GT_node_like.call(null, elem).style.display;
};
dommy.attrs.toggle_BANG_ = function() {
  var toggle_BANG_ = null;
  var toggle_BANG___1 = function(elem) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    toggle_BANG_.call(null, elem__$1, dommy.attrs.hidden_QMARK_.call(null, elem__$1));
    return elem__$1;
  };
  var toggle_BANG___2 = function(elem, show_QMARK_) {
    var G__10954 = dommy.template.__GT_node_like.call(null, elem);
    G__10954.style.display = show_QMARK_ ? "" : "none";
    return G__10954;
  };
  toggle_BANG_ = function(elem, show_QMARK_) {
    switch(arguments.length) {
      case 1:
        return toggle_BANG___1.call(this, elem);
      case 2:
        return toggle_BANG___2.call(this, elem, show_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = toggle_BANG___1;
  toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_BANG___2;
  return toggle_BANG_;
}();
dommy.attrs.hide_BANG_ = function hide_BANG_(elem) {
  var G__10956 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__10956, false);
  return G__10956;
};
dommy.attrs.show_BANG_ = function show_BANG_(elem) {
  var G__10958 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__10958, true);
  return G__10958;
};
dommy.attrs.bounding_client_rect = function bounding_client_rect(elem) {
  return cljs.core.js__GT_clj.call(null, function() {
    var G__10960 = dommy.template.__GT_node_like.call(null, elem).getBoundingClientRect();
    G__10960["constructor"] = Object;
    return G__10960;
  }(), new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), true);
};
dommy.attrs.scroll_into_view = function scroll_into_view(elem, align_with_top_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var top = (new cljs.core.Keyword(null, "top", "top", 1014019271)).cljs$core$IFn$_invoke$arity$1(dommy.attrs.bounding_client_rect.call(null, elem__$1));
  if (window.innerHeight < top + elem__$1.offsetHeight) {
    return elem__$1.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
goog.provide("dommy.template");
goog.require("cljs.core");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.template._PLUS_svg_ns_PLUS_ = "http://www.w3.org/2000/svg";
dommy.template._PLUS_svg_tags_PLUS_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["svg", null, "line", null], null), null);
dommy.template.PElement = function() {
  var obj10962 = {};
  return obj10962;
}();
dommy.template._elem = function _elem(this$) {
  if (function() {
    var and__3565__auto__ = this$;
    if (and__3565__auto__) {
      return this$.dommy$template$PElement$_elem$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return this$.dommy$template$PElement$_elem$arity$1(this$);
  } else {
    var x__4204__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3577__auto__ = dommy.template._elem[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = dommy.template._elem["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PElement.-elem", this$);
        }
      }
    }().call(null, this$);
  }
};
dommy.template.next_css_index = function next_css_index(s, start_idx) {
  var id_idx = s.indexOf("#", start_idx);
  var class_idx = s.indexOf(".", start_idx);
  var idx = Math.min(id_idx, class_idx);
  if (idx < 0) {
    return Math.max(id_idx, class_idx);
  } else {
    return idx;
  }
};
dommy.template.base_element = function base_element(node_key) {
  var node_str = cljs.core.name.call(null, node_key);
  var base_idx = dommy.template.next_css_index.call(null, node_str, 0);
  var tag = base_idx > 0 ? node_str.substring(0, base_idx) : base_idx === 0 ? "div" : new cljs.core.Keyword(null, "else", "else", 1017020587) ? node_str : null;
  var node = cljs.core.truth_(dommy.template._PLUS_svg_tags_PLUS_.call(null, tag)) ? document.createElementNS(dommy.template._PLUS_svg_ns_PLUS_, tag) : document.createElement(tag);
  if (base_idx >= 0) {
    var str_10965 = node_str.substring(base_idx);
    while (true) {
      var next_idx_10966 = dommy.template.next_css_index.call(null, str_10965, 1);
      var frag_10967 = next_idx_10966 >= 0 ? str_10965.substring(0, next_idx_10966) : str_10965;
      var G__10964_10968 = frag_10967.charAt(0);
      if (cljs.core._EQ_.call(null, "#", G__10964_10968)) {
        node.setAttribute("id", frag_10967.substring(1));
      } else {
        if (cljs.core._EQ_.call(null, ".", G__10964_10968)) {
          dommy.attrs.add_class_BANG_.call(null, node, frag_10967.substring(1));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(frag_10967.charAt(0)));
          } else {
          }
        }
      }
      if (next_idx_10966 >= 0) {
        var G__10969 = str_10965.substring(next_idx_10966);
        str_10965 = G__10969;
        continue;
      } else {
      }
      break;
    }
  } else {
  }
  return node;
};
dommy.template.throw_unable_to_make_node = function throw_unable_to_make_node(node_data) {
  throw "Don't know how to make node from: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, node_data));
};
dommy.template.__GT_document_fragment = function() {
  var __GT_document_fragment = null;
  var __GT_document_fragment__1 = function(data) {
    return __GT_document_fragment.call(null, document.createDocumentFragment(), data);
  };
  var __GT_document_fragment__2 = function(result_frag, data) {
    if (function() {
      var G__10975 = data;
      if (G__10975) {
        var bit__4227__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3577__auto__ = bit__4227__auto__;
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return G__10975.dommy$template$PElement$;
          }
        }())) {
          return true;
        } else {
          if (!G__10975.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10975);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__10975);
      }
    }()) {
      result_frag.appendChild(dommy.template._elem.call(null, data));
      return result_frag;
    } else {
      if (cljs.core.seq_QMARK_.call(null, data)) {
        var seq__10976_10980 = cljs.core.seq.call(null, data);
        var chunk__10977_10981 = null;
        var count__10978_10982 = 0;
        var i__10979_10983 = 0;
        while (true) {
          if (i__10979_10983 < count__10978_10982) {
            var child_10984 = cljs.core._nth.call(null, chunk__10977_10981, i__10979_10983);
            __GT_document_fragment.call(null, result_frag, child_10984);
            var G__10985 = seq__10976_10980;
            var G__10986 = chunk__10977_10981;
            var G__10987 = count__10978_10982;
            var G__10988 = i__10979_10983 + 1;
            seq__10976_10980 = G__10985;
            chunk__10977_10981 = G__10986;
            count__10978_10982 = G__10987;
            i__10979_10983 = G__10988;
            continue;
          } else {
            var temp__4126__auto___10989 = cljs.core.seq.call(null, seq__10976_10980);
            if (temp__4126__auto___10989) {
              var seq__10976_10990__$1 = temp__4126__auto___10989;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__10976_10990__$1)) {
                var c__4333__auto___10991 = cljs.core.chunk_first.call(null, seq__10976_10990__$1);
                var G__10992 = cljs.core.chunk_rest.call(null, seq__10976_10990__$1);
                var G__10993 = c__4333__auto___10991;
                var G__10994 = cljs.core.count.call(null, c__4333__auto___10991);
                var G__10995 = 0;
                seq__10976_10980 = G__10992;
                chunk__10977_10981 = G__10993;
                count__10978_10982 = G__10994;
                i__10979_10983 = G__10995;
                continue;
              } else {
                var child_10996 = cljs.core.first.call(null, seq__10976_10990__$1);
                __GT_document_fragment.call(null, result_frag, child_10996);
                var G__10997 = cljs.core.next.call(null, seq__10976_10990__$1);
                var G__10998 = null;
                var G__10999 = 0;
                var G__11000 = 0;
                seq__10976_10980 = G__10997;
                chunk__10977_10981 = G__10998;
                count__10978_10982 = G__10999;
                i__10979_10983 = G__11000;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return result_frag;
      } else {
        if (data == null) {
          return result_frag;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return dommy.template.throw_unable_to_make_node.call(null, data);
          } else {
            return null;
          }
        }
      }
    }
  };
  __GT_document_fragment = function(result_frag, data) {
    switch(arguments.length) {
      case 1:
        return __GT_document_fragment__1.call(this, result_frag);
      case 2:
        return __GT_document_fragment__2.call(this, result_frag, data);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$1 = __GT_document_fragment__1;
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$2 = __GT_document_fragment__2;
  return __GT_document_fragment;
}();
dommy.template.__GT_node_like = function __GT_node_like(data) {
  if (function() {
    var G__11002 = data;
    if (G__11002) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto__ = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return G__11002.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__11002.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11002);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11002);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.__GT_document_fragment.call(null, data);
  }
};
dommy.template.compound_element = function compound_element(p__11003) {
  var vec__11023 = p__11003;
  var tag_name = cljs.core.nth.call(null, vec__11023, 0, null);
  var maybe_attrs = cljs.core.nth.call(null, vec__11023, 1, null);
  var children = cljs.core.nthnext.call(null, vec__11023, 2);
  var n = dommy.template.base_element.call(null, tag_name);
  var attrs = cljs.core.map_QMARK_.call(null, maybe_attrs) && !function() {
    var G__11025 = maybe_attrs;
    if (G__11025) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto__ = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return G__11025.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__11025.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11025);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11025);
    }
  }() ? maybe_attrs : null;
  var children__$1 = cljs.core.truth_(attrs) ? children : cljs.core.cons.call(null, maybe_attrs, children);
  var seq__11026_11042 = cljs.core.seq.call(null, attrs);
  var chunk__11027_11043 = null;
  var count__11028_11044 = 0;
  var i__11029_11045 = 0;
  while (true) {
    if (i__11029_11045 < count__11028_11044) {
      var vec__11030_11046 = cljs.core._nth.call(null, chunk__11027_11043, i__11029_11045);
      var k_11047 = cljs.core.nth.call(null, vec__11030_11046, 0, null);
      var v_11048 = cljs.core.nth.call(null, vec__11030_11046, 1, null);
      var G__11031_11049 = k_11047 instanceof cljs.core.Keyword ? k_11047.fqn : null;
      switch(G__11031_11049) {
        case "classes":
          var seq__11032_11051 = cljs.core.seq.call(null, v_11048);
          var chunk__11033_11052 = null;
          var count__11034_11053 = 0;
          var i__11035_11054 = 0;
          while (true) {
            if (i__11035_11054 < count__11034_11053) {
              var c_11055 = cljs.core._nth.call(null, chunk__11033_11052, i__11035_11054);
              dommy.attrs.add_class_BANG_.call(null, n, c_11055);
              var G__11056 = seq__11032_11051;
              var G__11057 = chunk__11033_11052;
              var G__11058 = count__11034_11053;
              var G__11059 = i__11035_11054 + 1;
              seq__11032_11051 = G__11056;
              chunk__11033_11052 = G__11057;
              count__11034_11053 = G__11058;
              i__11035_11054 = G__11059;
              continue;
            } else {
              var temp__4126__auto___11060 = cljs.core.seq.call(null, seq__11032_11051);
              if (temp__4126__auto___11060) {
                var seq__11032_11061__$1 = temp__4126__auto___11060;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__11032_11061__$1)) {
                  var c__4333__auto___11062 = cljs.core.chunk_first.call(null, seq__11032_11061__$1);
                  var G__11063 = cljs.core.chunk_rest.call(null, seq__11032_11061__$1);
                  var G__11064 = c__4333__auto___11062;
                  var G__11065 = cljs.core.count.call(null, c__4333__auto___11062);
                  var G__11066 = 0;
                  seq__11032_11051 = G__11063;
                  chunk__11033_11052 = G__11064;
                  count__11034_11053 = G__11065;
                  i__11035_11054 = G__11066;
                  continue;
                } else {
                  var c_11067 = cljs.core.first.call(null, seq__11032_11061__$1);
                  dommy.attrs.add_class_BANG_.call(null, n, c_11067);
                  var G__11068 = cljs.core.next.call(null, seq__11032_11061__$1);
                  var G__11069 = null;
                  var G__11070 = 0;
                  var G__11071 = 0;
                  seq__11032_11051 = G__11068;
                  chunk__11033_11052 = G__11069;
                  count__11034_11053 = G__11070;
                  i__11035_11054 = G__11071;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          break;
        case "class":
          dommy.attrs.add_class_BANG_.call(null, n, v_11048);
          break;
        default:
          dommy.attrs.set_attr_BANG_.call(null, n, k_11047, v_11048);
      }
      var G__11072 = seq__11026_11042;
      var G__11073 = chunk__11027_11043;
      var G__11074 = count__11028_11044;
      var G__11075 = i__11029_11045 + 1;
      seq__11026_11042 = G__11072;
      chunk__11027_11043 = G__11073;
      count__11028_11044 = G__11074;
      i__11029_11045 = G__11075;
      continue;
    } else {
      var temp__4126__auto___11076 = cljs.core.seq.call(null, seq__11026_11042);
      if (temp__4126__auto___11076) {
        var seq__11026_11077__$1 = temp__4126__auto___11076;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11026_11077__$1)) {
          var c__4333__auto___11078 = cljs.core.chunk_first.call(null, seq__11026_11077__$1);
          var G__11079 = cljs.core.chunk_rest.call(null, seq__11026_11077__$1);
          var G__11080 = c__4333__auto___11078;
          var G__11081 = cljs.core.count.call(null, c__4333__auto___11078);
          var G__11082 = 0;
          seq__11026_11042 = G__11079;
          chunk__11027_11043 = G__11080;
          count__11028_11044 = G__11081;
          i__11029_11045 = G__11082;
          continue;
        } else {
          var vec__11036_11083 = cljs.core.first.call(null, seq__11026_11077__$1);
          var k_11084 = cljs.core.nth.call(null, vec__11036_11083, 0, null);
          var v_11085 = cljs.core.nth.call(null, vec__11036_11083, 1, null);
          var G__11037_11086 = k_11084 instanceof cljs.core.Keyword ? k_11084.fqn : null;
          switch(G__11037_11086) {
            case "classes":
              var seq__11038_11088 = cljs.core.seq.call(null, v_11085);
              var chunk__11039_11089 = null;
              var count__11040_11090 = 0;
              var i__11041_11091 = 0;
              while (true) {
                if (i__11041_11091 < count__11040_11090) {
                  var c_11092 = cljs.core._nth.call(null, chunk__11039_11089, i__11041_11091);
                  dommy.attrs.add_class_BANG_.call(null, n, c_11092);
                  var G__11093 = seq__11038_11088;
                  var G__11094 = chunk__11039_11089;
                  var G__11095 = count__11040_11090;
                  var G__11096 = i__11041_11091 + 1;
                  seq__11038_11088 = G__11093;
                  chunk__11039_11089 = G__11094;
                  count__11040_11090 = G__11095;
                  i__11041_11091 = G__11096;
                  continue;
                } else {
                  var temp__4126__auto___11097__$1 = cljs.core.seq.call(null, seq__11038_11088);
                  if (temp__4126__auto___11097__$1) {
                    var seq__11038_11098__$1 = temp__4126__auto___11097__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__11038_11098__$1)) {
                      var c__4333__auto___11099 = cljs.core.chunk_first.call(null, seq__11038_11098__$1);
                      var G__11100 = cljs.core.chunk_rest.call(null, seq__11038_11098__$1);
                      var G__11101 = c__4333__auto___11099;
                      var G__11102 = cljs.core.count.call(null, c__4333__auto___11099);
                      var G__11103 = 0;
                      seq__11038_11088 = G__11100;
                      chunk__11039_11089 = G__11101;
                      count__11040_11090 = G__11102;
                      i__11041_11091 = G__11103;
                      continue;
                    } else {
                      var c_11104 = cljs.core.first.call(null, seq__11038_11098__$1);
                      dommy.attrs.add_class_BANG_.call(null, n, c_11104);
                      var G__11105 = cljs.core.next.call(null, seq__11038_11098__$1);
                      var G__11106 = null;
                      var G__11107 = 0;
                      var G__11108 = 0;
                      seq__11038_11088 = G__11105;
                      chunk__11039_11089 = G__11106;
                      count__11040_11090 = G__11107;
                      i__11041_11091 = G__11108;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              break;
            case "class":
              dommy.attrs.add_class_BANG_.call(null, n, v_11085);
              break;
            default:
              dommy.attrs.set_attr_BANG_.call(null, n, k_11084, v_11085);
          }
          var G__11109 = cljs.core.next.call(null, seq__11026_11077__$1);
          var G__11110 = null;
          var G__11111 = 0;
          var G__11112 = 0;
          seq__11026_11042 = G__11109;
          chunk__11027_11043 = G__11110;
          count__11028_11044 = G__11111;
          i__11029_11045 = G__11112;
          continue;
        }
      } else {
      }
    }
    break;
  }
  n.appendChild(dommy.template.__GT_node_like.call(null, children__$1));
  return n;
};
dommy.template.PElement["string"] = true;
dommy.template._elem["string"] = function(this$) {
  if (this$ instanceof cljs.core.Keyword) {
    return dommy.template.base_element.call(null, this$);
  } else {
    return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
  }
};
dommy.template.PElement["number"] = true;
dommy.template._elem["number"] = function(this$) {
  return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
};
cljs.core.PersistentVector.prototype.dommy$template$PElement$ = true;
cljs.core.PersistentVector.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return dommy.template.compound_element.call(null, this$__$1);
};
SVGElement.prototype.dommy$template$PElement$ = true;
SVGElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Document.prototype.dommy$template$PElement$ = true;
Document.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Text.prototype.dommy$template$PElement$ = true;
Text.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
DocumentFragment.prototype.dommy$template$PElement$ = true;
DocumentFragment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
HTMLElement.prototype.dommy$template$PElement$ = true;
HTMLElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
try {
  Window.prototype.dommy$template$PElement$ = true;
  Window.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} catch (e11113) {
  if (e11113 instanceof ReferenceError) {
    var __11114 = e11113;
    console.log("PElement: js/Window not defined by browser, skipping it... (running on phantomjs?)");
  } else {
    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
      throw e11113;
    } else {
    }
  }
}
dommy.template.node = function node(data) {
  if (function() {
    var G__11116 = data;
    if (G__11116) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto__ = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return G__11116.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__11116.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11116);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__11116);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.throw_unable_to_make_node.call(null, data);
  }
};
dommy.template.html__GT_nodes = function html__GT_nodes(html__$1) {
  var parent = document.createElement("div");
  parent.insertAdjacentHTML("beforeend", html__$1);
  return cljs.core.seq.call(null, Array.prototype.slice.call(parent.childNodes));
};
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dissoc_in(m, p__10674) {
  var vec__10676 = p__10674;
  var k = cljs.core.nth.call(null, vec__10676, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__10676, 1);
  if (cljs.core.truth_(m)) {
    var temp__4124__auto__ = function() {
      var and__3565__auto__ = ks;
      if (and__3565__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3565__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var res = temp__4124__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function __GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("dommy.template");
goog.require("dommy.template");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("dommy.utils");
goog.require("dommy.utils");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.core.has_class_QMARK_ = dommy.attrs.has_class_QMARK_;
dommy.core.add_class_BANG_ = dommy.attrs.add_class_BANG_;
dommy.core.remove_class_BANG_ = dommy.attrs.remove_class_BANG_;
dommy.core.toggle_class_BANG_ = dommy.attrs.toggle_class_BANG_;
dommy.core.set_attr_BANG_ = dommy.attrs.set_attr_BANG_;
dommy.core.set_style_BANG_ = dommy.attrs.set_style_BANG_;
dommy.core.set_px_BANG_ = dommy.attrs.set_px_BANG_;
dommy.core.px = dommy.attrs.px;
dommy.core.style_str = dommy.attrs.style_str;
dommy.core.style = dommy.attrs.style;
dommy.core.remove_attr_BANG_ = dommy.attrs.remove_attr_BANG_;
dommy.core.toggle_attr_BANG_ = dommy.attrs.toggle_attr_BANG_;
dommy.core.attr = dommy.attrs.attr;
dommy.core.hidden_QMARK_ = dommy.attrs.hidden_QMARK_;
dommy.core.toggle_BANG_ = dommy.attrs.toggle_BANG_;
dommy.core.hide_BANG_ = dommy.attrs.hide_BANG_;
dommy.core.show_BANG_ = dommy.attrs.show_BANG_;
dommy.core.bounding_client_rect = dommy.attrs.bounding_client_rect;
dommy.core.scroll_into_view = dommy.attrs.scroll_into_view;
dommy.core.dissoc_in = dommy.utils.dissoc_in;
dommy.core.__GT_Array = dommy.utils.__GT_Array;
dommy.core.set_html_BANG_ = function set_html_BANG_(elem, html__$1) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.innerHTML = html__$1;
  return elem__$1;
};
dommy.core.html = function html__$1(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML;
};
dommy.core.set_text_BANG_ = function set_text_BANG_(elem, text) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var prop = cljs.core.truth_(elem__$1.textContent) ? "textContent" : "innerText";
  elem__$1[prop] = text;
  return elem__$1;
};
dommy.core.text = function text(elem) {
  var or__3577__auto__ = elem.textContent;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.value = function value(elem) {
  return dommy.template.__GT_node_like.call(null, elem).value;
};
dommy.core.set_value_BANG_ = function set_value_BANG_(elem, value) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.value = value;
  return elem__$1;
};
dommy.core.append_BANG_ = function() {
  var append_BANG_ = null;
  var append_BANG___2 = function(parent, child) {
    var G__10270 = dommy.template.__GT_node_like.call(null, parent);
    G__10270.appendChild(dommy.template.__GT_node_like.call(null, child));
    return G__10270;
  };
  var append_BANG___3 = function() {
    var G__10275__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__10271_10276 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__10272_10277 = null;
      var count__10273_10278 = 0;
      var i__10274_10279 = 0;
      while (true) {
        if (i__10274_10279 < count__10273_10278) {
          var c_10280 = cljs.core._nth.call(null, chunk__10272_10277, i__10274_10279);
          append_BANG_.call(null, parent__$1, c_10280);
          var G__10281 = seq__10271_10276;
          var G__10282 = chunk__10272_10277;
          var G__10283 = count__10273_10278;
          var G__10284 = i__10274_10279 + 1;
          seq__10271_10276 = G__10281;
          chunk__10272_10277 = G__10282;
          count__10273_10278 = G__10283;
          i__10274_10279 = G__10284;
          continue;
        } else {
          var temp__4126__auto___10285 = cljs.core.seq.call(null, seq__10271_10276);
          if (temp__4126__auto___10285) {
            var seq__10271_10286__$1 = temp__4126__auto___10285;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10271_10286__$1)) {
              var c__4333__auto___10287 = cljs.core.chunk_first.call(null, seq__10271_10286__$1);
              var G__10288 = cljs.core.chunk_rest.call(null, seq__10271_10286__$1);
              var G__10289 = c__4333__auto___10287;
              var G__10290 = cljs.core.count.call(null, c__4333__auto___10287);
              var G__10291 = 0;
              seq__10271_10276 = G__10288;
              chunk__10272_10277 = G__10289;
              count__10273_10278 = G__10290;
              i__10274_10279 = G__10291;
              continue;
            } else {
              var c_10292 = cljs.core.first.call(null, seq__10271_10286__$1);
              append_BANG_.call(null, parent__$1, c_10292);
              var G__10293 = cljs.core.next.call(null, seq__10271_10286__$1);
              var G__10294 = null;
              var G__10295 = 0;
              var G__10296 = 0;
              seq__10271_10276 = G__10293;
              chunk__10272_10277 = G__10294;
              count__10273_10278 = G__10295;
              i__10274_10279 = G__10296;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__10275 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__10275__delegate.call(this, parent, child, more_children);
    };
    G__10275.cljs$lang$maxFixedArity = 2;
    G__10275.cljs$lang$applyTo = function(arglist__10297) {
      var parent = cljs.core.first(arglist__10297);
      arglist__10297 = cljs.core.next(arglist__10297);
      var child = cljs.core.first(arglist__10297);
      var more_children = cljs.core.rest(arglist__10297);
      return G__10275__delegate(parent, child, more_children);
    };
    G__10275.cljs$core$IFn$_invoke$arity$variadic = G__10275__delegate;
    return G__10275;
  }();
  append_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return append_BANG___2.call(this, parent, child);
      default:
        return append_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  append_BANG_.cljs$lang$maxFixedArity = 2;
  append_BANG_.cljs$lang$applyTo = append_BANG___3.cljs$lang$applyTo;
  append_BANG_.cljs$core$IFn$_invoke$arity$2 = append_BANG___2;
  append_BANG_.cljs$core$IFn$_invoke$arity$variadic = append_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return append_BANG_;
}();
dommy.core.prepend_BANG_ = function() {
  var prepend_BANG_ = null;
  var prepend_BANG___2 = function(parent, child) {
    var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
    return parent__$1.insertBefore(dommy.template.__GT_node_like.call(null, child), parent__$1.firstChild);
  };
  var prepend_BANG___3 = function() {
    var G__10306__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__10302_10307 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__10303_10308 = null;
      var count__10304_10309 = 0;
      var i__10305_10310 = 0;
      while (true) {
        if (i__10305_10310 < count__10304_10309) {
          var c_10311 = cljs.core._nth.call(null, chunk__10303_10308, i__10305_10310);
          prepend_BANG_.call(null, parent__$1, c_10311);
          var G__10312 = seq__10302_10307;
          var G__10313 = chunk__10303_10308;
          var G__10314 = count__10304_10309;
          var G__10315 = i__10305_10310 + 1;
          seq__10302_10307 = G__10312;
          chunk__10303_10308 = G__10313;
          count__10304_10309 = G__10314;
          i__10305_10310 = G__10315;
          continue;
        } else {
          var temp__4126__auto___10316 = cljs.core.seq.call(null, seq__10302_10307);
          if (temp__4126__auto___10316) {
            var seq__10302_10317__$1 = temp__4126__auto___10316;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__10302_10317__$1)) {
              var c__4333__auto___10318 = cljs.core.chunk_first.call(null, seq__10302_10317__$1);
              var G__10319 = cljs.core.chunk_rest.call(null, seq__10302_10317__$1);
              var G__10320 = c__4333__auto___10318;
              var G__10321 = cljs.core.count.call(null, c__4333__auto___10318);
              var G__10322 = 0;
              seq__10302_10307 = G__10319;
              chunk__10303_10308 = G__10320;
              count__10304_10309 = G__10321;
              i__10305_10310 = G__10322;
              continue;
            } else {
              var c_10323 = cljs.core.first.call(null, seq__10302_10317__$1);
              prepend_BANG_.call(null, parent__$1, c_10323);
              var G__10324 = cljs.core.next.call(null, seq__10302_10317__$1);
              var G__10325 = null;
              var G__10326 = 0;
              var G__10327 = 0;
              seq__10302_10307 = G__10324;
              chunk__10303_10308 = G__10325;
              count__10304_10309 = G__10326;
              i__10305_10310 = G__10327;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__10306 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__10306__delegate.call(this, parent, child, more_children);
    };
    G__10306.cljs$lang$maxFixedArity = 2;
    G__10306.cljs$lang$applyTo = function(arglist__10328) {
      var parent = cljs.core.first(arglist__10328);
      arglist__10328 = cljs.core.next(arglist__10328);
      var child = cljs.core.first(arglist__10328);
      var more_children = cljs.core.rest(arglist__10328);
      return G__10306__delegate(parent, child, more_children);
    };
    G__10306.cljs$core$IFn$_invoke$arity$variadic = G__10306__delegate;
    return G__10306;
  }();
  prepend_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return prepend_BANG___2.call(this, parent, child);
      default:
        return prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prepend_BANG_.cljs$lang$maxFixedArity = 2;
  prepend_BANG_.cljs$lang$applyTo = prepend_BANG___3.cljs$lang$applyTo;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = prepend_BANG___2;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return prepend_BANG_;
}();
dommy.core.insert_before_BANG_ = function insert_before_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  if (cljs.core.truth_(other__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "other", "other", -1534461751, null)))));
  }
  other__$1.parentNode.insertBefore(actual_node, other__$1);
  return actual_node;
};
dommy.core.insert_after_BANG_ = function insert_after_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  var parent = other__$1.parentNode;
  var temp__4124__auto___10329 = other__$1.nextSibling;
  if (cljs.core.truth_(temp__4124__auto___10329)) {
    var next_10330 = temp__4124__auto___10329;
    parent.insertBefore(actual_node, next_10330);
  } else {
    parent.appendChild(actual_node);
  }
  return actual_node;
};
dommy.core.replace_BANG_ = function replace_BANG_(elem, new$) {
  var new$__$1 = dommy.template.__GT_node_like.call(null, new$);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_(elem__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "elem", "elem", -1637415608, null)))));
  }
  elem__$1.parentNode.replaceChild(new$__$1, elem__$1);
  return new$__$1;
};
dommy.core.replace_contents_BANG_ = function replace_contents_BANG_(parent, node_like) {
  var G__10332 = dommy.template.__GT_node_like.call(null, parent);
  G__10332.innerHTML = "";
  dommy.core.append_BANG_.call(null, G__10332, node_like);
  return G__10332;
};
dommy.core.remove_BANG_ = function remove_BANG_(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var G__10334 = elem__$1.parentNode;
  G__10334.removeChild(elem__$1);
  return G__10334;
};
dommy.core.clear_BANG_ = function clear_BANG_(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML = "";
};
dommy.core.selector = function selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.selector_map = function selector_map(template, key_selectors_map) {
  var container = dommy.template.__GT_node_like.call(null, template);
  if (!cljs.core.contains_QMARK_.call(null, key_selectors_map, new cljs.core.Keyword(null, "container", "container", 602947571))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -2051487815, null), new cljs.core.Symbol(null, "key-selectors-map", "key-selectors-map", 19054414, null), new cljs.core.Keyword(null, "container", "container", 602947571))))));
  }
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "container", "container", 602947571), container], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(container) {
    return function(p__10340) {
      var vec__10341 = p__10340;
      var k = cljs.core.nth.call(null, vec__10341, 0, null);
      var v = cljs.core.nth.call(null, vec__10341, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.truth_((new cljs.core.Keyword(null, "live", "live", 1017226334)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v))) ? function() {
        if (typeof dommy.core.t10342 !== "undefined") {
        } else {
          dommy.core.t10342 = function(v, k, vec__10341, p__10340, container, key_selectors_map, template, selector_map, meta10343) {
            this.v = v;
            this.k = k;
            this.vec__10341 = vec__10341;
            this.p__10340 = p__10340;
            this.container = container;
            this.key_selectors_map = key_selectors_map;
            this.template = template;
            this.selector_map = selector_map;
            this.meta10343 = meta10343;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 425984;
          };
          dommy.core.t10342.cljs$lang$type = true;
          dommy.core.t10342.cljs$lang$ctorStr = "dommy.core/t10342";
          dommy.core.t10342.cljs$lang$ctorPrWriter = function(vec__10341, k, v, container) {
            return function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
              return cljs.core._write.call(null, writer__4145__auto__, "dommy.core/t10342");
            };
          }(vec__10341, k, v, container);
          dommy.core.t10342.prototype.cljs$core$IDeref$_deref$arity$1 = function(vec__10341, k, v, container) {
            return function(this$) {
              var self__ = this;
              var this$__$1 = this;
              return dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, self__.container).querySelectorAll(dommy.core.selector.call(null, self__.v)));
            };
          }(vec__10341, k, v, container);
          dommy.core.t10342.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__10341, k, v, container) {
            return function(_10344) {
              var self__ = this;
              var _10344__$1 = this;
              return self__.meta10343;
            };
          }(vec__10341, k, v, container);
          dommy.core.t10342.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__10341, k, v, container) {
            return function(_10344, meta10343__$1) {
              var self__ = this;
              var _10344__$1 = this;
              return new dommy.core.t10342(self__.v, self__.k, self__.vec__10341, self__.p__10340, self__.container, self__.key_selectors_map, self__.template, self__.selector_map, meta10343__$1);
            };
          }(vec__10341, k, v, container);
          dommy.core.__GT_t10342 = function(vec__10341, k, v, container) {
            return function __GT_t10342(v__$1, k__$1, vec__10341__$1, p__10340__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta10343) {
              return new dommy.core.t10342(v__$1, k__$1, vec__10341__$1, p__10340__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta10343);
            };
          }(vec__10341, k, v, container);
        }
        return new dommy.core.t10342(v, k, vec__10341, p__10340, container, key_selectors_map, template, selector_map, null);
      }() : dommy.template.__GT_node_like.call(null, container).querySelector(dommy.core.selector.call(null, v))], null);
    };
  }(container), key_selectors_map)));
};
dommy.core.ancestor_nodes = function ancestor_nodes(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, function(p1__10345_SHARP_) {
    return p1__10345_SHARP_.parentNode;
  }, dommy.template.__GT_node_like.call(null, elem)));
};
dommy.core.matches_pred = function() {
  var matches_pred = null;
  var matches_pred__1 = function(selector) {
    return matches_pred.call(null, document, selector);
  };
  var matches_pred__2 = function(base, selector) {
    var matches = dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, dommy.template.__GT_node_like.call(null, base)).querySelectorAll(dommy.core.selector.call(null, selector)));
    return function(matches) {
      return function(elem) {
        return matches.indexOf(elem) >= 0;
      };
    }(matches);
  };
  matches_pred = function(base, selector) {
    switch(arguments.length) {
      case 1:
        return matches_pred__1.call(this, base);
      case 2:
        return matches_pred__2.call(this, base, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  matches_pred.cljs$core$IFn$_invoke$arity$1 = matches_pred__1;
  matches_pred.cljs$core$IFn$_invoke$arity$2 = matches_pred__2;
  return matches_pred;
}();
dommy.core.closest = function() {
  var closest = null;
  var closest__2 = function(elem, selector) {
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, selector), dommy.core.ancestor_nodes.call(null, dommy.template.__GT_node_like.call(null, elem))));
  };
  var closest__3 = function(base, elem, selector) {
    var base__$1 = dommy.template.__GT_node_like.call(null, base);
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base__$1, selector), cljs.core.take_while.call(null, function(base__$1, elem__$1) {
      return function(p1__10346_SHARP_) {
        return!(p1__10346_SHARP_ === base__$1);
      };
    }(base__$1, elem__$1), dommy.core.ancestor_nodes.call(null, elem__$1))));
  };
  closest = function(base, elem, selector) {
    switch(arguments.length) {
      case 2:
        return closest__2.call(this, base, elem);
      case 3:
        return closest__3.call(this, base, elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  closest.cljs$core$IFn$_invoke$arity$2 = closest__2;
  closest.cljs$core$IFn$_invoke$arity$3 = closest__3;
  return closest;
}();
dommy.core.descendant_QMARK_ = function descendant_QMARK_(descendant, ancestor) {
  var descendant__$1 = dommy.template.__GT_node_like.call(null, descendant);
  var ancestor__$1 = dommy.template.__GT_node_like.call(null, ancestor);
  if (cljs.core.truth_(ancestor__$1.contains)) {
    return ancestor__$1.contains(descendant__$1);
  } else {
    if (cljs.core.truth_(ancestor__$1.compareDocumentPosition)) {
      return(ancestor__$1.compareDocumentPosition(descendant__$1) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__10347) {
  var vec__10348 = p__10347;
  var special_mouse_event = cljs.core.nth.call(null, vec__10348, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__10348, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(vec__10348, special_mouse_event, real_mouse_event) {
    return function(f) {
      return function(vec__10348, special_mouse_event, real_mouse_event) {
        return function(event) {
          var related_target = event.relatedTarget;
          var listener_target = function() {
            var or__3577__auto__ = event.selectedTarget;
            if (cljs.core.truth_(or__3577__auto__)) {
              return or__3577__auto__;
            } else {
              return event.currentTarget;
            }
          }();
          if (cljs.core.truth_(function() {
            var and__3565__auto__ = related_target;
            if (cljs.core.truth_(and__3565__auto__)) {
              return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
            } else {
              return and__3565__auto__;
            }
          }())) {
            return null;
          } else {
            return f.call(null, event);
          }
        };
      }(vec__10348, special_mouse_event, real_mouse_event);
    };
  }(vec__10348, special_mouse_event, real_mouse_event)], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", 2027084997), new cljs.core.Keyword(null, "mouseover", "mouseover", 1601081963), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 2033263780), new cljs.core.Keyword(null, "mouseout", "mouseout", 894298107)], null)));
dommy.core.live_listener = function live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, dommy.template.__GT_node_like.call(null, elem), event.target, selector);
    if (cljs.core.truth_(function() {
      var and__3565__auto__ = selected_target;
      if (cljs.core.truth_(and__3565__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", 1284845038)));
      } else {
        return and__3565__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function event_listeners(elem) {
  var or__3577__auto__ = dommy.template.__GT_node_like.call(null, elem).dommyEventListeners;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function() {
  var update_event_listeners_BANG___delegate = function(elem, f, args) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
  };
  var update_event_listeners_BANG_ = function(elem, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return update_event_listeners_BANG___delegate.call(this, elem, f, args);
  };
  update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
  update_event_listeners_BANG_.cljs$lang$applyTo = function(arglist__10349) {
    var elem = cljs.core.first(arglist__10349);
    arglist__10349 = cljs.core.next(arglist__10349);
    var f = cljs.core.first(arglist__10349);
    var args = cljs.core.rest(arglist__10349);
    return update_event_listeners_BANG___delegate(elem, f, args);
  };
  update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = update_event_listeners_BANG___delegate;
  return update_event_listeners_BANG_;
}();
dommy.core.elem_and_selector = function elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, function(p1__10350_SHARP_) {
      return dommy.template.__GT_node_like.call(null, cljs.core.first.call(null, p1__10350_SHARP_));
    }, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [dommy.template.__GT_node_like.call(null, elem_sel), null], null);
  }
};
dommy.core.listen_BANG_ = function() {
  var listen_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null))))));
    }
    var vec__10374_10397 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_10398 = cljs.core.nth.call(null, vec__10374_10397, 0, null);
    var selector_10399 = cljs.core.nth.call(null, vec__10374_10397, 1, null);
    var seq__10375_10400 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__10382_10401 = null;
    var count__10383_10402 = 0;
    var i__10384_10403 = 0;
    while (true) {
      if (i__10384_10403 < count__10383_10402) {
        var vec__10391_10404 = cljs.core._nth.call(null, chunk__10382_10401, i__10384_10403);
        var orig_type_10405 = cljs.core.nth.call(null, vec__10391_10404, 0, null);
        var f_10406 = cljs.core.nth.call(null, vec__10391_10404, 1, null);
        var seq__10385_10407 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_10405, new cljs.core.PersistentArrayMap.fromArray([orig_type_10405, cljs.core.identity], true, false)));
        var chunk__10387_10408 = null;
        var count__10388_10409 = 0;
        var i__10389_10410 = 0;
        while (true) {
          if (i__10389_10410 < count__10388_10409) {
            var vec__10392_10411 = cljs.core._nth.call(null, chunk__10387_10408, i__10389_10410);
            var actual_type_10412 = cljs.core.nth.call(null, vec__10392_10411, 0, null);
            var factory_10413 = cljs.core.nth.call(null, vec__10392_10411, 1, null);
            var canonical_f_10414 = (cljs.core.truth_(selector_10399) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_10398, selector_10399) : cljs.core.identity).call(null, factory_10413.call(null, f_10406));
            dommy.core.update_event_listeners_BANG_.call(null, elem_10398, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10399, actual_type_10412, f_10406], null), canonical_f_10414);
            if (cljs.core.truth_(elem_10398.addEventListener)) {
              elem_10398.addEventListener(cljs.core.name.call(null, actual_type_10412), canonical_f_10414);
            } else {
              elem_10398.attachEvent(cljs.core.name.call(null, actual_type_10412), canonical_f_10414);
            }
            var G__10415 = seq__10385_10407;
            var G__10416 = chunk__10387_10408;
            var G__10417 = count__10388_10409;
            var G__10418 = i__10389_10410 + 1;
            seq__10385_10407 = G__10415;
            chunk__10387_10408 = G__10416;
            count__10388_10409 = G__10417;
            i__10389_10410 = G__10418;
            continue;
          } else {
            var temp__4126__auto___10419 = cljs.core.seq.call(null, seq__10385_10407);
            if (temp__4126__auto___10419) {
              var seq__10385_10420__$1 = temp__4126__auto___10419;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__10385_10420__$1)) {
                var c__4333__auto___10421 = cljs.core.chunk_first.call(null, seq__10385_10420__$1);
                var G__10422 = cljs.core.chunk_rest.call(null, seq__10385_10420__$1);
                var G__10423 = c__4333__auto___10421;
                var G__10424 = cljs.core.count.call(null, c__4333__auto___10421);
                var G__10425 = 0;
                seq__10385_10407 = G__10422;
                chunk__10387_10408 = G__10423;
                count__10388_10409 = G__10424;
                i__10389_10410 = G__10425;
                continue;
              } else {
                var vec__10393_10426 = cljs.core.first.call(null, seq__10385_10420__$1);
                var actual_type_10427 = cljs.core.nth.call(null, vec__10393_10426, 0, null);
                var factory_10428 = cljs.core.nth.call(null, vec__10393_10426, 1, null);
                var canonical_f_10429 = (cljs.core.truth_(selector_10399) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_10398, selector_10399) : cljs.core.identity).call(null, factory_10428.call(null, f_10406));
                dommy.core.update_event_listeners_BANG_.call(null, elem_10398, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10399, actual_type_10427, f_10406], null), canonical_f_10429);
                if (cljs.core.truth_(elem_10398.addEventListener)) {
                  elem_10398.addEventListener(cljs.core.name.call(null, actual_type_10427), canonical_f_10429);
                } else {
                  elem_10398.attachEvent(cljs.core.name.call(null, actual_type_10427), canonical_f_10429);
                }
                var G__10430 = cljs.core.next.call(null, seq__10385_10420__$1);
                var G__10431 = null;
                var G__10432 = 0;
                var G__10433 = 0;
                seq__10385_10407 = G__10430;
                chunk__10387_10408 = G__10431;
                count__10388_10409 = G__10432;
                i__10389_10410 = G__10433;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__10434 = seq__10375_10400;
        var G__10435 = chunk__10382_10401;
        var G__10436 = count__10383_10402;
        var G__10437 = i__10384_10403 + 1;
        seq__10375_10400 = G__10434;
        chunk__10382_10401 = G__10435;
        count__10383_10402 = G__10436;
        i__10384_10403 = G__10437;
        continue;
      } else {
        var temp__4126__auto___10438 = cljs.core.seq.call(null, seq__10375_10400);
        if (temp__4126__auto___10438) {
          var seq__10375_10439__$1 = temp__4126__auto___10438;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10375_10439__$1)) {
            var c__4333__auto___10440 = cljs.core.chunk_first.call(null, seq__10375_10439__$1);
            var G__10441 = cljs.core.chunk_rest.call(null, seq__10375_10439__$1);
            var G__10442 = c__4333__auto___10440;
            var G__10443 = cljs.core.count.call(null, c__4333__auto___10440);
            var G__10444 = 0;
            seq__10375_10400 = G__10441;
            chunk__10382_10401 = G__10442;
            count__10383_10402 = G__10443;
            i__10384_10403 = G__10444;
            continue;
          } else {
            var vec__10394_10445 = cljs.core.first.call(null, seq__10375_10439__$1);
            var orig_type_10446 = cljs.core.nth.call(null, vec__10394_10445, 0, null);
            var f_10447 = cljs.core.nth.call(null, vec__10394_10445, 1, null);
            var seq__10376_10448 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_10446, new cljs.core.PersistentArrayMap.fromArray([orig_type_10446, cljs.core.identity], true, false)));
            var chunk__10378_10449 = null;
            var count__10379_10450 = 0;
            var i__10380_10451 = 0;
            while (true) {
              if (i__10380_10451 < count__10379_10450) {
                var vec__10395_10452 = cljs.core._nth.call(null, chunk__10378_10449, i__10380_10451);
                var actual_type_10453 = cljs.core.nth.call(null, vec__10395_10452, 0, null);
                var factory_10454 = cljs.core.nth.call(null, vec__10395_10452, 1, null);
                var canonical_f_10455 = (cljs.core.truth_(selector_10399) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_10398, selector_10399) : cljs.core.identity).call(null, factory_10454.call(null, f_10447));
                dommy.core.update_event_listeners_BANG_.call(null, elem_10398, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10399, actual_type_10453, f_10447], null), canonical_f_10455);
                if (cljs.core.truth_(elem_10398.addEventListener)) {
                  elem_10398.addEventListener(cljs.core.name.call(null, actual_type_10453), canonical_f_10455);
                } else {
                  elem_10398.attachEvent(cljs.core.name.call(null, actual_type_10453), canonical_f_10455);
                }
                var G__10456 = seq__10376_10448;
                var G__10457 = chunk__10378_10449;
                var G__10458 = count__10379_10450;
                var G__10459 = i__10380_10451 + 1;
                seq__10376_10448 = G__10456;
                chunk__10378_10449 = G__10457;
                count__10379_10450 = G__10458;
                i__10380_10451 = G__10459;
                continue;
              } else {
                var temp__4126__auto___10460__$1 = cljs.core.seq.call(null, seq__10376_10448);
                if (temp__4126__auto___10460__$1) {
                  var seq__10376_10461__$1 = temp__4126__auto___10460__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__10376_10461__$1)) {
                    var c__4333__auto___10462 = cljs.core.chunk_first.call(null, seq__10376_10461__$1);
                    var G__10463 = cljs.core.chunk_rest.call(null, seq__10376_10461__$1);
                    var G__10464 = c__4333__auto___10462;
                    var G__10465 = cljs.core.count.call(null, c__4333__auto___10462);
                    var G__10466 = 0;
                    seq__10376_10448 = G__10463;
                    chunk__10378_10449 = G__10464;
                    count__10379_10450 = G__10465;
                    i__10380_10451 = G__10466;
                    continue;
                  } else {
                    var vec__10396_10467 = cljs.core.first.call(null, seq__10376_10461__$1);
                    var actual_type_10468 = cljs.core.nth.call(null, vec__10396_10467, 0, null);
                    var factory_10469 = cljs.core.nth.call(null, vec__10396_10467, 1, null);
                    var canonical_f_10470 = (cljs.core.truth_(selector_10399) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_10398, selector_10399) : cljs.core.identity).call(null, factory_10469.call(null, f_10447));
                    dommy.core.update_event_listeners_BANG_.call(null, elem_10398, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10399, actual_type_10468, f_10447], null), canonical_f_10470);
                    if (cljs.core.truth_(elem_10398.addEventListener)) {
                      elem_10398.addEventListener(cljs.core.name.call(null, actual_type_10468), canonical_f_10470);
                    } else {
                      elem_10398.attachEvent(cljs.core.name.call(null, actual_type_10468), canonical_f_10470);
                    }
                    var G__10471 = cljs.core.next.call(null, seq__10376_10461__$1);
                    var G__10472 = null;
                    var G__10473 = 0;
                    var G__10474 = 0;
                    seq__10376_10448 = G__10471;
                    chunk__10378_10449 = G__10472;
                    count__10379_10450 = G__10473;
                    i__10380_10451 = G__10474;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__10475 = cljs.core.next.call(null, seq__10375_10439__$1);
            var G__10476 = null;
            var G__10477 = 0;
            var G__10478 = 0;
            seq__10375_10400 = G__10475;
            chunk__10382_10401 = G__10476;
            count__10383_10402 = G__10477;
            i__10384_10403 = G__10478;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_BANG_.cljs$lang$maxFixedArity = 1;
  listen_BANG_.cljs$lang$applyTo = function(arglist__10479) {
    var elem_sel = cljs.core.first(arglist__10479);
    var type_fs = cljs.core.rest(arglist__10479);
    return listen_BANG___delegate(elem_sel, type_fs);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_BANG___delegate;
  return listen_BANG_;
}();
dommy.core.unlisten_BANG_ = function() {
  var unlisten_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null))))));
    }
    var vec__10503_10526 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_10527 = cljs.core.nth.call(null, vec__10503_10526, 0, null);
    var selector_10528 = cljs.core.nth.call(null, vec__10503_10526, 1, null);
    var seq__10504_10529 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__10511_10530 = null;
    var count__10512_10531 = 0;
    var i__10513_10532 = 0;
    while (true) {
      if (i__10513_10532 < count__10512_10531) {
        var vec__10520_10533 = cljs.core._nth.call(null, chunk__10511_10530, i__10513_10532);
        var orig_type_10534 = cljs.core.nth.call(null, vec__10520_10533, 0, null);
        var f_10535 = cljs.core.nth.call(null, vec__10520_10533, 1, null);
        var seq__10514_10536 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_10534, new cljs.core.PersistentArrayMap.fromArray([orig_type_10534, cljs.core.identity], true, false)));
        var chunk__10516_10537 = null;
        var count__10517_10538 = 0;
        var i__10518_10539 = 0;
        while (true) {
          if (i__10518_10539 < count__10517_10538) {
            var vec__10521_10540 = cljs.core._nth.call(null, chunk__10516_10537, i__10518_10539);
            var actual_type_10541 = cljs.core.nth.call(null, vec__10521_10540, 0, null);
            var __10542 = cljs.core.nth.call(null, vec__10521_10540, 1, null);
            var keys_10543 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10528, actual_type_10541, f_10535], null);
            var canonical_f_10544 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_10527), keys_10543);
            dommy.core.update_event_listeners_BANG_.call(null, elem_10527, dommy.utils.dissoc_in, keys_10543);
            if (cljs.core.truth_(elem_10527.removeEventListener)) {
              elem_10527.removeEventListener(cljs.core.name.call(null, actual_type_10541), canonical_f_10544);
            } else {
              elem_10527.detachEvent(cljs.core.name.call(null, actual_type_10541), canonical_f_10544);
            }
            var G__10545 = seq__10514_10536;
            var G__10546 = chunk__10516_10537;
            var G__10547 = count__10517_10538;
            var G__10548 = i__10518_10539 + 1;
            seq__10514_10536 = G__10545;
            chunk__10516_10537 = G__10546;
            count__10517_10538 = G__10547;
            i__10518_10539 = G__10548;
            continue;
          } else {
            var temp__4126__auto___10549 = cljs.core.seq.call(null, seq__10514_10536);
            if (temp__4126__auto___10549) {
              var seq__10514_10550__$1 = temp__4126__auto___10549;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__10514_10550__$1)) {
                var c__4333__auto___10551 = cljs.core.chunk_first.call(null, seq__10514_10550__$1);
                var G__10552 = cljs.core.chunk_rest.call(null, seq__10514_10550__$1);
                var G__10553 = c__4333__auto___10551;
                var G__10554 = cljs.core.count.call(null, c__4333__auto___10551);
                var G__10555 = 0;
                seq__10514_10536 = G__10552;
                chunk__10516_10537 = G__10553;
                count__10517_10538 = G__10554;
                i__10518_10539 = G__10555;
                continue;
              } else {
                var vec__10522_10556 = cljs.core.first.call(null, seq__10514_10550__$1);
                var actual_type_10557 = cljs.core.nth.call(null, vec__10522_10556, 0, null);
                var __10558 = cljs.core.nth.call(null, vec__10522_10556, 1, null);
                var keys_10559 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10528, actual_type_10557, f_10535], null);
                var canonical_f_10560 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_10527), keys_10559);
                dommy.core.update_event_listeners_BANG_.call(null, elem_10527, dommy.utils.dissoc_in, keys_10559);
                if (cljs.core.truth_(elem_10527.removeEventListener)) {
                  elem_10527.removeEventListener(cljs.core.name.call(null, actual_type_10557), canonical_f_10560);
                } else {
                  elem_10527.detachEvent(cljs.core.name.call(null, actual_type_10557), canonical_f_10560);
                }
                var G__10561 = cljs.core.next.call(null, seq__10514_10550__$1);
                var G__10562 = null;
                var G__10563 = 0;
                var G__10564 = 0;
                seq__10514_10536 = G__10561;
                chunk__10516_10537 = G__10562;
                count__10517_10538 = G__10563;
                i__10518_10539 = G__10564;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__10565 = seq__10504_10529;
        var G__10566 = chunk__10511_10530;
        var G__10567 = count__10512_10531;
        var G__10568 = i__10513_10532 + 1;
        seq__10504_10529 = G__10565;
        chunk__10511_10530 = G__10566;
        count__10512_10531 = G__10567;
        i__10513_10532 = G__10568;
        continue;
      } else {
        var temp__4126__auto___10569 = cljs.core.seq.call(null, seq__10504_10529);
        if (temp__4126__auto___10569) {
          var seq__10504_10570__$1 = temp__4126__auto___10569;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10504_10570__$1)) {
            var c__4333__auto___10571 = cljs.core.chunk_first.call(null, seq__10504_10570__$1);
            var G__10572 = cljs.core.chunk_rest.call(null, seq__10504_10570__$1);
            var G__10573 = c__4333__auto___10571;
            var G__10574 = cljs.core.count.call(null, c__4333__auto___10571);
            var G__10575 = 0;
            seq__10504_10529 = G__10572;
            chunk__10511_10530 = G__10573;
            count__10512_10531 = G__10574;
            i__10513_10532 = G__10575;
            continue;
          } else {
            var vec__10523_10576 = cljs.core.first.call(null, seq__10504_10570__$1);
            var orig_type_10577 = cljs.core.nth.call(null, vec__10523_10576, 0, null);
            var f_10578 = cljs.core.nth.call(null, vec__10523_10576, 1, null);
            var seq__10505_10579 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_10577, new cljs.core.PersistentArrayMap.fromArray([orig_type_10577, cljs.core.identity], true, false)));
            var chunk__10507_10580 = null;
            var count__10508_10581 = 0;
            var i__10509_10582 = 0;
            while (true) {
              if (i__10509_10582 < count__10508_10581) {
                var vec__10524_10583 = cljs.core._nth.call(null, chunk__10507_10580, i__10509_10582);
                var actual_type_10584 = cljs.core.nth.call(null, vec__10524_10583, 0, null);
                var __10585 = cljs.core.nth.call(null, vec__10524_10583, 1, null);
                var keys_10586 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10528, actual_type_10584, f_10578], null);
                var canonical_f_10587 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_10527), keys_10586);
                dommy.core.update_event_listeners_BANG_.call(null, elem_10527, dommy.utils.dissoc_in, keys_10586);
                if (cljs.core.truth_(elem_10527.removeEventListener)) {
                  elem_10527.removeEventListener(cljs.core.name.call(null, actual_type_10584), canonical_f_10587);
                } else {
                  elem_10527.detachEvent(cljs.core.name.call(null, actual_type_10584), canonical_f_10587);
                }
                var G__10588 = seq__10505_10579;
                var G__10589 = chunk__10507_10580;
                var G__10590 = count__10508_10581;
                var G__10591 = i__10509_10582 + 1;
                seq__10505_10579 = G__10588;
                chunk__10507_10580 = G__10589;
                count__10508_10581 = G__10590;
                i__10509_10582 = G__10591;
                continue;
              } else {
                var temp__4126__auto___10592__$1 = cljs.core.seq.call(null, seq__10505_10579);
                if (temp__4126__auto___10592__$1) {
                  var seq__10505_10593__$1 = temp__4126__auto___10592__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__10505_10593__$1)) {
                    var c__4333__auto___10594 = cljs.core.chunk_first.call(null, seq__10505_10593__$1);
                    var G__10595 = cljs.core.chunk_rest.call(null, seq__10505_10593__$1);
                    var G__10596 = c__4333__auto___10594;
                    var G__10597 = cljs.core.count.call(null, c__4333__auto___10594);
                    var G__10598 = 0;
                    seq__10505_10579 = G__10595;
                    chunk__10507_10580 = G__10596;
                    count__10508_10581 = G__10597;
                    i__10509_10582 = G__10598;
                    continue;
                  } else {
                    var vec__10525_10599 = cljs.core.first.call(null, seq__10505_10593__$1);
                    var actual_type_10600 = cljs.core.nth.call(null, vec__10525_10599, 0, null);
                    var __10601 = cljs.core.nth.call(null, vec__10525_10599, 1, null);
                    var keys_10602 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_10528, actual_type_10600, f_10578], null);
                    var canonical_f_10603 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_10527), keys_10602);
                    dommy.core.update_event_listeners_BANG_.call(null, elem_10527, dommy.utils.dissoc_in, keys_10602);
                    if (cljs.core.truth_(elem_10527.removeEventListener)) {
                      elem_10527.removeEventListener(cljs.core.name.call(null, actual_type_10600), canonical_f_10603);
                    } else {
                      elem_10527.detachEvent(cljs.core.name.call(null, actual_type_10600), canonical_f_10603);
                    }
                    var G__10604 = cljs.core.next.call(null, seq__10505_10593__$1);
                    var G__10605 = null;
                    var G__10606 = 0;
                    var G__10607 = 0;
                    seq__10505_10579 = G__10604;
                    chunk__10507_10580 = G__10605;
                    count__10508_10581 = G__10606;
                    i__10509_10582 = G__10607;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__10608 = cljs.core.next.call(null, seq__10504_10570__$1);
            var G__10609 = null;
            var G__10610 = 0;
            var G__10611 = 0;
            seq__10504_10529 = G__10608;
            chunk__10511_10530 = G__10609;
            count__10512_10531 = G__10610;
            i__10513_10532 = G__10611;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var unlisten_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return unlisten_BANG___delegate.call(this, elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$lang$maxFixedArity = 1;
  unlisten_BANG_.cljs$lang$applyTo = function(arglist__10612) {
    var elem_sel = cljs.core.first(arglist__10612);
    var type_fs = cljs.core.rest(arglist__10612);
    return unlisten_BANG___delegate(elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = unlisten_BANG___delegate;
  return unlisten_BANG_;
}();
dommy.core.listen_once_BANG_ = function() {
  var listen_once_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null))))));
    }
    var vec__10620_10627 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_10628 = cljs.core.nth.call(null, vec__10620_10627, 0, null);
    var selector_10629 = cljs.core.nth.call(null, vec__10620_10627, 1, null);
    var seq__10621_10630 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__10622_10631 = null;
    var count__10623_10632 = 0;
    var i__10624_10633 = 0;
    while (true) {
      if (i__10624_10633 < count__10623_10632) {
        var vec__10625_10634 = cljs.core._nth.call(null, chunk__10622_10631, i__10624_10633);
        var type_10635 = cljs.core.nth.call(null, vec__10625_10634, 0, null);
        var f_10636 = cljs.core.nth.call(null, vec__10625_10634, 1, null);
        dommy.core.listen_BANG_.call(null, elem_sel, type_10635, function(seq__10621_10630, chunk__10622_10631, count__10623_10632, i__10624_10633, vec__10625_10634, type_10635, f_10636, vec__10620_10627, elem_10628, selector_10629) {
          return function this_fn(e) {
            dommy.core.unlisten_BANG_.call(null, elem_sel, type_10635, this_fn);
            return f_10636.call(null, e);
          };
        }(seq__10621_10630, chunk__10622_10631, count__10623_10632, i__10624_10633, vec__10625_10634, type_10635, f_10636, vec__10620_10627, elem_10628, selector_10629));
        var G__10637 = seq__10621_10630;
        var G__10638 = chunk__10622_10631;
        var G__10639 = count__10623_10632;
        var G__10640 = i__10624_10633 + 1;
        seq__10621_10630 = G__10637;
        chunk__10622_10631 = G__10638;
        count__10623_10632 = G__10639;
        i__10624_10633 = G__10640;
        continue;
      } else {
        var temp__4126__auto___10641 = cljs.core.seq.call(null, seq__10621_10630);
        if (temp__4126__auto___10641) {
          var seq__10621_10642__$1 = temp__4126__auto___10641;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10621_10642__$1)) {
            var c__4333__auto___10643 = cljs.core.chunk_first.call(null, seq__10621_10642__$1);
            var G__10644 = cljs.core.chunk_rest.call(null, seq__10621_10642__$1);
            var G__10645 = c__4333__auto___10643;
            var G__10646 = cljs.core.count.call(null, c__4333__auto___10643);
            var G__10647 = 0;
            seq__10621_10630 = G__10644;
            chunk__10622_10631 = G__10645;
            count__10623_10632 = G__10646;
            i__10624_10633 = G__10647;
            continue;
          } else {
            var vec__10626_10648 = cljs.core.first.call(null, seq__10621_10642__$1);
            var type_10649 = cljs.core.nth.call(null, vec__10626_10648, 0, null);
            var f_10650 = cljs.core.nth.call(null, vec__10626_10648, 1, null);
            dommy.core.listen_BANG_.call(null, elem_sel, type_10649, function(seq__10621_10630, chunk__10622_10631, count__10623_10632, i__10624_10633, vec__10626_10648, type_10649, f_10650, seq__10621_10642__$1, temp__4126__auto___10641, vec__10620_10627, elem_10628, selector_10629) {
              return function this_fn(e) {
                dommy.core.unlisten_BANG_.call(null, elem_sel, type_10649, this_fn);
                return f_10650.call(null, e);
              };
            }(seq__10621_10630, chunk__10622_10631, count__10623_10632, i__10624_10633, vec__10626_10648, type_10649, f_10650, seq__10621_10642__$1, temp__4126__auto___10641, vec__10620_10627, elem_10628, selector_10629));
            var G__10651 = cljs.core.next.call(null, seq__10621_10642__$1);
            var G__10652 = null;
            var G__10653 = 0;
            var G__10654 = 0;
            seq__10621_10630 = G__10651;
            chunk__10622_10631 = G__10652;
            count__10623_10632 = G__10653;
            i__10624_10633 = G__10654;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_once_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_once_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$lang$maxFixedArity = 1;
  listen_once_BANG_.cljs$lang$applyTo = function(arglist__10655) {
    var elem_sel = cljs.core.first(arglist__10655);
    var type_fs = cljs.core.rest(arglist__10655);
    return listen_once_BANG___delegate(elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_once_BANG___delegate;
  return listen_once_BANG_;
}();
dommy.core.fire_BANG_ = function() {
  var fire_BANG___delegate = function(node, event_type, p__10656) {
    var vec__10658 = p__10656;
    var update_event_BANG_ = cljs.core.nth.call(null, vec__10658, 0, null);
    if (dommy.core.descendant_QMARK_.call(null, node, document.documentElement)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "descendant?", "descendant?", -1886221157, null), new cljs.core.Symbol(null, "node", "node", -1637144645, null), new cljs.core.Symbol("js", "document.documentElement", "js/document.documentElement", -1449696112, null)))));
    }
    var update_event_BANG___$1 = function() {
      var or__3577__auto__ = update_event_BANG_;
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return cljs.core.identity;
      }
    }();
    if (cljs.core.truth_(document.createEvent)) {
      var event = document.createEvent("Event");
      event.initEvent(cljs.core.name.call(null, event_type), true, true);
      return node.dispatchEvent(update_event_BANG___$1.call(null, event));
    } else {
      return node.fireEvent("on" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, event_type)), update_event_BANG___$1.call(null, document.createEventObject()));
    }
  };
  var fire_BANG_ = function(node, event_type, var_args) {
    var p__10656 = null;
    if (arguments.length > 2) {
      p__10656 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return fire_BANG___delegate.call(this, node, event_type, p__10656);
  };
  fire_BANG_.cljs$lang$maxFixedArity = 2;
  fire_BANG_.cljs$lang$applyTo = function(arglist__10659) {
    var node = cljs.core.first(arglist__10659);
    arglist__10659 = cljs.core.next(arglist__10659);
    var event_type = cljs.core.first(arglist__10659);
    var p__10656 = cljs.core.rest(arglist__10659);
    return fire_BANG___delegate(node, event_type, p__10656);
  };
  fire_BANG_.cljs$core$IFn$_invoke$arity$variadic = fire_BANG___delegate;
  return fire_BANG_;
}();
goog.provide("color.ral_picker");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
goog.require("util.map");
goog.require("dommy.core");
goog.require("dommy.core");
goog.require("html.canvas");
goog.require("html.canvas");
goog.require("monet.canvas");
goog.require("monet.canvas");
color.ral_picker.defaults = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "outer-band", "outer-band", 2711359417), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "color-fn", "color-fn", 4679998180), new cljs.core.Keyword(null, "average", "average", 4677423503), new cljs.core.Keyword(null, "force-full-saturation", "force-full-saturation", 3371675232), false, new cljs.core.Keyword(null, "force-midrange-brightness", "force-midrange-brightness", 2125973177), 
false], null), new cljs.core.Keyword(null, "band", "band", 1016920487), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "margin", "margin", 4227561760), 0], null), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "min-width", "min-width", 4418917885), 25, new cljs.core.Keyword(null, "border-width", "border-width", 1324275799), 0], null), new cljs.core.Keyword(null, "palette", "palette", 4509960685), 
new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "sort", "sort", 1017440528), false], null), new cljs.core.Keyword(null, "inner-band", "inner-band", 1790792382), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "sort", "sort", 1017440528), false], null), new cljs.core.Keyword(null, "focus-bar-width", "focus-bar-width", 2384076873), 2], null);
color.ral_picker.bucketize = function bucketize(items, num_buckets) {
  var bucket_size = cljs.core.count.call(null, items) / num_buckets;
  return cljs.core.map.call(null, function(bucket_size) {
    return function(p1__8868_SHARP_) {
      return cljs.core.map.call(null, cljs.core.second, p1__8868_SHARP_);
    };
  }(bucket_size), cljs.core.partition_by.call(null, function(bucket_size) {
    return function(p__8871) {
      var vec__8872 = p__8871;
      var idx = cljs.core.nth.call(null, vec__8872, 0, null);
      var elm = cljs.core.nth.call(null, vec__8872, 1, null);
      return Math.floor.call(null, idx / bucket_size);
    };
  }(bucket_size), cljs.core.map.call(null, cljs.core.vector, cljs.core.range.call(null), items)));
};
color.ral_picker.max_swatches = function max_swatches(radius) {
  return Math.floor.call(null, radius * 2 * Math.PI / cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "min-width", "min-width", 4418917885)], null)));
};
color.ral_picker.make_simple_swatch = function make_simple_swatch(color__$1) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "color", "color", 1108746965), color__$1], null);
};
color.ral_picker.swatch_color = function swatch_color(palette) {
  var color_fn = cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "outer-band", "outer-band", 2711359417), new cljs.core.Keyword(null, "color-fn", "color-fn", 4679998180)], null));
  var G__8874 = color_fn instanceof cljs.core.Keyword ? color_fn.fqn : null;
  switch(G__8874) {
    case "default":
      throw "bad color-fn: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(color_fn);break;
    case "average":
      return color.average.call(null, palette);
      break;
    case "median":
      return cljs.core.nth.call(null, palette, Math.floor.call(null, cljs.core.count.call(null, palette) / 2));
      break;
    case "first":
      return cljs.core.first.call(null, palette);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(color_fn));;
  }
};
color.ral_picker.sort_by_saturation_and_brightness = function sort_by_saturation_and_brightness(palette) {
  var f = function(p1__8876_SHARP_) {
    var vec__8878 = color.hsl.call(null, (new cljs.core.Keyword(null, "rgb", "rgb", 1014017087)).cljs$core$IFn$_invoke$arity$1(p1__8876_SHARP_));
    var _ = cljs.core.nth.call(null, vec__8878, 0, null);
    var s = cljs.core.nth.call(null, vec__8878, 1, null);
    var l = cljs.core.nth.call(null, vec__8878, 2, null);
    return Math.atan2.call(null, l - 0.5, s - 0.5);
  };
  return cljs.core.sort_by.call(null, f, palette);
};
color.ral_picker.make_complex_swatch = function make_complex_swatch(palette, parent_band) {
  var color__$1 = color.ral_picker.swatch_color.call(null, palette);
  var hsl = color.hsl.call(null, color__$1);
  var hsl__$1 = cljs.core.truth_(cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "outer-band", "outer-band", 2711359417), new cljs.core.Keyword(null, "force-full-saturation", "force-full-saturation", 3371675232)], null))) ? cljs.core.assoc.call(null, hsl, 1, 1) : hsl;
  var hsl__$2 = cljs.core.truth_(cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "outer-band", "outer-band", 2711359417), new cljs.core.Keyword(null, "force-midrange-brightness", "force-midrange-brightness", 2125973177)], null))) ? cljs.core.assoc.call(null, hsl__$1, 2, 0.5) : hsl__$1;
  var color__$2 = cljs.core.assoc.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), color.pack_rgb.call(null, color.hsl_to_rgb.call(null, hsl__$2)));
  var palette__$1 = cljs.core.truth_(cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "inner-band", "inner-band", 1790792382), new cljs.core.Keyword(null, "sort", "sort", 1017440528)], null))) ? color.ral_picker.sort_by_saturation_and_brightness.call(null, palette) : palette;
  var margin = cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "band", "band", 1016920487), new cljs.core.Keyword(null, "margin", "margin", 4227561760)], null));
  var width = (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(parent_band);
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(parent_band) - width - margin;
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "color", "color", 1108746965), color__$2, new cljs.core.Keyword(null, "band", "band", 1016920487), color.ral_picker.make_band.call(null, radius, width, palette__$1)], null);
};
color.ral_picker.make_band = function make_band(radius, width, palette) {
  var len = cljs.core.count.call(null, palette);
  var max_swatches = color.ral_picker.max_swatches.call(null, radius);
  var band = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "band", "band", 1016920487), new cljs.core.Keyword(null, "radius", "radius", 4370292740), radius, new cljs.core.Keyword(null, "width", "width", 1127031096), width], null);
  var swatch = len <= max_swatches ? cljs.core.map.call(null, color.ral_picker.make_simple_swatch, palette) : cljs.core.map.call(null, function(len, max_swatches, band) {
    return function(p1__8879_SHARP_) {
      return color.ral_picker.make_complex_swatch.call(null, p1__8879_SHARP_, band);
    };
  }(len, max_swatches, band), color.ral_picker.bucketize.call(null, palette, max_swatches));
  return cljs.core.assoc.call(null, band, new cljs.core.Keyword(null, "swatches", "swatches", 699594076), swatch);
};
color.ral_picker.draw_color_band = function draw_color_band(band) {
  var map__8886 = color.ral_picker.wheel;
  var map__8886__$1 = cljs.core.seq_QMARK_.call(null, map__8886) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8886) : map__8886;
  var center = cljs.core.get.call(null, map__8886__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__8886__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var inner_radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band) - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band);
  var palette = cljs.core.map.call(null, new cljs.core.Keyword(null, "color", "color", 1108746965), (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band));
  var len = cljs.core.count.call(null, palette);
  var angle_fn = function(map__8886, map__8886__$1, center, ctx, inner_radius, palette, len) {
    return function(p1__8880_SHARP_) {
      return p1__8880_SHARP_ / len * 2 * Math.PI;
    };
  }(map__8886, map__8886__$1, center, ctx, inner_radius, palette, len);
  var seq__8887 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
  var chunk__8888 = null;
  var count__8889 = 0;
  var i__8890 = 0;
  while (true) {
    if (i__8890 < count__8889) {
      var i = cljs.core._nth.call(null, chunk__8888, i__8890);
      var start_angle_8891 = angle_fn.call(null, i);
      var end_angle_8892 = angle_fn.call(null, i + 1);
      var start_8893 = html.canvas.point.call(null, inner_radius * Math.cos.call(null, start_angle_8891) + (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(center), inner_radius * Math.sin.call(null, start_angle_8891) + (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(center));
      monet.canvas.fill.call(null, monet.canvas.fill_style.call(null, html.canvas.line_to.call(null, html.canvas.arc.call(null, html.canvas.arc.call(null, html.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), start_8893), center, inner_radius, start_angle_8891, end_angle_8892, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), center, (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band), end_angle_8892, start_angle_8891, new cljs.core.Keyword(null, 
      "ccw", "ccw", 1014002569)), start_8893), (new cljs.core.Keyword(null, "rgb", "rgb", 1014017087)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, palette, i))));
      var bw_8894 = cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "border-width", "border-width", 1324275799)], null));
      if (bw_8894 > 0) {
        monet.canvas.stroke.call(null, monet.canvas.stroke_width.call(null, ctx, bw_8894));
      } else {
      }
      var G__8895 = seq__8887;
      var G__8896 = chunk__8888;
      var G__8897 = count__8889;
      var G__8898 = i__8890 + 1;
      seq__8887 = G__8895;
      chunk__8888 = G__8896;
      count__8889 = G__8897;
      i__8890 = G__8898;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__8887);
      if (temp__4126__auto__) {
        var seq__8887__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__8887__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__8887__$1);
          var G__8899 = cljs.core.chunk_rest.call(null, seq__8887__$1);
          var G__8900 = c__4333__auto__;
          var G__8901 = cljs.core.count.call(null, c__4333__auto__);
          var G__8902 = 0;
          seq__8887 = G__8899;
          chunk__8888 = G__8900;
          count__8889 = G__8901;
          i__8890 = G__8902;
          continue;
        } else {
          var i = cljs.core.first.call(null, seq__8887__$1);
          var start_angle_8903 = angle_fn.call(null, i);
          var end_angle_8904 = angle_fn.call(null, i + 1);
          var start_8905 = html.canvas.point.call(null, inner_radius * Math.cos.call(null, start_angle_8903) + (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(center), inner_radius * Math.sin.call(null, start_angle_8903) + (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(center));
          monet.canvas.fill.call(null, monet.canvas.fill_style.call(null, html.canvas.line_to.call(null, html.canvas.arc.call(null, html.canvas.arc.call(null, html.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), start_8905), center, inner_radius, start_angle_8903, end_angle_8904, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), center, (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band), end_angle_8904, start_angle_8903, new cljs.core.Keyword(null, 
          "ccw", "ccw", 1014002569)), start_8905), (new cljs.core.Keyword(null, "rgb", "rgb", 1014017087)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, palette, i))));
          var bw_8906 = cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "border-width", "border-width", 1324275799)], null));
          if (bw_8906 > 0) {
            monet.canvas.stroke.call(null, monet.canvas.stroke_width.call(null, ctx, bw_8906));
          } else {
          }
          var G__8907 = cljs.core.next.call(null, seq__8887__$1);
          var G__8908 = null;
          var G__8909 = 0;
          var G__8910 = 0;
          seq__8887 = G__8907;
          chunk__8888 = G__8908;
          count__8889 = G__8909;
          i__8890 = G__8910;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
color.ral_picker.in_inner_band_QMARK_ = function in_inner_band_QMARK_(e) {
  var map__8912 = color.ral_picker.wheel;
  var map__8912__$1 = cljs.core.seq_QMARK_.call(null, map__8912) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8912) : map__8912;
  var center = cljs.core.get.call(null, map__8912__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var band = cljs.core.get.call(null, map__8912__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var offset = html.canvas.offset.call(null, e);
  var distance = html.canvas.distance.call(null, center, offset);
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band) - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band) - cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "band", "band", 1016920487), new cljs.core.Keyword(null, "margin", "margin", 
  4227561760)], null));
  return distance <= radius && distance >= radius - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band);
};
color.ral_picker.bucket_index = function bucket_index(e, band) {
  var offset = html.canvas.offset.call(null, e);
  var center = html.canvas.center.call(null, e);
  var p = html.canvas.point_diff.call(null, offset, center);
  var theta = Math.atan2.call(null, (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(p), (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(p));
  var arc_length = theta >= 0 ? theta : theta + 2 * Math.PI;
  var bucket_arc = Math.PI * 2 / cljs.core.count.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band));
  return Math.floor.call(null, arc_length / bucket_arc);
};
color.ral_picker.cursor = function cursor() {
  return(new cljs.core.Keyword(null, "cursor", "cursor", 3959752392)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel)));
};
color.ral_picker.inner_index = function inner_index() {
  return(new cljs.core.Keyword(null, "inner", "inner", 1114259912)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.cursor.call(null));
};
color.ral_picker.outer_index = function outer_index() {
  return(new cljs.core.Keyword(null, "outer", "outer", 1120015341)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.cursor.call(null));
};
color.ral_picker.set_cursor_BANG_ = function set_cursor_BANG_(k, v) {
  return cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel), function(p1__8913_SHARP_) {
    return cljs.core.assoc_in.call(null, p1__8913_SHARP_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), k], null), v);
  });
};
color.ral_picker.focus_swatch = function focus_swatch(band, index, focus_QMARK_, inner_QMARK_) {
  var map__8915 = color.ral_picker.wheel;
  var map__8915__$1 = cljs.core.seq_QMARK_.call(null, map__8915) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8915) : map__8915;
  var center = cljs.core.get.call(null, map__8915__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__8915__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band);
  var radius__$1 = cljs.core.truth_(inner_QMARK_) ? radius - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band) - 2 : radius + 2;
  var palette_length = cljs.core.count.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band));
  var start_angle = Math.PI * 2 * index / palette_length;
  var end_angle = Math.PI * 2 * (index + 1) / palette_length;
  var start_angle__$1 = start_angle - (cljs.core.truth_(focus_QMARK_) ? 0 : 0.02);
  var end_angle__$1 = end_angle + (cljs.core.truth_(focus_QMARK_) ? 0 : 0.02);
  return monet.canvas.stroke.call(null, monet.canvas.stroke_style.call(null, monet.canvas.stroke_width.call(null, html.canvas.arc.call(null, monet.canvas.begin_path.call(null, ctx), center, radius__$1, start_angle__$1, end_angle__$1, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, 
  "focus-bar-width", "focus-bar-width", 2384076873)], null)) + (cljs.core.truth_(focus_QMARK_) ? 0 : 1)), cljs.core.truth_(focus_QMARK_) ? "#fff" : "#000"));
};
color.ral_picker.get_color = function get_color(e) {
  if (color.ral_picker.in_inner_band_QMARK_.call(null, e)) {
    var band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel);
    var oi = color.ral_picker.outer_index.call(null);
    var ii = color.ral_picker.inner_index.call(null);
    if (cljs.core.truth_(function() {
      var and__3565__auto__ = oi;
      if (cljs.core.truth_(and__3565__auto__)) {
        return ii;
      } else {
        return and__3565__auto__;
      }
    }())) {
      return(new cljs.core.Keyword(null, "color", "color", 1108746965)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), oi))), ii));
    } else {
      return null;
    }
  } else {
    return null;
  }
};
color.ral_picker.set_color_label_BANG_ = function() {
  var set_color_label_BANG___delegate = function(state, p__8916) {
    var vec__8919 = p__8916;
    var color__$1 = cljs.core.nth.call(null, vec__8919, 0, null);
    var text = function() {
      var G__8920 = state instanceof cljs.core.Keyword ? state.fqn : null;
      switch(G__8920) {
        case "color":
          return(new cljs.core.Keyword(null, "code", "code", 1016963423)).cljs$core$IFn$_invoke$arity$1(color__$1);
          break;
        case "palette":
          return "RAL";
          break;
        case "empty":
          return "";
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(state));;
      }
    }();
    return dommy.core.set_text_BANG_.call(null, (new cljs.core.Keyword(null, "color-label", "color-label", 900292476)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel), text);
  };
  var set_color_label_BANG_ = function(state, var_args) {
    var p__8916 = null;
    if (arguments.length > 1) {
      p__8916 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_color_label_BANG___delegate.call(this, state, p__8916);
  };
  set_color_label_BANG_.cljs$lang$maxFixedArity = 1;
  set_color_label_BANG_.cljs$lang$applyTo = function(arglist__8922) {
    var state = cljs.core.first(arglist__8922);
    var p__8916 = cljs.core.rest(arglist__8922);
    return set_color_label_BANG___delegate(state, p__8916);
  };
  set_color_label_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_color_label_BANG___delegate;
  return set_color_label_BANG_;
}();
color.ral_picker.clear_outer_focus = function clear_outer_focus() {
  var temp__4126__auto__ = color.ral_picker.outer_index.call(null);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var outer_index = temp__4126__auto__;
    var map__8924_8925 = color.ral_picker.wheel;
    var map__8924_8926__$1 = cljs.core.seq_QMARK_.call(null, map__8924_8925) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8924_8925) : map__8924_8925;
    var band_8927 = cljs.core.get.call(null, map__8924_8926__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
    var center_8928 = cljs.core.get.call(null, map__8924_8926__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
    var ctx_8929 = cljs.core.get.call(null, map__8924_8926__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
    color.ral_picker.focus_swatch.call(null, band_8927, outer_index, false, false);
    return color.ral_picker.set_cursor_BANG_.call(null, new cljs.core.Keyword(null, "outer", "outer", 1120015341), null);
  } else {
    return null;
  }
};
color.ral_picker.set_outer_focus = function set_outer_focus(e) {
  color.ral_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
  var map__8931 = color.ral_picker.wheel;
  var map__8931__$1 = cljs.core.seq_QMARK_.call(null, map__8931) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8931) : map__8931;
  var band = cljs.core.get.call(null, map__8931__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var center = cljs.core.get.call(null, map__8931__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__8931__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var outer_bucket_index = color.ral_picker.bucket_index.call(null, e, band);
  color.ral_picker.focus_swatch.call(null, band, outer_bucket_index, true, false);
  return color.ral_picker.set_cursor_BANG_.call(null, new cljs.core.Keyword(null, "outer", "outer", 1120015341), outer_bucket_index);
};
color.ral_picker.clear_inner_focus = function clear_inner_focus() {
  var temp__4126__auto__ = color.ral_picker.outer_index.call(null);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var outer_index = temp__4126__auto__;
    var temp__4126__auto____$1 = color.ral_picker.inner_index.call(null);
    if (cljs.core.truth_(temp__4126__auto____$1)) {
      var inner_index = temp__4126__auto____$1;
      var map__8933 = color.ral_picker.wheel;
      var map__8933__$1 = cljs.core.seq_QMARK_.call(null, map__8933) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8933) : map__8933;
      var center = cljs.core.get.call(null, map__8933__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
      var ctx = cljs.core.get.call(null, map__8933__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
      var band = cljs.core.get.call(null, map__8933__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
      var inner_band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), outer_index));
      color.ral_picker.focus_swatch.call(null, inner_band, inner_index, false, true);
      color.ral_picker.set_cursor_BANG_.call(null, new cljs.core.Keyword(null, "inner", "inner", 1114259912), null);
      return color.ral_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
    } else {
      return null;
    }
  } else {
    return null;
  }
};
color.ral_picker.set_inner_focus = function set_inner_focus(e) {
  var map__8935 = color.ral_picker.wheel;
  var map__8935__$1 = cljs.core.seq_QMARK_.call(null, map__8935) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8935) : map__8935;
  var center = cljs.core.get.call(null, map__8935__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__8935__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var band = cljs.core.get.call(null, map__8935__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var temp__4126__auto__ = color.ral_picker.outer_index.call(null);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var outer_index = temp__4126__auto__;
    var inner_band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), outer_index));
    var inner_index = color.ral_picker.bucket_index.call(null, e, inner_band);
    color.ral_picker.focus_swatch.call(null, inner_band, inner_index, true, true);
    color.ral_picker.set_cursor_BANG_.call(null, new cljs.core.Keyword(null, "inner", "inner", 1114259912), inner_index);
    return color.ral_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "color", "color", 1108746965), color.ral_picker.get_color.call(null, e));
  } else {
    return null;
  }
};
color.ral_picker.redraw = function redraw() {
  var map__8937 = color.ral_picker.wheel;
  var map__8937__$1 = cljs.core.seq_QMARK_.call(null, map__8937) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8937) : map__8937;
  var center = cljs.core.get.call(null, map__8937__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var band = cljs.core.get.call(null, map__8937__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var ctx = cljs.core.get.call(null, map__8937__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var canvas = cljs.core.get.call(null, map__8937__$1, new cljs.core.Keyword(null, "canvas", "canvas", 3941165258));
  html.canvas.clear.call(null, ctx);
  color.ral_picker.draw_color_band.call(null, (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel));
  return color.ral_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "palette", "palette", 4509960685));
};
color.ral_picker.on_mousemove = function on_mousemove(e) {
  var map__8939 = color.ral_picker.wheel;
  var map__8939__$1 = cljs.core.seq_QMARK_.call(null, map__8939) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8939) : map__8939;
  var center = cljs.core.get.call(null, map__8939__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var band = cljs.core.get.call(null, map__8939__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var offset = html.canvas.offset.call(null, e);
  var distance = html.canvas.distance.call(null, center, offset);
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band);
  var inner_index = color.ral_picker.inner_index.call(null);
  var outer_index = color.ral_picker.outer_index.call(null);
  if (distance <= radius && distance >= radius - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band)) {
    var outer_bucket_index = color.ral_picker.bucket_index.call(null, e, band);
    if (cljs.core.truth_(inner_index)) {
      color.ral_picker.clear_inner_focus.call(null);
    } else {
    }
    if (cljs.core.not_EQ_.call(null, outer_bucket_index, outer_index)) {
      color.ral_picker.clear_outer_focus.call(null);
      color.ral_picker.set_outer_focus.call(null, e);
      var inner_band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), outer_bucket_index));
      return color.ral_picker.draw_color_band.call(null, inner_band);
    } else {
      return null;
    }
  } else {
    if (color.ral_picker.in_inner_band_QMARK_.call(null, e)) {
      if (cljs.core.truth_(outer_index)) {
        var inner_band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), outer_index));
        var inner_bucket_index = color.ral_picker.bucket_index.call(null, e, inner_band);
        if (cljs.core.not_EQ_.call(null, inner_index, inner_bucket_index)) {
          color.ral_picker.clear_inner_focus.call(null);
          return color.ral_picker.set_inner_focus.call(null, e);
        } else {
          return null;
        }
      } else {
        return null;
      }
    } else {
      if (distance > radius) {
        if (cljs.core.truth_(outer_index)) {
          color.ral_picker.clear_inner_focus.call(null);
          color.ral_picker.clear_outer_focus.call(null);
          return color.ral_picker.redraw.call(null);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return color.ral_picker.clear_inner_focus.call(null);
        } else {
          return null;
        }
      }
    }
  }
};
color.ral_picker.on_mousedown = function on_mousedown(e) {
  var temp__4126__auto__ = color.ral_picker.get_color.call(null, e);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var color__$1 = temp__4126__auto__;
    return(new cljs.core.Keyword(null, "callback", "callback", 841683895)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel).call(null, cljs.core.clj__GT_js.call(null, color__$1));
  } else {
    return null;
  }
};
color.ral_picker.on_touchstart = function on_touchstart(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault();
    return color.ral_picker.on_mousemove.call(null, e);
  } else {
    return null;
  }
};
color.ral_picker.on_touchmove = function on_touchmove(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault();
    return color.ral_picker.on_mousemove.call(null, e);
  } else {
    return null;
  }
};
color.ral_picker.on_touchend = function on_touchend(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault();
    return color.ral_picker.on_mousedown.call(null, e);
  } else {
    return null;
  }
};
color.ral_picker.on_mouseout = function on_mouseout(e) {
  color.ral_picker.clear_inner_focus.call(null);
  color.ral_picker.clear_outer_focus.call(null);
  return color.ral_picker.redraw.call(null);
};
color.ral_picker.wheel_fn = function wheel_fn(w, f) {
  return function() {
    var G__8942__delegate = function(args) {
      var wheel8941 = color.ral_picker.wheel;
      try {
        color.ral_picker.wheel = w;
        return cljs.core.apply.call(null, f, args);
      } finally {
        color.ral_picker.wheel = wheel8941;
      }
    };
    var G__8942 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__8942__delegate.call(this, args);
    };
    G__8942.cljs$lang$maxFixedArity = 0;
    G__8942.cljs$lang$applyTo = function(arglist__8943) {
      var args = cljs.core.seq(arglist__8943);
      return G__8942__delegate(args);
    };
    G__8942.cljs$core$IFn$_invoke$arity$variadic = G__8942__delegate;
    return G__8942;
  }();
};
color.ral_picker.init = function init(container, palette, callback) {
  jayq.util.log.call(null, "initializing ral color wheel");
  var options = util.map.deep_merge_with.call(null, cljs.core.identity, color.ral_picker.defaults, cljs.core.PersistentArrayMap.EMPTY);
  var canvas = function() {
    var dom8947 = document.createElement("canvas");
    if (195) {
      dom8947.setAttribute("width", 195);
    } else {
    }
    if (195) {
      dom8947.setAttribute("height", 195);
    } else {
    }
    return dom8947;
  }();
  var color_label = function() {
    var dom8948 = document.createElement("span");
    if (cljs.core.truth_(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "display", "display", 2685668404), "table-cell", new cljs.core.Keyword(null, "vertical-align", "vertical-align", 3748992352), "middle", new cljs.core.Keyword(null, "max-width", "max-width", 3646439311), "90px"], null))) {
      dom8948.setAttribute("style", dommy.core.style_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "display", "display", 2685668404), "table-cell", new cljs.core.Keyword(null, "vertical-align", "vertical-align", 3748992352), "middle", new cljs.core.Keyword(null, "max-width", "max-width", 3646439311), "90px"], null)));
    } else {
    }
    return dom8948;
  }();
  var wheel8949 = color.ral_picker.wheel;
  try {
    color.ral_picker.wheel = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), options], null);
    var margin = (new cljs.core.Keyword(null, "focus-bar-width", "focus-bar-width", 2384076873)).cljs$core$IFn$_invoke$arity$1(options) + 1;
    var radius = canvas.height / 2 - margin;
    var width = radius / 3;
    var palette__$1 = cljs.core.truth_(cljs.core.get_in.call(null, options, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "palette", "palette", 4509960685), new cljs.core.Keyword(null, "sort", "sort", 1017440528)], null))) ? cljs.core.sort_by.call(null, color.hue, palette) : palette;
    var band = color.ral_picker.make_band.call(null, radius, width, palette__$1);
    color.ral_picker.wheel = cljs.core.assoc.call(null, color.ral_picker.wheel, new cljs.core.Keyword(null, "band", "band", 1016920487), band, new cljs.core.Keyword(null, "callback", "callback", 841683895), callback, new cljs.core.Keyword(null, "canvas", "canvas", 3941165258), canvas, new cljs.core.Keyword(null, "color-label", "color-label", 900292476), color_label, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097), monet.canvas.get_context.call(null, canvas, "2d"), new cljs.core.Keyword(null, 
    "center", "center", 3944857543), html.canvas.center.call(null, canvas), new cljs.core.Keyword(null, "state", "state", 1123661827), cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "outer", "outer", 1120015341), null, new cljs.core.Keyword(null, "inner", "inner", 1114259912), null], null)], null)));
    var wrapper_8950 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", 1123684643), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "position", "position", 1761709211), "relative", new cljs.core.Keyword(null, "height", "height", 4087841945), "195px", new cljs.core.Keyword(null, "width", "width", 1127031096), 
    "195px"], null)], null), canvas, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", 1123684643), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "color", "color", 1108746965), new cljs.core.Keyword(null, "text-align", "text-align", 1760136663), new cljs.core.Keyword(null, "font-size", "font-size", 3722789425), 
    new cljs.core.Keyword(null, "top", "top", 1014019271), new cljs.core.Keyword(null, "overflow", "overflow", 1543546740), new cljs.core.Keyword(null, "width", "width", 1127031096), new cljs.core.Keyword(null, "z-index", "z-index", 3303828785), new cljs.core.Keyword(null, "display", "display", 2685668404), new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.Keyword(null, "height", "height", 4087841945), new cljs.core.Keyword(null, "left", "left", 1017222009)], ["#AAA", 
    "center", "12px", "72px", "hidden", "90px", "-1", "table", "absolute", "50px", "53px"])], null), color_label], null)], null);
    dommy.core.append_BANG_.call(null, document.querySelector(dommy.core.selector.call(null, cljs.core.keyword.call(null, container))), wrapper_8950);
    color.ral_picker.redraw.call(null);
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mousemove", "mousemove", 1601016168), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_mousemove));
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mousedown", "mousedown", 1600748089), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_mousedown));
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchstart", "touchstart", 3730278389), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_touchstart));
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchmove", "touchmove", 1378440962), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_touchmove));
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchend", "touchend", 4489339054), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_touchend));
    return dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mouseout", "mouseout", 894298107), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_mouseout));
  } finally {
    color.ral_picker.wheel = wheel8949;
  }
};
goog.exportSymbol("color.ral_picker.init", color.ral_picker.init);
goog.provide("color");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
color.pack_rgb = function pack_rgb(rgb) {
  return cljs.core.apply.call(null, cljs.core.str, "#", cljs.core.map.call(null, function(p1__8497_SHARP_) {
    if (cljs.core.count.call(null, p1__8497_SHARP_) < 2) {
      return "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__8497_SHARP_);
    } else {
      return p1__8497_SHARP_;
    }
  }, cljs.core.map.call(null, function(p1__8496_SHARP_) {
    return p1__8496_SHARP_.toString(16);
  }, cljs.core.map.call(null, function(p1__8495_SHARP_) {
    return Math.round.call(null, p1__8495_SHARP_ * 255);
  }, rgb))));
};
color.unpack_rgb = function unpack_rgb(rgb) {
  return cljs.core.map.call(null, function(p1__8498_SHARP_) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, "0x", p1__8498_SHARP_)) / 255;
  }, cljs.core.partition.call(null, 2, cljs.core.rest.call(null, rgb)));
};
color.rgb_to_hsl = function rgb_to_hsl(rgb) {
  var vec__8500 = color.unpack_rgb.call(null, rgb);
  var r = cljs.core.nth.call(null, vec__8500, 0, null);
  var g = cljs.core.nth.call(null, vec__8500, 1, null);
  var b = cljs.core.nth.call(null, vec__8500, 2, null);
  var min = function() {
    var x__3891__auto__ = function() {
      var x__3891__auto__ = r;
      var y__3892__auto__ = g;
      return x__3891__auto__ < y__3892__auto__ ? x__3891__auto__ : y__3892__auto__;
    }();
    var y__3892__auto__ = b;
    return x__3891__auto__ < y__3892__auto__ ? x__3891__auto__ : y__3892__auto__;
  }();
  var max = function() {
    var x__3884__auto__ = function() {
      var x__3884__auto__ = r;
      var y__3885__auto__ = g;
      return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
    }();
    var y__3885__auto__ = b;
    return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
  }();
  var delta = max - min;
  var l = (min + max) / 2;
  var s = l > 0 && l < 1 ? delta / (l < 0.5 ? 2 * l : 2 - 2 * l) : 0;
  var h = delta > 0 ? ((cljs.core._EQ_.call(null, max, r) && cljs.core.not_EQ_.call(null, max, g) ? (g - b) / delta : 0) + (cljs.core._EQ_.call(null, max, g) && cljs.core.not_EQ_.call(null, max, b) ? 2 + (b - r) / delta : 0) + (cljs.core._EQ_.call(null, max, b) && cljs.core.not_EQ_.call(null, max, r) ? 4 + (r - g) / delta : 0)) / 6 : 0;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l], null);
};
color.hue_to_rgb = function hue_to_rgb(m1, m2, h) {
  var h__$1 = h < 0 ? h + 1 : h > 1 ? h - 1 : new cljs.core.Keyword(null, "default", "default", 2558708147) ? h : null;
  if (h__$1 * 6 < 1) {
    return m1 + (m2 - m1) * h__$1 * 6;
  } else {
    if (h__$1 * 2 < 1) {
      return m2;
    } else {
      if (h__$1 * 3 < 2) {
        return m1 + (m2 - m1) * (0.66666 - h__$1) * 6;
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return m1;
        } else {
          return null;
        }
      }
    }
  }
};
color.hsl_to_rgb = function hsl_to_rgb(p__8502) {
  var vec__8504 = p__8502;
  var h = cljs.core.nth.call(null, vec__8504, 0, null);
  var s = cljs.core.nth.call(null, vec__8504, 1, null);
  var l = cljs.core.nth.call(null, vec__8504, 2, null);
  var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
  var m1 = l * 2 - m2;
  var f = function(m2, m1, vec__8504, h, s, l) {
    return function(p1__8501_SHARP_) {
      return color.hue_to_rgb.call(null, m1, m2, h + p1__8501_SHARP_);
    };
  }(m2, m1, vec__8504, h, s, l);
  return cljs.core.map.call(null, f, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.33333, 0, -0.33333], null));
};
color.hsl = function hsl(color__$1) {
  return color.rgb_to_hsl.call(null, (new cljs.core.Keyword(null, "rgb", "rgb", 1014017087)).cljs$core$IFn$_invoke$arity$1(color__$1));
};
color.hue = function hue(color__$1) {
  return cljs.core.first.call(null, color.hsl.call(null, color__$1));
};
color.average = function average(colors) {
  var len = cljs.core.count.call(null, colors);
  return cljs.core.assoc.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), color.pack_rgb.call(null, cljs.core.map.call(null, function(len) {
    return function(p1__8507_SHARP_) {
      return p1__8507_SHARP_ / len;
    };
  }(len), cljs.core.reduce.call(null, function(len) {
    return function(p1__8505_SHARP_, p2__8506_SHARP_) {
      return cljs.core.map.call(null, cljs.core._PLUS_, p1__8505_SHARP_, p2__8506_SHARP_);
    };
  }(len), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0], null), cljs.core.map.call(null, color.unpack_rgb, cljs.core.map.call(null, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), colors))))));
};
color.format_name = function() {
  var method_table__4443__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4444__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4445__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4446__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4447__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("format-name", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__4447__auto__, method_table__4443__auto__, prefer_table__4444__auto__, method_cache__4445__auto__, cached_hierarchy__4446__auto__);
}();
color.formatName = function formatName(color__$1) {
  return color.format_name.call(null, edn.convert.call(null, color__$1));
};
goog.exportSymbol("color.formatName", color.formatName);
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj11118 = {};
  return obj11118;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3565__auto__ = reader;
    if (and__3565__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4204__auto__ = reader == null ? null : reader;
    return function() {
      var or__3577__auto__ = cljs.reader.read_char[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.reader.read_char["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3565__auto__ = reader;
    if (and__3565__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4204__auto__ = reader == null ? null : reader;
    return function() {
      var or__3577__auto__ = cljs.reader.unread[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.reader.unread["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3577__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__11119) {
    var rdr = cljs.core.first(arglist__11119);
    var msg = cljs.core.rest(arglist__11119);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3565__auto__ = !(ch === "#");
  if (and__3565__auto__) {
    var and__3565__auto____$1 = !(ch === "'");
    if (and__3565__auto____$1) {
      var and__3565__auto____$2 = !(ch === ":");
      if (and__3565__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3565__auto____$2;
      }
    } else {
      return and__3565__auto____$1;
    }
  } else {
    return and__3565__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__11120 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__11121 = cljs.reader.read_char.call(null, rdr);
      sb = G__11120;
      ch = G__11121;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var zero = groups[2];
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : new cljs.core.Keyword(null, "else", "else", 1017020587) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__11122 = cljs.reader.read_char.call(null, rdr);
      ch = G__11122;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__11123 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__11123;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__11124 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__11124;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3577__auto__ = ch == null;
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3577__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__11125 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__11126 = cljs.reader.read_char.call(null, reader);
      buffer = G__11125;
      ch = G__11126;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__11127 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__11128 = cljs.reader.read_char.call(null, reader);
        buffer = G__11127;
        ch = G__11128;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__11129 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__11130 = cljs.reader.read_char.call(null, reader);
            buffer = G__11129;
            ch = G__11130;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__11132 = o;
    if (G__11132) {
      var bit__4227__auto__ = G__11132.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4227__auto__ || G__11132.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__11132.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11132);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11132);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__11133 = reader;
        var G__11134 = eof_is_error;
        var G__11135 = sentinel;
        var G__11136 = is_recursive;
        reader = G__11133;
        eof_is_error = G__11134;
        sentinel = G__11135;
        is_recursive = G__11136;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__11137 = cljs.reader.read_comment.call(null, reader, ch);
          var G__11138 = eof_is_error;
          var G__11139 = sentinel;
          var G__11140 = is_recursive;
          reader = G__11137;
          eof_is_error = G__11138;
          sentinel = G__11139;
          is_recursive = G__11140;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__11141 = reader;
              var G__11142 = eof_is_error;
              var G__11143 = sentinel;
              var G__11144 = is_recursive;
              reader = G__11141;
              eof_is_error = G__11142;
              sentinel = G__11143;
              is_recursive = G__11144;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__11145 = b.append("0");
            b = G__11145;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__11147 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__11147, 0, null);
  var years = cljs.core.nth.call(null, vec__11147, 1, null);
  var months = cljs.core.nth.call(null, vec__11147, 2, null);
  var days = cljs.core.nth.call(null, vec__11147, 3, null);
  var hours = cljs.core.nth.call(null, vec__11147, 4, null);
  var minutes = cljs.core.nth.call(null, vec__11147, 5, null);
  var seconds = cljs.core.nth.call(null, vec__11147, 6, null);
  var fraction = cljs.core.nth.call(null, vec__11147, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__11147, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__11147, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__11147, 10, null);
  var v = vec__11147;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__11149 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__11149, 0, null);
    var months = cljs.core.nth.call(null, vec__11149, 1, null);
    var days = cljs.core.nth.call(null, vec__11149, 2, null);
    var hours = cljs.core.nth.call(null, vec__11149, 3, null);
    var minutes = cljs.core.nth.call(null, vec__11149, 4, null);
    var seconds = cljs.core.nth.call(null, vec__11149, 5, null);
    var ms = cljs.core.nth.call(null, vec__11149, 6, null);
    var offset = cljs.core.nth.call(null, vec__11149, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__11162_11174 = cljs.core.seq.call(null, form);
    var chunk__11163_11175 = null;
    var count__11164_11176 = 0;
    var i__11165_11177 = 0;
    while (true) {
      if (i__11165_11177 < count__11164_11176) {
        var x_11178 = cljs.core._nth.call(null, chunk__11163_11175, i__11165_11177);
        arr.push(x_11178);
        var G__11179 = seq__11162_11174;
        var G__11180 = chunk__11163_11175;
        var G__11181 = count__11164_11176;
        var G__11182 = i__11165_11177 + 1;
        seq__11162_11174 = G__11179;
        chunk__11163_11175 = G__11180;
        count__11164_11176 = G__11181;
        i__11165_11177 = G__11182;
        continue;
      } else {
        var temp__4126__auto___11183 = cljs.core.seq.call(null, seq__11162_11174);
        if (temp__4126__auto___11183) {
          var seq__11162_11184__$1 = temp__4126__auto___11183;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11162_11184__$1)) {
            var c__4333__auto___11185 = cljs.core.chunk_first.call(null, seq__11162_11184__$1);
            var G__11186 = cljs.core.chunk_rest.call(null, seq__11162_11184__$1);
            var G__11187 = c__4333__auto___11185;
            var G__11188 = cljs.core.count.call(null, c__4333__auto___11185);
            var G__11189 = 0;
            seq__11162_11174 = G__11186;
            chunk__11163_11175 = G__11187;
            count__11164_11176 = G__11188;
            i__11165_11177 = G__11189;
            continue;
          } else {
            var x_11190 = cljs.core.first.call(null, seq__11162_11184__$1);
            arr.push(x_11190);
            var G__11191 = cljs.core.next.call(null, seq__11162_11184__$1);
            var G__11192 = null;
            var G__11193 = 0;
            var G__11194 = 0;
            seq__11162_11174 = G__11191;
            chunk__11163_11175 = G__11192;
            count__11164_11176 = G__11193;
            i__11165_11177 = G__11194;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj11167 = {};
        return obj11167;
      }();
      var seq__11168_11195 = cljs.core.seq.call(null, form);
      var chunk__11169_11196 = null;
      var count__11170_11197 = 0;
      var i__11171_11198 = 0;
      while (true) {
        if (i__11171_11198 < count__11170_11197) {
          var vec__11172_11199 = cljs.core._nth.call(null, chunk__11169_11196, i__11171_11198);
          var k_11200 = cljs.core.nth.call(null, vec__11172_11199, 0, null);
          var v_11201 = cljs.core.nth.call(null, vec__11172_11199, 1, null);
          obj[cljs.core.name.call(null, k_11200)] = v_11201;
          var G__11202 = seq__11168_11195;
          var G__11203 = chunk__11169_11196;
          var G__11204 = count__11170_11197;
          var G__11205 = i__11171_11198 + 1;
          seq__11168_11195 = G__11202;
          chunk__11169_11196 = G__11203;
          count__11170_11197 = G__11204;
          i__11171_11198 = G__11205;
          continue;
        } else {
          var temp__4126__auto___11206 = cljs.core.seq.call(null, seq__11168_11195);
          if (temp__4126__auto___11206) {
            var seq__11168_11207__$1 = temp__4126__auto___11206;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11168_11207__$1)) {
              var c__4333__auto___11208 = cljs.core.chunk_first.call(null, seq__11168_11207__$1);
              var G__11209 = cljs.core.chunk_rest.call(null, seq__11168_11207__$1);
              var G__11210 = c__4333__auto___11208;
              var G__11211 = cljs.core.count.call(null, c__4333__auto___11208);
              var G__11212 = 0;
              seq__11168_11195 = G__11209;
              chunk__11169_11196 = G__11210;
              count__11170_11197 = G__11211;
              i__11171_11198 = G__11212;
              continue;
            } else {
              var vec__11173_11213 = cljs.core.first.call(null, seq__11168_11207__$1);
              var k_11214 = cljs.core.nth.call(null, vec__11173_11213, 0, null);
              var v_11215 = cljs.core.nth.call(null, vec__11173_11213, 1, null);
              obj[cljs.core.name.call(null, k_11214)] = v_11215;
              var G__11216 = cljs.core.next.call(null, seq__11168_11207__$1);
              var G__11217 = null;
              var G__11218 = 0;
              var G__11219 = 0;
              seq__11168_11195 = G__11216;
              chunk__11169_11196 = G__11217;
              count__11170_11197 = G__11218;
              i__11171_11198 = G__11219;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__11222) {
    var vec__11223 = p__11222;
    var k = cljs.core.nth.call(null, vec__11223, 0, null);
    var v = cljs.core.nth.call(null, vec__11223, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__11226) {
    var vec__11227 = p__11226;
    var k = cljs.core.nth.call(null, vec__11227, 0, null);
    var v = cljs.core.nth.call(null, vec__11227, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("edn");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("cljs.reader");
edn.keywordize_vals = function() {
  var method_table__4443__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4444__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4445__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4446__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4447__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("keywordize-vals", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__4447__auto__, method_table__4443__auto__, prefer_table__4444__auto__, method_cache__4445__auto__, cached_hierarchy__4446__auto__);
}();
cljs.core._add_method.call(null, edn.keywordize_vals, new cljs.core.Keyword(null, "default", "default", 2558708147), function(m) {
  return m;
});
edn.convert = function convert(object) {
  return edn.keywordize_vals.call(null, function(p1__9123_SHARP_) {
    return cljs.core.assoc.call(null, p1__9123_SHARP_, new cljs.core.Keyword(null, "type", "type", 1017479852), cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(p1__9123_SHARP_)));
  }.call(null, clojure.walk.keywordize_keys.call(null, cljs.core.js__GT_clj.call(null, object))));
};
edn.stringify = function stringify(object) {
  return cljs.core.pr_str.call(null, edn.convert.call(null, object));
};
goog.exportSymbol("edn.stringify", edn.stringify);
edn.objectify = function objectify(s) {
  return cljs.core.clj__GT_js.call(null, cljs.reader.read_string.call(null, s));
};
goog.exportSymbol("edn.objectify", edn.objectify);
goog.provide("color.valchromat");
goog.require("cljs.core");
goog.require("translate");
goog.require("translate");
goog.require("edn");
goog.require("color");
var raw_9117 = cljs.core.map.call(null, function(p1__9115_SHARP_) {
  return cljs.core.assoc.call(null, p1__9115_SHARP_, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783));
}, new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "light-grey", "light-grey", 758786216), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SLG", "SLG", 1013986432), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8F8F8F"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
"name", "name", 1017277949), new cljs.core.Keyword(null, "grey", "grey", 1017085521), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SCZ", "SCZ", 1013986172), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5A5A5A"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "black", "black", 1107723121), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, 
"SBL", "SBL", 1013986127), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#595853"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "chocolate-brown", "chocolate-brown", 842747351), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SCB", "SCB", 1013986148), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5C4136"], null), new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "brown", "brown", 1107915944), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SBR", "SBR", 1013986133), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9F7769"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "red", "red", 1014017027), new cljs.core.Keyword(null, "code", "code", 
1016963423), new cljs.core.Keyword(null, "SSC", "SSC", 1013986645), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CF4E61"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "orange", "orange", 4300020128), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SOR", "SOR", 1013986536), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#DF784D"], null), new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "yellow", "yellow", 4574631910), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SYW", "SYW", 1013986851), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CBA047"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "code", 
"code", 1016963423), new cljs.core.Keyword(null, "SGR", "SGR", 1013986288), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#549185"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "blue", "blue", 1016931276), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SRB", "SRB", 1013986613), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4E657E"], null), new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "violet", "violet", 4492527601), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SVI", "SVI", 1013986744), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#654E6A"], null)], null));
var rgb_oiled_9118 = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "orange", "orange", 4300020128), new cljs.core.Keyword(null, "yellow", "yellow", 4574631910), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "violet", "violet", 4492527601), new cljs.core.Keyword(null, "light-grey", "light-grey", 758786216), new cljs.core.Keyword(null, "red", "red", 1014017027), new cljs.core.Keyword(null, "blue", "blue", 1016931276), new cljs.core.Keyword(null, 
"grey", "grey", 1017085521), new cljs.core.Keyword(null, "brown", "brown", 1107915944), new cljs.core.Keyword(null, "chocolate-brown", "chocolate-brown", 842747351), new cljs.core.Keyword(null, "black", "black", 1107723121)], ["#AB522D", "#A7742F", "#192C28", "#47344A", "#656565", "#A02E3E", "#1A232B", "#2C2C2C", "#694133", "#2D201A", "#151516"]);
var oiled_9119 = cljs.core.map.call(null, function(raw_9117, rgb_oiled_9118) {
  return function(p1__9116_SHARP_) {
    return cljs.core.assoc.call(null, p1__9116_SHARP_, new cljs.core.Keyword(null, "finish", "finish", 4034428933), new cljs.core.Keyword(null, "oiled", "oiled", 1119650147), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), rgb_oiled_9118.call(null, p1__9116_SHARP_.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949))));
  };
}(raw_9117, rgb_oiled_9118), raw_9117);
color.valchromat.palettes = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "raw", "raw", 1014016922), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colors", "colors", 3954028770), raw_9117, new cljs.core.Keyword(null, "textures-src", "textures-src", 3821787329), "/pie-picker/valchromat-raw-palette-64.jpg", new cljs.core.Keyword(null, "label", "label", 1116631654), new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783)], null), new cljs.core.Keyword(null, 
"oiled", "oiled", 1119650147), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colors", "colors", 3954028770), oiled_9119, new cljs.core.Keyword(null, "textures-src", "textures-src", 3821787329), "/pie-picker/valchromat-oiled-palette-64.jpg", new cljs.core.Keyword(null, "label", "label", 1116631654), new cljs.core.Keyword(null, "valchromat-oiled", "valchromat-oiled", 3938820627)], null)], null);
color.valchromat.palette_strings = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "en", "en", 1013907483), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783), "Valchromat", new cljs.core.Keyword(null, "valchromat-oiled", "valchromat-oiled", 3938820627), "Oiled Valchromat"], null), new cljs.core.Keyword(null, "fr", "fr", 1013907518), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "valchromat", 
"valchromat", 4365324783), "Valchromat", new cljs.core.Keyword(null, "valchromat-oiled", "valchromat-oiled", 3938820627), "Valchromat Huil\u00e9"], null)], null);
color.valchromat.get_by_name = function get_by_name(palette, name) {
  return cljs.core.first.call(null, cljs.core.filter.call(null, function(p1__9120_SHARP_) {
    return cljs.core._EQ_.call(null, name, (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(p1__9120_SHARP_));
  }, (new cljs.core.Keyword(null, "colors", "colors", 3954028770)).cljs$core$IFn$_invoke$arity$1(palette)));
};
color.valchromat.get_by_name_js = function get_by_name_js(palette, name) {
  return cljs.core.clj__GT_js.call(null, color.valchromat.get_by_name.call(null, color.valchromat.palettes.call(null, cljs.core.keyword.call(null, palette)), cljs.core.keyword.call(null, name)));
};
goog.exportSymbol("color.valchromat.get_by_name_js", color.valchromat.get_by_name_js);
color.valchromat.default_raw_color = cljs.core.clj__GT_js.call(null, color.valchromat.get_by_name.call(null, (new cljs.core.Keyword(null, "raw", "raw", 1014016922)).cljs$core$IFn$_invoke$arity$1(color.valchromat.palettes), new cljs.core.Keyword(null, "red", "red", 1014017027)));
goog.exportSymbol("color.valchromat.default_raw_color", color.valchromat.default_raw_color);
color.valchromat.default_oiled_color = cljs.core.clj__GT_js.call(null, color.valchromat.get_by_name.call(null, (new cljs.core.Keyword(null, "oiled", "oiled", 1119650147)).cljs$core$IFn$_invoke$arity$1(color.valchromat.palettes), new cljs.core.Keyword(null, "red", "red", 1014017027)));
goog.exportSymbol("color.valchromat.default_oiled_color", color.valchromat.default_oiled_color);
cljs.core._add_method.call(null, edn.keywordize_vals, new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783), function(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var temp__4124__auto__ = m__$1.call(null, k);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var v = temp__4124__auto__;
      return cljs.core.assoc.call(null, m__$1, k, cljs.core.keyword.call(null, v));
    } else {
      return m__$1;
    }
  }, m, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finish", "finish", 4034428933), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "name", "name", 1017277949)], null));
});
color.valchromat.color_strings = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "en", "en", 1013907483), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "orange", "orange", 4300020128), new cljs.core.Keyword(null, "yellow", "yellow", 4574631910), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "violet", "violet", 4492527601), new cljs.core.Keyword(null, "light-grey", "light-grey", 758786216), new cljs.core.Keyword(null, 
"red", "red", 1014017027), new cljs.core.Keyword(null, "blue", "blue", 1016931276), new cljs.core.Keyword(null, "grey", "grey", 1017085521), new cljs.core.Keyword(null, "brown", "brown", 1107915944), new cljs.core.Keyword(null, "chocolate-brown", "chocolate-brown", 842747351), new cljs.core.Keyword(null, "black", "black", 1107723121)], ["orange", "yellow", "green", "violet", "light grey", "red", "blue", "grey", "brown", "chocolate brown", "black"]), new cljs.core.Keyword(null, "fr", "fr", 1013907518), 
cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "orange", "orange", 4300020128), new cljs.core.Keyword(null, "yellow", "yellow", 4574631910), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "violet", "violet", 4492527601), new cljs.core.Keyword(null, "light-grey", "light-grey", 758786216), new cljs.core.Keyword(null, "red", "red", 1014017027), new cljs.core.Keyword(null, "blue", "blue", 1016931276), new cljs.core.Keyword(null, "grey", "grey", 
1017085521), new cljs.core.Keyword(null, "brown", "brown", 1107915944), new cljs.core.Keyword(null, "chocolate-brown", "chocolate-brown", 842747351), new cljs.core.Keyword(null, "black", "black", 1107723121)], ["orange", "jaune", "vert", "violet", "gris clair", "rouge", "bleu", "gris", "marron", "marron chocolat", "noir"])], null);
cljs.core._add_method.call(null, color.format_name, new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783), function(p__9121) {
  var map__9122 = p__9121;
  var map__9122__$1 = cljs.core.seq_QMARK_.call(null, map__9122) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9122) : map__9122;
  var name = cljs.core.get.call(null, map__9122__$1, new cljs.core.Keyword(null, "name", "name", 1017277949));
  return translate.translate.call(null, color.valchromat.color_strings, name);
});
goog.provide("image");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
goog.require("monet.canvas");
goog.require("monet.canvas");
image.onload = function onload(m, f) {
  if (cljs.core.empty_QMARK_.call(null, m)) {
    return null;
  } else {
    var len = cljs.core.count.call(null, m);
    var a = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var m__$1 = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4302__auto__ = function(len, a) {
        return function iter__8523(s__8524) {
          return new cljs.core.LazySeq(null, function(len, a) {
            return function() {
              var s__8524__$1 = s__8524;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__8524__$1);
                if (temp__4126__auto__) {
                  var s__8524__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__8524__$2)) {
                    var c__4300__auto__ = cljs.core.chunk_first.call(null, s__8524__$2);
                    var size__4301__auto__ = cljs.core.count.call(null, c__4300__auto__);
                    var b__8526 = cljs.core.chunk_buffer.call(null, size__4301__auto__);
                    if (function() {
                      var i__8525 = 0;
                      while (true) {
                        if (i__8525 < size__4301__auto__) {
                          var vec__8529 = cljs.core._nth.call(null, c__4300__auto__, i__8525);
                          var k = cljs.core.nth.call(null, vec__8529, 0, null);
                          var src = cljs.core.nth.call(null, vec__8529, 1, null);
                          cljs.core.chunk_append.call(null, b__8526, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [src, function() {
                            var img = new Image;
                            var f__$1 = function(i__8525, img, vec__8529, k, src, c__4300__auto__, size__4301__auto__, b__8526, s__8524__$2, temp__4126__auto__, len, a) {
                              return function() {
                                return cljs.core.swap_BANG_.call(null, a, function(i__8525, img, vec__8529, k, src, c__4300__auto__, size__4301__auto__, b__8526, s__8524__$2, temp__4126__auto__, len, a) {
                                  return function(p1__8508_SHARP_) {
                                    return cljs.core.assoc.call(null, p1__8508_SHARP_, k, img);
                                  };
                                }(i__8525, img, vec__8529, k, src, c__4300__auto__, size__4301__auto__, b__8526, s__8524__$2, temp__4126__auto__, len, a));
                              };
                            }(i__8525, img, vec__8529, k, src, c__4300__auto__, size__4301__auto__, b__8526, s__8524__$2, temp__4126__auto__, len, a);
                            img.onabort = f__$1;
                            img.onerror = f__$1;
                            img.onload = f__$1;
                            return img;
                          }()], null));
                          var G__8537 = i__8525 + 1;
                          i__8525 = G__8537;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8526), iter__8523.call(null, cljs.core.chunk_rest.call(null, s__8524__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8526), null);
                    }
                  } else {
                    var vec__8530 = cljs.core.first.call(null, s__8524__$2);
                    var k = cljs.core.nth.call(null, vec__8530, 0, null);
                    var src = cljs.core.nth.call(null, vec__8530, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [src, function() {
                      var img = new Image;
                      var f__$1 = function(img, vec__8530, k, src, s__8524__$2, temp__4126__auto__, len, a) {
                        return function() {
                          return cljs.core.swap_BANG_.call(null, a, function(img, vec__8530, k, src, s__8524__$2, temp__4126__auto__, len, a) {
                            return function(p1__8508_SHARP_) {
                              return cljs.core.assoc.call(null, p1__8508_SHARP_, k, img);
                            };
                          }(img, vec__8530, k, src, s__8524__$2, temp__4126__auto__, len, a));
                        };
                      }(img, vec__8530, k, src, s__8524__$2, temp__4126__auto__, len, a);
                      img.onabort = f__$1;
                      img.onerror = f__$1;
                      img.onload = f__$1;
                      return img;
                    }()], null), iter__8523.call(null, cljs.core.rest.call(null, s__8524__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(len, a), null, null);
        };
      }(len, a);
      return iter__4302__auto__.call(null, m);
    }());
    cljs.core.add_watch.call(null, a, new cljs.core.Keyword(null, "onload", "onload", 4296654519), function(len, a, m__$1) {
      return function(k, a__$1, old_val, new_val) {
        if (cljs.core._EQ_.call(null, len, cljs.core.count.call(null, new_val))) {
          return f.call(null, new_val);
        } else {
          return null;
        }
      };
    }(len, a, m__$1));
    var seq__8531_8538 = cljs.core.seq.call(null, m__$1);
    var chunk__8532_8539 = null;
    var count__8533_8540 = 0;
    var i__8534_8541 = 0;
    while (true) {
      if (i__8534_8541 < count__8533_8540) {
        var vec__8535_8542 = cljs.core._nth.call(null, chunk__8532_8539, i__8534_8541);
        var src_8543 = cljs.core.nth.call(null, vec__8535_8542, 0, null);
        var img_8544 = cljs.core.nth.call(null, vec__8535_8542, 1, null);
        img_8544.src = src_8543;
        var G__8545 = seq__8531_8538;
        var G__8546 = chunk__8532_8539;
        var G__8547 = count__8533_8540;
        var G__8548 = i__8534_8541 + 1;
        seq__8531_8538 = G__8545;
        chunk__8532_8539 = G__8546;
        count__8533_8540 = G__8547;
        i__8534_8541 = G__8548;
        continue;
      } else {
        var temp__4126__auto___8549 = cljs.core.seq.call(null, seq__8531_8538);
        if (temp__4126__auto___8549) {
          var seq__8531_8550__$1 = temp__4126__auto___8549;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8531_8550__$1)) {
            var c__4333__auto___8551 = cljs.core.chunk_first.call(null, seq__8531_8550__$1);
            var G__8552 = cljs.core.chunk_rest.call(null, seq__8531_8550__$1);
            var G__8553 = c__4333__auto___8551;
            var G__8554 = cljs.core.count.call(null, c__4333__auto___8551);
            var G__8555 = 0;
            seq__8531_8538 = G__8552;
            chunk__8532_8539 = G__8553;
            count__8533_8540 = G__8554;
            i__8534_8541 = G__8555;
            continue;
          } else {
            var vec__8536_8556 = cljs.core.first.call(null, seq__8531_8550__$1);
            var src_8557 = cljs.core.nth.call(null, vec__8536_8556, 0, null);
            var img_8558 = cljs.core.nth.call(null, vec__8536_8556, 1, null);
            img_8558.src = src_8557;
            var G__8559 = cljs.core.next.call(null, seq__8531_8550__$1);
            var G__8560 = null;
            var G__8561 = 0;
            var G__8562 = 0;
            seq__8531_8538 = G__8559;
            chunk__8532_8539 = G__8560;
            count__8533_8540 = G__8561;
            i__8534_8541 = G__8562;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return true;
  }
};
image.get_img = function get_img(src_img, size, index) {
  var width = src_img.width;
  var num_columns = width / size;
  var row = cljs.core.quot.call(null, index, num_columns);
  var col = cljs.core.rem.call(null, index, num_columns);
  var canvas = document.createElement("CANVAS");
  canvas.width = size;
  canvas.height = size;
  monet.canvas.get_context.call(null, canvas, "2d").drawImage(src_img, col * size, row * size, size, size, 0, 0, size, size);
  return canvas;
};
goog.provide("color.ral");
goog.require("cljs.core");
color.ral.palette = cljs.core.map.call(null, function(p1__9111_SHARP_) {
  return cljs.core.assoc.call(null, p1__9111_SHARP_, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "ral", "ral", 1014016911));
}, cljs.core.PersistentVector.fromArray([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#BEBD7F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C2B078"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1002, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C6A664"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E5BE01"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CDA434"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 1005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A98307"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1006, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E4A010"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#DC9D00"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8A6642"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C7B446"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#EAE6CA"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E1CC4F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E6D690"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1016, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#EDFF21"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F5D033"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1018, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F8F32B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1019, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9E9764"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1020, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#999950"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1021, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F3DA0B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 1023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FAD201"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1024, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#AEA04B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FFFF00"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1027, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9D9101"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1028, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F4A900"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1032, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D6AE01"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1033, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F3A505"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1034, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#EFA94A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1035, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#6A5D4D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1036, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#705335"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1037, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F39F18"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2E3, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#ED760E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C93C20"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CB2821"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 2003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FF7514"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F44611"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FF2301"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FFA420"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F75E25"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F54021"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D84B20"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#EC7C26"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2012, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#E55137"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C35831"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#AF2B1E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3001, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A52019"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A2231D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9B111E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 3004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#75151E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5E2129"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#412227"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#642424"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#781F19"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C1876B"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A12312"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D36E70"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3015, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#EA899A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3016, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B32821"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E63244"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3018, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D53032"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3020, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CC0605"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D95030"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 3024, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F80000"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FE0000"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3027, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C51D34"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3028, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CB3234"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3031, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B32428"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3032, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#721422"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3033, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B44C43"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6D3F5B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4002, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#922B3E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#DE4C8A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#641C34"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4005, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C4675"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4006, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A03472"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4A192C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 4008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#924E7D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A18594"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CF3476"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8673A1"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C6874"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#354D73"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1F3438"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#20214F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1D1E33"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#18171C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1E2460"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5007, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#3E5F8A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#26252D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#025669"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5010, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#0E294B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#231A24"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3B83BD"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 5013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1E213D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#606E8C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2271B3"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#063971"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5018, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3F888F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5019, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1B5583"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5020, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1D334A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5021, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#256D7B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5022, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#252850"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#49678D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5024, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5D9B9B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5025, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2A6478"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#102C54"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#316650"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 6001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#287233"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2D572C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#424632"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1F3A3D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2F4538"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6006, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3E3B32"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#343B29"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#39352A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6009, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#31372B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#35682D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#587246"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6012, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#343E40"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C7156"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#47402E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 6015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3B3C36"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6016, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1E5945"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4C9141"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6018, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#57A639"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6019, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#BDECB6"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6020, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2E3A23"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6021, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#89AC76"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#25221B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6024, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#308446"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6025, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3D642D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#015D52"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6027, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#84C3BE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6028, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2C5545"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6029, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#20603D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 6032, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#317F43"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6033, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#497E76"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6034, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7FB5B5"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6035, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1C542D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6036, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#193737"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6037, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#008F39"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6038, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#00BB2D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#78858B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7001, new cljs.core.Keyword(null, "rgb", "rgb", 
1014017087), "#8A9597"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7E7B52"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C7059"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7004, new cljs.core.Keyword(null, 
"rgb", "rgb", 1014017087), "#969992"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#646B63"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7006, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6D6552"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 
7008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6A5F31"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4D5645"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4C514A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 7011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#434B4D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4E5754"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#464531"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#434750"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7016, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#293133"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7021, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#23282B"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#332F2C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#686C5E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7024, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#474A51"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2F353B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7030, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8B8C7A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7031, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#474B4E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7032, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B8B799"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7033, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7D8471"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 7034, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8F8B66"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7035, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D7D7D7"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7036, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7F7679"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7037, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7D7F7D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7038, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B5B8B1"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7039, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C6960"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7040, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9DA1AA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7042, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8D948D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7043, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#4E5452"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7044, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CAC4B0"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7045, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#909090"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7046, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#82898F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7047, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D0D0D0"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7048, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#898176"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 8E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#826C34"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#955F20"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C3B2A"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#734222"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8E402A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#59351F"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6F4F28"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5B3A29"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8012, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#592321"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#382C1E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#633A34"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8016, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4C2F27"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#45322E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8019, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#403A3A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 8022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#212121"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A65E2E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8024, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#79553D"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8025, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#755C48"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8028, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4E3B31"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8029, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#763C28"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FDF4E3"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E7EBDA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9003, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#F4F4F4"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#282828"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#0A0A0A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9006, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A5A5A5"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8F8F8F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FFFFFF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 9011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1C1C1C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9016, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F6F6F6"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1E1E1E"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9018, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D7D7D7"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9C9C9C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#828282"], null)], 
true));
goog.exportSymbol("color.ral.palette", color.ral.palette);
color.ral.get_color = function get_color(ral) {
  return cljs.core.first.call(null, cljs.core.filter.call(null, function(p1__9112_SHARP_) {
    return cljs.core._EQ_.call(null, ral, (new cljs.core.Keyword(null, "code", "code", 1016963423)).cljs$core$IFn$_invoke$arity$1(p1__9112_SHARP_));
  }, color.ral.palette));
};
color.ral.default_color = cljs.core.clj__GT_js.call(null, color.ral.get_color.call(null, 3027));
goog.exportSymbol("color.ral.default_color", color.ral.default_color);
cljs.core._add_method.call(null, color.format_name, new cljs.core.Keyword(null, "ral", "ral", 1014016911), function(p__9113) {
  var map__9114 = p__9113;
  var map__9114__$1 = cljs.core.seq_QMARK_.call(null, map__9114) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9114) : map__9114;
  var code = cljs.core.get.call(null, map__9114__$1, new cljs.core.Keyword(null, "code", "code", 1016963423));
  return "RAL " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(code);
});
goog.provide("color.val_picker");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("image");
goog.require("util.map");
goog.require("color.valchromat");
goog.require("translate");
goog.require("html.canvas");
goog.require("color.valchromat");
goog.require("html.canvas");
goog.require("dommy.core");
goog.require("monet.canvas");
goog.require("jayq.util");
goog.require("translate");
goog.require("monet.canvas");
goog.require("image");
goog.require("dommy.core");
color.val_picker.defaults = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "radius", "radius", 4370292740), 94, new cljs.core.Keyword(null, "width", "width", 1127031096), 43, new cljs.core.Keyword(null, "focus-bar-width", "focus-bar-width", 2384076873), 2], null);
color.val_picker.draw_static_wheel = function draw_static_wheel(ctx) {
  var map__9026 = color.val_picker.wheel;
  var map__9026__$1 = cljs.core.seq_QMARK_.call(null, map__9026) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9026) : map__9026;
  var center = cljs.core.get.call(null, map__9026__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var background = cljs.core.get.call(null, map__9026__$1, new cljs.core.Keyword(null, "background", "background", 3976677536));
  var map__9027 = cljs.core.get.call(null, map__9026__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
  var map__9027__$1 = cljs.core.seq_QMARK_.call(null, map__9027) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9027) : map__9027;
  var radius = cljs.core.get.call(null, map__9027__$1, new cljs.core.Keyword(null, "radius", "radius", 4370292740));
  return monet.canvas.stroke.call(null, monet.canvas.stroke_style.call(null, monet.canvas.stroke_width.call(null, html.canvas.arc.call(null, monet.canvas.begin_path.call(null, html.canvas.image.call(null, ctx, (new cljs.core.Keyword(null, "background", "background", 3976677536)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "x", "x", 1013904362), 0, new cljs.core.Keyword(null, "y", "y", 1013904363), 0], null))), center, 
  radius - 0, 0, 2 * Math.PI, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), 4), "#000"));
};
color.val_picker.draw_wheel = function draw_wheel(ctx) {
  var map__9035 = color.val_picker.wheel;
  var map__9035__$1 = cljs.core.seq_QMARK_.call(null, map__9035) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9035) : map__9035;
  var textures = cljs.core.get.call(null, map__9035__$1, new cljs.core.Keyword(null, "textures", "textures", 4306223658));
  var center = cljs.core.get.call(null, map__9035__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var map__9036 = cljs.core.get.call(null, map__9035__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
  var map__9036__$1 = cljs.core.seq_QMARK_.call(null, map__9036) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9036) : map__9036;
  var width = cljs.core.get.call(null, map__9036__$1, new cljs.core.Keyword(null, "width", "width", 1127031096));
  var radius = cljs.core.get.call(null, map__9036__$1, new cljs.core.Keyword(null, "radius", "radius", 4370292740));
  var inner_radius = radius - width;
  var len = cljs.core.count.call(null, textures);
  var angle_fn = function(map__9035, map__9035__$1, textures, center, map__9036, map__9036__$1, width, radius, inner_radius, len) {
    return function(p1__9028_SHARP_) {
      return p1__9028_SHARP_ / len * 2 * Math.PI;
    };
  }(map__9035, map__9035__$1, textures, center, map__9036, map__9036__$1, width, radius, inner_radius, len);
  var seq__9037 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
  var chunk__9038 = null;
  var count__9039 = 0;
  var i__9040 = 0;
  while (true) {
    if (i__9040 < count__9039) {
      var i = cljs.core._nth.call(null, chunk__9038, i__9040);
      var start_angle_9041 = angle_fn.call(null, i);
      var end_angle_9042 = angle_fn.call(null, i + 1);
      var start_9043 = html.canvas.point.call(null, inner_radius * Math.cos.call(null, start_angle_9041) + (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(center), inner_radius * Math.sin.call(null, start_angle_9041) + (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(center));
      var texture_9044 = cljs.core.nth.call(null, textures, i);
      var pattern_9045 = ctx.createPattern(cljs.core.nth.call(null, textures, i), "repeat");
      ctx.fillStyle = pattern_9045;
      monet.canvas.fill.call(null, html.canvas.line_to.call(null, html.canvas.arc.call(null, html.canvas.arc.call(null, html.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), start_9043), center, inner_radius, start_angle_9041, end_angle_9042, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), center, radius, end_angle_9042, start_angle_9041, new cljs.core.Keyword(null, "ccw", "ccw", 1014002569)), start_9043));
      var G__9046 = seq__9037;
      var G__9047 = chunk__9038;
      var G__9048 = count__9039;
      var G__9049 = i__9040 + 1;
      seq__9037 = G__9046;
      chunk__9038 = G__9047;
      count__9039 = G__9048;
      i__9040 = G__9049;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__9037);
      if (temp__4126__auto__) {
        var seq__9037__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9037__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__9037__$1);
          var G__9050 = cljs.core.chunk_rest.call(null, seq__9037__$1);
          var G__9051 = c__4333__auto__;
          var G__9052 = cljs.core.count.call(null, c__4333__auto__);
          var G__9053 = 0;
          seq__9037 = G__9050;
          chunk__9038 = G__9051;
          count__9039 = G__9052;
          i__9040 = G__9053;
          continue;
        } else {
          var i = cljs.core.first.call(null, seq__9037__$1);
          var start_angle_9054 = angle_fn.call(null, i);
          var end_angle_9055 = angle_fn.call(null, i + 1);
          var start_9056 = html.canvas.point.call(null, inner_radius * Math.cos.call(null, start_angle_9054) + (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(center), inner_radius * Math.sin.call(null, start_angle_9054) + (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(center));
          var texture_9057 = cljs.core.nth.call(null, textures, i);
          var pattern_9058 = ctx.createPattern(cljs.core.nth.call(null, textures, i), "repeat");
          ctx.fillStyle = pattern_9058;
          monet.canvas.fill.call(null, html.canvas.line_to.call(null, html.canvas.arc.call(null, html.canvas.arc.call(null, html.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), start_9056), center, inner_radius, start_angle_9054, end_angle_9055, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), center, radius, end_angle_9055, start_angle_9054, new cljs.core.Keyword(null, "ccw", "ccw", 1014002569)), start_9056));
          var G__9059 = cljs.core.next.call(null, seq__9037__$1);
          var G__9060 = null;
          var G__9061 = 0;
          var G__9062 = 0;
          seq__9037 = G__9059;
          chunk__9038 = G__9060;
          count__9039 = G__9061;
          i__9040 = G__9062;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
color.val_picker.set_color_label_BANG_ = function() {
  var set_color_label_BANG___delegate = function(state, p__9063) {
    var vec__9066 = p__9063;
    var index = cljs.core.nth.call(null, vec__9066, 0, null);
    var text = function() {
      var G__9067 = state instanceof cljs.core.Keyword ? state.fqn : null;
      switch(G__9067) {
        case "color":
          return color.format_name.call(null, cljs.core.nth.call(null, (new cljs.core.Keyword(null, "palette", "palette", 4509960685)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel), index));
          break;
        case "palette":
          return translate.translate.call(null, color.valchromat.palette_strings, (new cljs.core.Keyword(null, "label", "label", 1116631654)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel));
          break;
        case "empty":
          return "";
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(state));;
      }
    }();
    return dommy.core.set_text_BANG_.call(null, (new cljs.core.Keyword(null, "color-label", "color-label", 900292476)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel), text);
  };
  var set_color_label_BANG_ = function(state, var_args) {
    var p__9063 = null;
    if (arguments.length > 1) {
      p__9063 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_color_label_BANG___delegate.call(this, state, p__9063);
  };
  set_color_label_BANG_.cljs$lang$maxFixedArity = 1;
  set_color_label_BANG_.cljs$lang$applyTo = function(arglist__9069) {
    var state = cljs.core.first(arglist__9069);
    var p__9063 = cljs.core.rest(arglist__9069);
    return set_color_label_BANG___delegate(state, p__9063);
  };
  set_color_label_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_color_label_BANG___delegate;
  return set_color_label_BANG_;
}();
color.val_picker.redraw = function redraw() {
  var map__9071 = color.val_picker.wheel;
  var map__9071__$1 = cljs.core.seq_QMARK_.call(null, map__9071) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9071) : map__9071;
  var ctx = cljs.core.get.call(null, map__9071__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  color.val_picker.draw_wheel.call(null, monet.canvas.text_align.call(null, monet.canvas.font_style.call(null, monet.canvas.fill_style.call(null, html.canvas.clear.call(null, ctx), new cljs.core.Keyword(null, "#777", "#777", 1015001542)), "bold 12px Arial"), new cljs.core.Keyword(null, "left", "left", 1017222009)));
  return color.val_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "palette", "palette", 4509960685));
};
color.val_picker.normalize_angle = function normalize_angle(angle) {
  if (angle >= 0) {
    return angle;
  } else {
    return angle + 2 * Math.PI;
  }
};
color.val_picker.bucket_index = function bucket_index(e) {
  var offset = html.canvas.offset.call(null, e);
  var center = html.canvas.center.call(null, e);
  var p = html.canvas.point_diff.call(null, offset, center);
  var theta = color.val_picker.normalize_angle.call(null, Math.atan2.call(null, (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(p), (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(p)));
  var bucket_arc = Math.PI * 2 / cljs.core.count.call(null, (new cljs.core.Keyword(null, "palette", "palette", 4509960685)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel));
  return Math.floor.call(null, theta / bucket_arc);
};
color.val_picker.focus_swatch = function focus_swatch(index, focus_QMARK_) {
  var map__9074 = color.val_picker.wheel;
  var map__9074__$1 = cljs.core.seq_QMARK_.call(null, map__9074) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9074) : map__9074;
  var palette = cljs.core.get.call(null, map__9074__$1, new cljs.core.Keyword(null, "palette", "palette", 4509960685));
  var center = cljs.core.get.call(null, map__9074__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__9074__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var map__9075 = cljs.core.get.call(null, map__9074__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
  var map__9075__$1 = cljs.core.seq_QMARK_.call(null, map__9075) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9075) : map__9075;
  var radius = cljs.core.get.call(null, map__9075__$1, new cljs.core.Keyword(null, "radius", "radius", 4370292740));
  var radius__$1 = radius + 2;
  var palette_length = cljs.core.count.call(null, palette);
  var start_angle = Math.PI * 2 * index / palette_length;
  var end_angle = Math.PI * 2 * (index + 1) / palette_length;
  var start_angle__$1 = start_angle - (cljs.core.truth_(focus_QMARK_) ? 0 : 0.02);
  var end_angle__$1 = end_angle + (cljs.core.truth_(focus_QMARK_) ? 0 : 0.02);
  var start_angle__$2 = color.val_picker.normalize_angle.call(null, start_angle__$1);
  var end_angle__$2 = color.val_picker.normalize_angle.call(null, end_angle__$1);
  return monet.canvas.stroke.call(null, monet.canvas.stroke_style.call(null, monet.canvas.stroke_width.call(null, html.canvas.arc.call(null, monet.canvas.begin_path.call(null, ctx), center, radius__$1, start_angle__$2, end_angle__$2, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), cljs.core.get_in.call(null, color.val_picker.wheel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, 
  "focus-bar-width", "focus-bar-width", 2384076873)], null)) + (cljs.core.truth_(focus_QMARK_) ? 0 : 1)), cljs.core.truth_(focus_QMARK_) ? "#fff" : "#000"));
};
color.val_picker.clear_focus = function clear_focus() {
  var temp__4126__auto__ = color.val_picker.wheel;
  if (cljs.core.truth_(temp__4126__auto__)) {
    var map__9078 = temp__4126__auto__;
    var map__9078__$1 = cljs.core.seq_QMARK_.call(null, map__9078) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9078) : map__9078;
    var cursor = cljs.core.get.call(null, map__9078__$1, new cljs.core.Keyword(null, "cursor", "cursor", 3959752392));
    var map__9079_9080 = color.val_picker.wheel;
    var map__9079_9081__$1 = cljs.core.seq_QMARK_.call(null, map__9079_9080) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9079_9080) : map__9079_9080;
    var center_9082 = cljs.core.get.call(null, map__9079_9081__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
    var ctx_9083 = cljs.core.get.call(null, map__9079_9081__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
    color.val_picker.focus_swatch.call(null, cljs.core.deref.call(null, cursor), false);
    return cljs.core.swap_BANG_.call(null, cursor, cljs.core.constantly.call(null, null));
  } else {
    return null;
  }
};
color.val_picker.set_focus = function set_focus(e) {
  var map__9085 = color.val_picker.wheel;
  var map__9085__$1 = cljs.core.seq_QMARK_.call(null, map__9085) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9085) : map__9085;
  var cursor = cljs.core.get.call(null, map__9085__$1, new cljs.core.Keyword(null, "cursor", "cursor", 3959752392));
  var center = cljs.core.get.call(null, map__9085__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__9085__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var index = color.val_picker.bucket_index.call(null, e);
  color.val_picker.focus_swatch.call(null, index, true);
  color.val_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "color", "color", 1108746965), index);
  return cljs.core.swap_BANG_.call(null, cursor, cljs.core.constantly.call(null, index));
};
color.val_picker.on_mousemove = function on_mousemove(e) {
  var map__9087 = color.val_picker.wheel;
  var map__9087__$1 = cljs.core.seq_QMARK_.call(null, map__9087) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9087) : map__9087;
  var cursor = cljs.core.get.call(null, map__9087__$1, new cljs.core.Keyword(null, "cursor", "cursor", 3959752392));
  var opts = cljs.core.get.call(null, map__9087__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
  var center = cljs.core.get.call(null, map__9087__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var offset = html.canvas.offset.call(null, e);
  var distance = html.canvas.distance.call(null, center, offset);
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(opts);
  var width = (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(opts);
  if (distance <= radius && distance >= radius - width) {
    var index = color.val_picker.bucket_index.call(null, e);
    if (cljs.core.not_EQ_.call(null, cljs.core.deref.call(null, cursor), index)) {
      color.val_picker.clear_focus.call(null);
      return color.val_picker.set_focus.call(null, e);
    } else {
      return null;
    }
  } else {
    if (distance > radius) {
      if (cljs.core.truth_(cljs.core.deref.call(null, cursor))) {
        color.val_picker.clear_focus.call(null);
        return color.val_picker.redraw.call(null);
      } else {
        return null;
      }
    } else {
      if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
        if (cljs.core.truth_(cljs.core.deref.call(null, cursor))) {
          color.val_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
          return color.val_picker.clear_focus.call(null);
        } else {
          return null;
        }
      } else {
        return null;
      }
    }
  }
};
color.val_picker.on_mousedown = function on_mousedown(e) {
  jayq.util.log.call(null, "mousedown");
  var temp__4126__auto__ = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "cursor", "cursor", 3959752392)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel));
  if (cljs.core.truth_(temp__4126__auto__)) {
    var index = temp__4126__auto__;
    var map__9089 = color.val_picker.wheel;
    var map__9089__$1 = cljs.core.seq_QMARK_.call(null, map__9089) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9089) : map__9089;
    var palette = cljs.core.get.call(null, map__9089__$1, new cljs.core.Keyword(null, "palette", "palette", 4509960685));
    var callback = cljs.core.get.call(null, map__9089__$1, new cljs.core.Keyword(null, "callback", "callback", 841683895));
    var color__$1 = cljs.core.nth.call(null, palette, index);
    return callback.call(null, cljs.core.clj__GT_js.call(null, color__$1));
  } else {
    return null;
  }
};
color.val_picker.on_touchstart = function on_touchstart(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault();
    return color.val_picker.on_mousemove.call(null, e);
  } else {
    return null;
  }
};
color.val_picker.on_touchmove = function on_touchmove(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault;
    return color.val_picker.on_mousemove.call(null, e);
  } else {
    return null;
  }
};
color.val_picker.on_touchend = function on_touchend(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault;
    return color.val_picker.on_mousedown.call(null, e);
  } else {
    return null;
  }
};
color.val_picker.on_mouseout = function on_mouseout(e) {
  color.val_picker.clear_focus.call(null);
  return color.val_picker.redraw.call(null);
};
color.val_picker.wheel_fn = function wheel_fn(w, f) {
  return function() {
    var G__9092__delegate = function(args) {
      var wheel9091 = color.val_picker.wheel;
      try {
        color.val_picker.wheel = w;
        return cljs.core.apply.call(null, f, args);
      } finally {
        color.val_picker.wheel = wheel9091;
      }
    };
    var G__9092 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9092__delegate.call(this, args);
    };
    G__9092.cljs$lang$maxFixedArity = 0;
    G__9092.cljs$lang$applyTo = function(arglist__9093) {
      var args = cljs.core.seq(arglist__9093);
      return G__9092__delegate(args);
    };
    G__9092.cljs$core$IFn$_invoke$arity$variadic = G__9092__delegate;
    return G__9092;
  }();
};
color.val_picker.init = function init(container, palette_name, callback) {
  jayq.util.log.call(null, "initializing valchromat wheel ", palette_name);
  var canvas = function() {
    var dom9103 = document.createElement("canvas");
    if (195) {
      dom9103.setAttribute("width", 195);
    } else {
    }
    if (195) {
      dom9103.setAttribute("height", 195);
    } else {
    }
    return dom9103;
  }();
  var color_label = function() {
    var dom9104 = document.createElement("span");
    if (cljs.core.truth_(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "display", "display", 2685668404), "table-cell", new cljs.core.Keyword(null, "vertical-align", "vertical-align", 3748992352), "middle", new cljs.core.Keyword(null, "max-width", "max-width", 3646439311), "90px"], null))) {
      dom9104.setAttribute("style", dommy.core.style_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "display", "display", 2685668404), "table-cell", new cljs.core.Keyword(null, "vertical-align", "vertical-align", 3748992352), "middle", new cljs.core.Keyword(null, "max-width", "max-width", 3646439311), "90px"], null)));
    } else {
    }
    return dom9104;
  }();
  var map__9102 = cljs.core.keyword.call(null, palette_name).call(null, color.valchromat.palettes);
  var map__9102__$1 = cljs.core.seq_QMARK_.call(null, map__9102) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9102) : map__9102;
  var label = cljs.core.get.call(null, map__9102__$1, new cljs.core.Keyword(null, "label", "label", 1116631654));
  var textures_src = cljs.core.get.call(null, map__9102__$1, new cljs.core.Keyword(null, "textures-src", "textures-src", 3821787329));
  var colors = cljs.core.get.call(null, map__9102__$1, new cljs.core.Keyword(null, "colors", "colors", 3954028770));
  return image.onload.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "textures", "textures", 4306223658), textures_src], null), function(canvas, color_label, map__9102, map__9102__$1, label, textures_src, colors) {
    return function(images9105) {
      var textures = (new cljs.core.Keyword(null, "textures", "textures", 4306223658)).cljs$core$IFn$_invoke$arity$1(images9105);
      color.val_picker.wheel = cljs.core.assoc.call(null, color.val_picker.wheel, new cljs.core.Keyword(null, "opts", "opts", 1017322386), color.val_picker.defaults, new cljs.core.Keyword(null, "palette", "palette", 4509960685), colors, new cljs.core.Keyword(null, "textures", "textures", 4306223658), function() {
        var iter__4302__auto__ = function(textures, canvas, color_label, map__9102, map__9102__$1, label, textures_src, colors) {
          return function iter__9106(s__9107) {
            return new cljs.core.LazySeq(null, function(textures, canvas, color_label, map__9102, map__9102__$1, label, textures_src, colors) {
              return function() {
                var s__9107__$1 = s__9107;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__9107__$1);
                  if (temp__4126__auto__) {
                    var s__9107__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__9107__$2)) {
                      var c__4300__auto__ = cljs.core.chunk_first.call(null, s__9107__$2);
                      var size__4301__auto__ = cljs.core.count.call(null, c__4300__auto__);
                      var b__9109 = cljs.core.chunk_buffer.call(null, size__4301__auto__);
                      if (function() {
                        var i__9108 = 0;
                        while (true) {
                          if (i__9108 < size__4301__auto__) {
                            var i = cljs.core._nth.call(null, c__4300__auto__, i__9108);
                            cljs.core.chunk_append.call(null, b__9109, image.get_img.call(null, textures, 64, i));
                            var G__9110 = i__9108 + 1;
                            i__9108 = G__9110;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9109), iter__9106.call(null, cljs.core.chunk_rest.call(null, s__9107__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9109), null);
                      }
                    } else {
                      var i = cljs.core.first.call(null, s__9107__$2);
                      return cljs.core.cons.call(null, image.get_img.call(null, textures, 64, i), iter__9106.call(null, cljs.core.rest.call(null, s__9107__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(textures, canvas, color_label, map__9102, map__9102__$1, label, textures_src, colors), null, null);
          };
        }(textures, canvas, color_label, map__9102, map__9102__$1, label, textures_src, colors);
        return iter__4302__auto__.call(null, cljs.core.range.call(null, 11));
      }(), new cljs.core.Keyword(null, "canvas", "canvas", 3941165258), canvas, new cljs.core.Keyword(null, "color-label", "color-label", 900292476), color_label, new cljs.core.Keyword(null, "label", "label", 1116631654), label, new cljs.core.Keyword(null, "callback", "callback", 841683895), callback, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097), monet.canvas.get_context.call(null, canvas, "2d"), new cljs.core.Keyword(null, "center", "center", 3944857543), html.canvas.center.call(null, canvas), 
      new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), cljs.core.atom.call(null, null));
      var wrapper = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", 1123684643), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "position", "position", 1761709211), "relative"], null)], null), canvas, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
      "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", 1123684643), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "color", "color", 1108746965), new cljs.core.Keyword(null, "text-align", "text-align", 1760136663), new cljs.core.Keyword(null, "font-size", "font-size", 3722789425), new cljs.core.Keyword(null, "top", "top", 1014019271), new cljs.core.Keyword(null, "overflow", "overflow", 1543546740), new cljs.core.Keyword(null, 
      "width", "width", 1127031096), new cljs.core.Keyword(null, "z-index", "z-index", 3303828785), new cljs.core.Keyword(null, "display", "display", 2685668404), new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.Keyword(null, "height", "height", 4087841945), new cljs.core.Keyword(null, "left", "left", 1017222009)], ["#AAA", "center", "12px", "72px", "hidden", "90px", "-1", "table", "absolute", "50px", "53px"])], null), color_label], null)], null);
      dommy.core.append_BANG_.call(null, document.querySelector(dommy.core.selector.call(null, cljs.core.keyword.call(null, container))), wrapper);
      color.val_picker.redraw.call(null);
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mousemove", "mousemove", 1601016168), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_mousemove));
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mousedown", "mousedown", 1600748089), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_mousedown));
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchstart", "touchstart", 3730278389), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_touchstart));
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchmove", "touchmove", 1378440962), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_touchmove));
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchend", "touchend", 4489339054), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_touchend));
      return dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mouseout", "mouseout", 894298107), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_mouseout));
    };
  }(canvas, color_label, map__9102, map__9102__$1, label, textures_src, colors));
};
goog.exportSymbol("color.val_picker.init", color.val_picker.init);

//# sourceMappingURL=main.js.map