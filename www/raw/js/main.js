var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_DEFINES;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.DEBUG) {
    if (!caller) {
      throw Error("arguments.caller not defined.  goog.base() expects not " + "to be running in strict mode. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
    }
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;").replace(goog.string.singleQuoteRe_, "\x26#39;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.singleQuoteRe_, "\x26#39;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /"/g;
goog.string.singleQuoteRe_ = /'/g;
goog.string.allRe_ = /[&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2234";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__18129__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__18129 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__18129__delegate.call(this, args);
    };
    G__18129.cljs$lang$maxFixedArity = 0;
    G__18129.cljs$lang$applyTo = function(arglist__18130) {
      var args = cljs.core.seq(arglist__18130);
      return G__18129__delegate(args);
    };
    G__18129.cljs$core$IFn$_invoke$arity$variadic = G__18129__delegate;
    return G__18129;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3565__auto__ = ty;
    if (cljs.core.truth_(and__3565__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3565__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4433__auto___18131 = len;
  var i_18132 = 0;
  while (true) {
    if (i_18132 < n__4433__auto___18131) {
      new_arr[i_18132] = arr[i_18132];
      var G__18133 = i_18132 + 1;
      i_18132 = G__18133;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__18134__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__18134 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18134__delegate.call(this, array, i, idxs);
    };
    G__18134.cljs$lang$maxFixedArity = 2;
    G__18134.cljs$lang$applyTo = function(arglist__18135) {
      var array = cljs.core.first(arglist__18135);
      arglist__18135 = cljs.core.next(arglist__18135);
      var i = cljs.core.first(arglist__18135);
      var idxs = cljs.core.rest(arglist__18135);
      return G__18134__delegate(array, i, idxs);
    };
    G__18134.cljs$core$IFn$_invoke$arity$variadic = G__18134__delegate;
    return G__18134;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__18136__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__18136 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18136__delegate.call(this, array, idx, idx2, idxv);
    };
    G__18136.cljs$lang$maxFixedArity = 3;
    G__18136.cljs$lang$applyTo = function(arglist__18137) {
      var array = cljs.core.first(arglist__18137);
      arglist__18137 = cljs.core.next(arglist__18137);
      var idx = cljs.core.first(arglist__18137);
      arglist__18137 = cljs.core.next(arglist__18137);
      var idx2 = cljs.core.first(arglist__18137);
      var idxv = cljs.core.rest(arglist__18137);
      return G__18136__delegate(array, idx, idx2, idxv);
    };
    G__18136.cljs$core$IFn$_invoke$arity$variadic = G__18136__delegate;
    return G__18136;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj18139 = {};
  return obj18139;
}();
cljs.core.IFn = function() {
  var obj18141 = {};
  return obj18141;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3565__auto__ = this$;
      if (and__3565__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4204__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3577__auto__ = cljs.core._invoke[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._invoke["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj18143 = {};
  return obj18143;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3565__auto__ = value;
    if (and__3565__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4204__auto__ = value == null ? null : value;
    return function() {
      var or__3577__auto__ = cljs.core._clone[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._clone["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj18145 = {};
  return obj18145;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._count[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._count["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj18147 = {};
  return obj18147;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._empty[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._empty["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj18149 = {};
  return obj18149;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._conj[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._conj["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj18151 = {};
  return obj18151;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3565__auto__ = coll;
      if (and__3565__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4204__auto__ = coll == null ? null : coll;
      return function() {
        var or__3577__auto__ = cljs.core._nth[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._nth["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3565__auto__ = coll;
      if (and__3565__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4204__auto__ = coll == null ? null : coll;
      return function() {
        var or__3577__auto__ = cljs.core._nth[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._nth["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj18153 = {};
  return obj18153;
}();
cljs.core.ISeq = function() {
  var obj18155 = {};
  return obj18155;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._first[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._first["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._rest[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._rest["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj18157 = {};
  return obj18157;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._next[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._next["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj18159 = {};
  return obj18159;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._lookup[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._lookup["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._lookup[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._lookup["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj18161 = {};
  return obj18161;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._assoc[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._assoc["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj18163 = {};
  return obj18163;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._dissoc[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._dissoc["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj18165 = {};
  return obj18165;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._key[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._key["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._val[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._val["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj18167 = {};
  return obj18167;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._disjoin[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._disjoin["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj18169 = {};
  return obj18169;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._peek[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._peek["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._pop[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._pop["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj18171 = {};
  return obj18171;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._assoc_n[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj18173 = {};
  return obj18173;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._deref[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._deref["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj18175 = {};
  return obj18175;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj18177 = {};
  return obj18177;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._meta[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._meta["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj18179 = {};
  return obj18179;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._with_meta[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._with_meta["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj18181 = {};
  return obj18181;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3565__auto__ = coll;
      if (and__3565__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4204__auto__ = coll == null ? null : coll;
      return function() {
        var or__3577__auto__ = cljs.core._reduce[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._reduce["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3565__auto__ = coll;
      if (and__3565__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4204__auto__ = coll == null ? null : coll;
      return function() {
        var or__3577__auto__ = cljs.core._reduce[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._reduce["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj18183 = {};
  return obj18183;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj18185 = {};
  return obj18185;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._equiv[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._equiv["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj18187 = {};
  return obj18187;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._hash[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._hash["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj18189 = {};
  return obj18189;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._seq[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._seq["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj18191 = {};
  return obj18191;
}();
cljs.core.IList = function() {
  var obj18193 = {};
  return obj18193;
}();
cljs.core.IRecord = function() {
  var obj18195 = {};
  return obj18195;
}();
cljs.core.IReversible = function() {
  var obj18197 = {};
  return obj18197;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._rseq[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._rseq["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj18199 = {};
  return obj18199;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._entry_key[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._entry_key["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._comparator[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._comparator["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj18201 = {};
  return obj18201;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3565__auto__ = writer;
    if (and__3565__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4204__auto__ = writer == null ? null : writer;
    return function() {
      var or__3577__auto__ = cljs.core._write[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._write["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3565__auto__ = writer;
    if (and__3565__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4204__auto__ = writer == null ? null : writer;
    return function() {
      var or__3577__auto__ = cljs.core._flush[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._flush["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj18203 = {};
  return obj18203;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._pr_writer[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj18205 = {};
  return obj18205;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3565__auto__ = d;
    if (and__3565__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4204__auto__ = d == null ? null : d;
    return function() {
      var or__3577__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj18207 = {};
  return obj18207;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3565__auto__ = this$;
    if (and__3565__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4204__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3577__auto__ = cljs.core._notify_watches[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3565__auto__ = this$;
    if (and__3565__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4204__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3577__auto__ = cljs.core._add_watch[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._add_watch["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3565__auto__ = this$;
    if (and__3565__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4204__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3577__auto__ = cljs.core._remove_watch[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj18209 = {};
  return obj18209;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._as_transient[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._as_transient["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj18211 = {};
  return obj18211;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj18213 = {};
  return obj18213;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj18215 = {};
  return obj18215;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj18217 = {};
  return obj18217;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj18219 = {};
  return obj18219;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3565__auto__ = tcoll;
    if (and__3565__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4204__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3577__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj18221 = {};
  return obj18221;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._compare[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._compare["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj18223 = {};
  return obj18223;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._drop_first[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._drop_first["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj18225 = {};
  return obj18225;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._chunked_first[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj18227 = {};
  return obj18227;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3565__auto__ = coll;
    if (and__3565__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4204__auto__ = coll == null ? null : coll;
    return function() {
      var or__3577__auto__ = cljs.core._chunked_next[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj18229 = {};
  return obj18229;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._name[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._name["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._namespace[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._namespace["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3565__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3565__auto__) {
        return b.ns;
      } else {
        return and__3565__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3988__auto__ = self__._hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__18231 = null;
  var G__18231__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__18231__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__18231 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18231__2.call(this, self__, coll);
      case 3:
        return G__18231__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18231;
}();
cljs.core.Symbol.prototype.apply = function(self__, args18230) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18230)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__18233 = value;
  if (G__18233) {
    var bit__4227__auto__ = G__18233.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4227__auto__ || G__18233.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__18233.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__18233);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__18233);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__18235 = coll;
      if (G__18235) {
        var bit__4220__auto__ = G__18235.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4220__auto__ || G__18235.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__18237 = coll;
      if (G__18237) {
        var bit__4220__auto__ = G__18237.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4220__auto__ || G__18237.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__18239 = coll;
      if (G__18239) {
        var bit__4220__auto__ = G__18239.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4220__auto__ || G__18239.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__18241 = coll;
      if (G__18241) {
        var bit__4220__auto__ = G__18241.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4220__auto__ || G__18241.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__18242__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__18243 = y;
            var G__18244 = cljs.core.first.call(null, more);
            var G__18245 = cljs.core.next.call(null, more);
            x = G__18243;
            y = G__18244;
            more = G__18245;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18242 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18242__delegate.call(this, x, y, more);
    };
    G__18242.cljs$lang$maxFixedArity = 2;
    G__18242.cljs$lang$applyTo = function(arglist__18246) {
      var x = cljs.core.first(arglist__18246);
      arglist__18246 = cljs.core.next(arglist__18246);
      var y = cljs.core.first(arglist__18246);
      var more = cljs.core.rest(arglist__18246);
      return G__18242__delegate(x, y, more);
    };
    G__18242.cljs$core$IFn$_invoke$arity$variadic = G__18242__delegate;
    return G__18242;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__18247 = nval;
            var G__18248 = n + 1;
            val = G__18247;
            n = G__18248;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__18249 = nval;
          var G__18250 = n + 1;
          val__$1 = G__18249;
          n = G__18250;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__18251 = nval;
          var G__18252 = n + 1;
          val__$1 = G__18251;
          n = G__18252;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__18253 = nval;
            var G__18254 = n + 1;
            val = G__18253;
            n = G__18254;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__18255 = nval;
          var G__18256 = n + 1;
          val__$1 = G__18255;
          n = G__18256;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__18257 = nval;
          var G__18258 = n + 1;
          val__$1 = G__18257;
          n = G__18258;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__18260 = x;
  if (G__18260) {
    var bit__4227__auto__ = G__18260.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4227__auto__ || G__18260.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__18260.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__18260);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__18260);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__18262 = x;
  if (G__18262) {
    var bit__4227__auto__ = G__18262.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4227__auto__ || G__18262.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__18262.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__18262);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__18262);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__18263 = sn;
      s = G__18263;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__18264__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__18265 = conj.call(null, coll, x);
          var G__18266 = cljs.core.first.call(null, xs);
          var G__18267 = cljs.core.next.call(null, xs);
          coll = G__18265;
          x = G__18266;
          xs = G__18267;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__18264 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18264__delegate.call(this, coll, x, xs);
    };
    G__18264.cljs$lang$maxFixedArity = 2;
    G__18264.cljs$lang$applyTo = function(arglist__18268) {
      var coll = cljs.core.first(arglist__18268);
      arglist__18268 = cljs.core.next(arglist__18268);
      var x = cljs.core.first(arglist__18268);
      var xs = cljs.core.rest(arglist__18268);
      return G__18264__delegate(coll, x, xs);
    };
    G__18264.cljs$core$IFn$_invoke$arity$variadic = G__18264__delegate;
    return G__18264;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__18269 = cljs.core.next.call(null, s);
      var G__18270 = acc + 1;
      s = G__18269;
      acc = G__18270;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__18272 = coll;
      if (G__18272) {
        var bit__4220__auto__ = G__18272.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4220__auto__ || G__18272.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__18273 = cljs.core.next.call(null, coll);
              var G__18274 = n - 1;
              coll = G__18273;
              n = G__18274;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__18275 = cljs.core.next.call(null, coll);
              var G__18276 = n - 1;
              var G__18277 = not_found;
              coll = G__18275;
              n = G__18276;
              not_found = G__18277;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__18282 = coll;
          if (G__18282) {
            var bit__4220__auto__ = G__18282.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4220__auto__ || G__18282.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__18283 = coll;
                  if (G__18283) {
                    var bit__4227__auto__ = G__18283.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4227__auto__ || G__18283.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__18283.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__18283);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__18283);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__18284 = coll;
          if (G__18284) {
            var bit__4220__auto__ = G__18284.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4220__auto__ || G__18284.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__18285 = coll;
                  if (G__18285) {
                    var bit__4227__auto__ = G__18285.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4227__auto__ || G__18285.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__18285.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__18285);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__18285);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__18288 = o;
        if (G__18288) {
          var bit__4220__auto__ = G__18288.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4220__auto__ || G__18288.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__18289 = o;
        if (G__18289) {
          var bit__4220__auto__ = G__18289.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4220__auto__ || G__18289.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__18290__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__18291 = ret;
          var G__18292 = cljs.core.first.call(null, kvs);
          var G__18293 = cljs.core.second.call(null, kvs);
          var G__18294 = cljs.core.nnext.call(null, kvs);
          coll = G__18291;
          k = G__18292;
          v = G__18293;
          kvs = G__18294;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__18290 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18290__delegate.call(this, coll, k, v, kvs);
    };
    G__18290.cljs$lang$maxFixedArity = 3;
    G__18290.cljs$lang$applyTo = function(arglist__18295) {
      var coll = cljs.core.first(arglist__18295);
      arglist__18295 = cljs.core.next(arglist__18295);
      var k = cljs.core.first(arglist__18295);
      arglist__18295 = cljs.core.next(arglist__18295);
      var v = cljs.core.first(arglist__18295);
      var kvs = cljs.core.rest(arglist__18295);
      return G__18290__delegate(coll, k, v, kvs);
    };
    G__18290.cljs$core$IFn$_invoke$arity$variadic = G__18290__delegate;
    return G__18290;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__18296__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__18297 = ret;
            var G__18298 = cljs.core.first.call(null, ks);
            var G__18299 = cljs.core.next.call(null, ks);
            coll = G__18297;
            k = G__18298;
            ks = G__18299;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__18296 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18296__delegate.call(this, coll, k, ks);
    };
    G__18296.cljs$lang$maxFixedArity = 2;
    G__18296.cljs$lang$applyTo = function(arglist__18300) {
      var coll = cljs.core.first(arglist__18300);
      arglist__18300 = cljs.core.next(arglist__18300);
      var k = cljs.core.first(arglist__18300);
      var ks = cljs.core.rest(arglist__18300);
      return G__18296__delegate(coll, k, ks);
    };
    G__18296.cljs$core$IFn$_invoke$arity$variadic = G__18296__delegate;
    return G__18296;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3577__auto__ = goog.isFunction(f);
  if (or__3577__auto__) {
    return or__3577__auto__;
  } else {
    var G__18304 = f;
    if (G__18304) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto____$1 = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto____$1)) {
          return or__3577__auto____$1;
        } else {
          return G__18304.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__18304.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__18304);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__18304);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__18306 = null;
  var G__18306__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__18306__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__18306__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__18306__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__18306__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__18306__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__18306__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__18306__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__18306__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__18306__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__18306__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__18306__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__18306__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__18306__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__18306__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__18306__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__18306__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__18306__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__18306__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__18306__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__18306__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__18306 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__18306__2.call(this, self__, a);
      case 3:
        return G__18306__3.call(this, self__, a, b);
      case 4:
        return G__18306__4.call(this, self__, a, b, c);
      case 5:
        return G__18306__5.call(this, self__, a, b, c, d);
      case 6:
        return G__18306__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__18306__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__18306__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__18306__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__18306__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__18306__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__18306__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__18306__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__18306__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__18306__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__18306__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__18306__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__18306__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__18306__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__18306__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__18306__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__18306__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18306;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args18305) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18305)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__18310 = o;
    if (G__18310) {
      var bit__4227__auto__ = G__18310.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4227__auto__ || G__18310.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__18310.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__18310);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__18310);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3565__auto__ = !(o == null);
    if (and__3565__auto__) {
      var G__18314 = o;
      if (G__18314) {
        var bit__4227__auto__ = G__18314.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4227__auto__ || G__18314.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__18314.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__18314);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__18314);
      }
    } else {
      return and__3565__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__18315__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__18316 = ret;
            var G__18317 = cljs.core.first.call(null, ks);
            var G__18318 = cljs.core.next.call(null, ks);
            coll = G__18316;
            k = G__18317;
            ks = G__18318;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__18315 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18315__delegate.call(this, coll, k, ks);
    };
    G__18315.cljs$lang$maxFixedArity = 2;
    G__18315.cljs$lang$applyTo = function(arglist__18319) {
      var coll = cljs.core.first(arglist__18319);
      arglist__18319 = cljs.core.next(arglist__18319);
      var k = cljs.core.first(arglist__18319);
      var ks = cljs.core.rest(arglist__18319);
      return G__18315__delegate(coll, k, ks);
    };
    G__18315.cljs$core$IFn$_invoke$arity$variadic = G__18315__delegate;
    return G__18315;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj18321 = {};
  return obj18321;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj18325 = {};
      return obj18325;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__18327 = o;
    if (G__18327) {
      var bit__4220__auto__ = G__18327.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4220__auto__ || G__18327.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__18329 = x;
    if (G__18329) {
      var bit__4227__auto__ = G__18329.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4227__auto__ || G__18329.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__18329.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__18329);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__18329);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__18331 = x;
    if (G__18331) {
      var bit__4227__auto__ = G__18331.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4227__auto__ || G__18331.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__18331.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__18331);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__18331);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__18333 = x;
  if (G__18333) {
    var bit__4227__auto__ = G__18333.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4227__auto__ || G__18333.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__18333.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__18333);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__18333);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__18335 = x;
  if (G__18335) {
    var bit__4227__auto__ = G__18335.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4227__auto__ || G__18335.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__18335.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__18335);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__18335);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__18337 = x;
  if (G__18337) {
    var bit__4227__auto__ = G__18337.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4227__auto__ || G__18337.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__18337.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__18337);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__18337);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__18339 = x;
  if (G__18339) {
    var bit__4227__auto__ = G__18339.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4227__auto__ || G__18339.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__18339.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__18339);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__18339);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__18341 = x;
    if (G__18341) {
      var bit__4227__auto__ = G__18341.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4227__auto__ || G__18341.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__18341.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__18341);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__18341);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__18343 = x;
  if (G__18343) {
    var bit__4227__auto__ = G__18343.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4227__auto__ || G__18343.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__18343.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__18343);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__18343);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__18345 = x;
  if (G__18345) {
    var bit__4220__auto__ = G__18345.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4220__auto__ || G__18345.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj18349 = {};
    return obj18349;
  };
  var js_obj__1 = function() {
    var G__18350__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__18350 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__18350__delegate.call(this, keyvals);
    };
    G__18350.cljs$lang$maxFixedArity = 0;
    G__18350.cljs$lang$applyTo = function(arglist__18351) {
      var keyvals = cljs.core.seq(arglist__18351);
      return G__18350__delegate(keyvals);
    };
    G__18350.cljs$core$IFn$_invoke$arity$variadic = G__18350__delegate;
    return G__18350;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__18352 = i__$1 + 1;
      var G__18353 = j__$1 + 1;
      var G__18354 = len__$1 - 1;
      i__$1 = G__18352;
      j__$1 = G__18353;
      len__$1 = G__18354;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__18355 = i__$1 - 1;
      var G__18356 = j__$1 - 1;
      var G__18357 = len__$1 - 1;
      i__$1 = G__18355;
      j__$1 = G__18356;
      len__$1 = G__18357;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj18359 = {};
  return obj18359;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__18361 = s;
    if (G__18361) {
      var bit__4227__auto__ = G__18361.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4227__auto__ || G__18361.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__18361.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__18361);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__18361);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__18363 = s;
  if (G__18363) {
    var bit__4227__auto__ = G__18363.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4227__auto__ || G__18363.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__18363.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__18363);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__18363);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3577__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3577__auto__) {
    return or__3577__auto__;
  } else {
    var G__18367 = f;
    if (G__18367) {
      var bit__4227__auto__ = G__18367.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4227__auto__ || G__18367.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__18367.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__18367);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__18367);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__18368__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__18369 = cljs.core.conj.call(null, s, x__$1);
              var G__18370 = etc;
              s = G__18369;
              xs = G__18370;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__18368 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18368__delegate.call(this, x, y, more);
    };
    G__18368.cljs$lang$maxFixedArity = 2;
    G__18368.cljs$lang$applyTo = function(arglist__18371) {
      var x = cljs.core.first(arglist__18371);
      arglist__18371 = cljs.core.next(arglist__18371);
      var y = cljs.core.first(arglist__18371);
      var more = cljs.core.rest(arglist__18371);
      return G__18368__delegate(x, y, more);
    };
    G__18368.cljs$core$IFn$_invoke$arity$variadic = G__18368__delegate;
    return G__18368;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3577__auto__ = cljs.core.seq.call(null, coll);
    if (or__3577__auto__) {
      return or__3577__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__18373 = x;
            if (G__18373) {
              var bit__4220__auto__ = G__18373.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4220__auto__ || G__18373.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__18374 = xs;
        var G__18375 = ys;
        var G__18376 = len;
        var G__18377 = n + 1;
        xs = G__18374;
        ys = G__18375;
        len = G__18376;
        n = G__18377;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__18378 = nval;
          var G__18379 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__18378;
          coll__$1 = G__18379;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__18382 = coll;
      if (G__18382) {
        var bit__4220__auto__ = G__18382.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4220__auto__ || G__18382.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__18383 = coll;
      if (G__18383) {
        var bit__4220__auto__ = G__18383.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4220__auto__ || G__18383.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__18384__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__18384 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18384__delegate.call(this, x, y, more);
    };
    G__18384.cljs$lang$maxFixedArity = 2;
    G__18384.cljs$lang$applyTo = function(arglist__18385) {
      var x = cljs.core.first(arglist__18385);
      arglist__18385 = cljs.core.next(arglist__18385);
      var y = cljs.core.first(arglist__18385);
      var more = cljs.core.rest(arglist__18385);
      return G__18384__delegate(x, y, more);
    };
    G__18384.cljs$core$IFn$_invoke$arity$variadic = G__18384__delegate;
    return G__18384;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__18386__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__18386 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18386__delegate.call(this, x, y, more);
    };
    G__18386.cljs$lang$maxFixedArity = 2;
    G__18386.cljs$lang$applyTo = function(arglist__18387) {
      var x = cljs.core.first(arglist__18387);
      arglist__18387 = cljs.core.next(arglist__18387);
      var y = cljs.core.first(arglist__18387);
      var more = cljs.core.rest(arglist__18387);
      return G__18386__delegate(x, y, more);
    };
    G__18386.cljs$core$IFn$_invoke$arity$variadic = G__18386__delegate;
    return G__18386;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__18388__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__18388 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18388__delegate.call(this, x, y, more);
    };
    G__18388.cljs$lang$maxFixedArity = 2;
    G__18388.cljs$lang$applyTo = function(arglist__18389) {
      var x = cljs.core.first(arglist__18389);
      arglist__18389 = cljs.core.next(arglist__18389);
      var y = cljs.core.first(arglist__18389);
      var more = cljs.core.rest(arglist__18389);
      return G__18388__delegate(x, y, more);
    };
    G__18388.cljs$core$IFn$_invoke$arity$variadic = G__18388__delegate;
    return G__18388;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__18390__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__18390 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18390__delegate.call(this, x, y, more);
    };
    G__18390.cljs$lang$maxFixedArity = 2;
    G__18390.cljs$lang$applyTo = function(arglist__18391) {
      var x = cljs.core.first(arglist__18391);
      arglist__18391 = cljs.core.next(arglist__18391);
      var y = cljs.core.first(arglist__18391);
      var more = cljs.core.rest(arglist__18391);
      return G__18390__delegate(x, y, more);
    };
    G__18390.cljs$core$IFn$_invoke$arity$variadic = G__18390__delegate;
    return G__18390;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__18392__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__18393 = y;
            var G__18394 = cljs.core.first.call(null, more);
            var G__18395 = cljs.core.next.call(null, more);
            x = G__18393;
            y = G__18394;
            more = G__18395;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18392 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18392__delegate.call(this, x, y, more);
    };
    G__18392.cljs$lang$maxFixedArity = 2;
    G__18392.cljs$lang$applyTo = function(arglist__18396) {
      var x = cljs.core.first(arglist__18396);
      arglist__18396 = cljs.core.next(arglist__18396);
      var y = cljs.core.first(arglist__18396);
      var more = cljs.core.rest(arglist__18396);
      return G__18392__delegate(x, y, more);
    };
    G__18392.cljs$core$IFn$_invoke$arity$variadic = G__18392__delegate;
    return G__18392;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__18397__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__18398 = y;
            var G__18399 = cljs.core.first.call(null, more);
            var G__18400 = cljs.core.next.call(null, more);
            x = G__18398;
            y = G__18399;
            more = G__18400;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18397 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18397__delegate.call(this, x, y, more);
    };
    G__18397.cljs$lang$maxFixedArity = 2;
    G__18397.cljs$lang$applyTo = function(arglist__18401) {
      var x = cljs.core.first(arglist__18401);
      arglist__18401 = cljs.core.next(arglist__18401);
      var y = cljs.core.first(arglist__18401);
      var more = cljs.core.rest(arglist__18401);
      return G__18397__delegate(x, y, more);
    };
    G__18397.cljs$core$IFn$_invoke$arity$variadic = G__18397__delegate;
    return G__18397;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__18402__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__18403 = y;
            var G__18404 = cljs.core.first.call(null, more);
            var G__18405 = cljs.core.next.call(null, more);
            x = G__18403;
            y = G__18404;
            more = G__18405;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18402 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18402__delegate.call(this, x, y, more);
    };
    G__18402.cljs$lang$maxFixedArity = 2;
    G__18402.cljs$lang$applyTo = function(arglist__18406) {
      var x = cljs.core.first(arglist__18406);
      arglist__18406 = cljs.core.next(arglist__18406);
      var y = cljs.core.first(arglist__18406);
      var more = cljs.core.rest(arglist__18406);
      return G__18402__delegate(x, y, more);
    };
    G__18402.cljs$core$IFn$_invoke$arity$variadic = G__18402__delegate;
    return G__18402;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__18407__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__18408 = y;
            var G__18409 = cljs.core.first.call(null, more);
            var G__18410 = cljs.core.next.call(null, more);
            x = G__18408;
            y = G__18409;
            more = G__18410;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18407 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18407__delegate.call(this, x, y, more);
    };
    G__18407.cljs$lang$maxFixedArity = 2;
    G__18407.cljs$lang$applyTo = function(arglist__18411) {
      var x = cljs.core.first(arglist__18411);
      arglist__18411 = cljs.core.next(arglist__18411);
      var y = cljs.core.first(arglist__18411);
      var more = cljs.core.rest(arglist__18411);
      return G__18407__delegate(x, y, more);
    };
    G__18407.cljs$core$IFn$_invoke$arity$variadic = G__18407__delegate;
    return G__18407;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3884__auto__ = x;
    var y__3885__auto__ = y;
    return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
  };
  var max__3 = function() {
    var G__18412__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3884__auto__ = x;
        var y__3885__auto__ = y;
        return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
      }(), more);
    };
    var G__18412 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18412__delegate.call(this, x, y, more);
    };
    G__18412.cljs$lang$maxFixedArity = 2;
    G__18412.cljs$lang$applyTo = function(arglist__18413) {
      var x = cljs.core.first(arglist__18413);
      arglist__18413 = cljs.core.next(arglist__18413);
      var y = cljs.core.first(arglist__18413);
      var more = cljs.core.rest(arglist__18413);
      return G__18412__delegate(x, y, more);
    };
    G__18412.cljs$core$IFn$_invoke$arity$variadic = G__18412__delegate;
    return G__18412;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3891__auto__ = x;
    var y__3892__auto__ = y;
    return x__3891__auto__ < y__3892__auto__ ? x__3891__auto__ : y__3892__auto__;
  };
  var min__3 = function() {
    var G__18414__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3891__auto__ = x;
        var y__3892__auto__ = y;
        return x__3891__auto__ < y__3892__auto__ ? x__3891__auto__ : y__3892__auto__;
      }(), more);
    };
    var G__18414 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18414__delegate.call(this, x, y, more);
    };
    G__18414.cljs$lang$maxFixedArity = 2;
    G__18414.cljs$lang$applyTo = function(arglist__18415) {
      var x = cljs.core.first(arglist__18415);
      arglist__18415 = cljs.core.next(arglist__18415);
      var y = cljs.core.first(arglist__18415);
      var more = cljs.core.rest(arglist__18415);
      return G__18414__delegate(x, y, more);
    };
    G__18414.cljs$core$IFn$_invoke$arity$variadic = G__18414__delegate;
    return G__18414;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__18416__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__18416 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18416__delegate.call(this, x, y, more);
    };
    G__18416.cljs$lang$maxFixedArity = 2;
    G__18416.cljs$lang$applyTo = function(arglist__18417) {
      var x = cljs.core.first(arglist__18417);
      arglist__18417 = cljs.core.next(arglist__18417);
      var y = cljs.core.first(arglist__18417);
      var more = cljs.core.rest(arglist__18417);
      return G__18416__delegate(x, y, more);
    };
    G__18416.cljs$core$IFn$_invoke$arity$variadic = G__18416__delegate;
    return G__18416;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__18418__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__18418 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18418__delegate.call(this, x, y, more);
    };
    G__18418.cljs$lang$maxFixedArity = 2;
    G__18418.cljs$lang$applyTo = function(arglist__18419) {
      var x = cljs.core.first(arglist__18419);
      arglist__18419 = cljs.core.next(arglist__18419);
      var y = cljs.core.first(arglist__18419);
      var more = cljs.core.rest(arglist__18419);
      return G__18418__delegate(x, y, more);
    };
    G__18418.cljs$core$IFn$_invoke$arity$variadic = G__18418__delegate;
    return G__18418;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__18420__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__18420 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18420__delegate.call(this, x, y, more);
    };
    G__18420.cljs$lang$maxFixedArity = 2;
    G__18420.cljs$lang$applyTo = function(arglist__18421) {
      var x = cljs.core.first(arglist__18421);
      arglist__18421 = cljs.core.next(arglist__18421);
      var y = cljs.core.first(arglist__18421);
      var more = cljs.core.rest(arglist__18421);
      return G__18420__delegate(x, y, more);
    };
    G__18420.cljs$core$IFn$_invoke$arity$variadic = G__18420__delegate;
    return G__18420;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__18422__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__18422 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18422__delegate.call(this, x, y, more);
    };
    G__18422.cljs$lang$maxFixedArity = 2;
    G__18422.cljs$lang$applyTo = function(arglist__18423) {
      var x = cljs.core.first(arglist__18423);
      arglist__18423 = cljs.core.next(arglist__18423);
      var y = cljs.core.first(arglist__18423);
      var more = cljs.core.rest(arglist__18423);
      return G__18422__delegate(x, y, more);
    };
    G__18422.cljs$core$IFn$_invoke$arity$variadic = G__18422__delegate;
    return G__18422;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__18424__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__18424 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18424__delegate.call(this, x, y, more);
    };
    G__18424.cljs$lang$maxFixedArity = 2;
    G__18424.cljs$lang$applyTo = function(arglist__18425) {
      var x = cljs.core.first(arglist__18425);
      arglist__18425 = cljs.core.next(arglist__18425);
      var y = cljs.core.first(arglist__18425);
      var more = cljs.core.rest(arglist__18425);
      return G__18424__delegate(x, y, more);
    };
    G__18424.cljs$core$IFn$_invoke$arity$variadic = G__18424__delegate;
    return G__18424;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__18426__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__18426 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18426__delegate.call(this, x, y, more);
    };
    G__18426.cljs$lang$maxFixedArity = 2;
    G__18426.cljs$lang$applyTo = function(arglist__18427) {
      var x = cljs.core.first(arglist__18427);
      arglist__18427 = cljs.core.next(arglist__18427);
      var y = cljs.core.first(arglist__18427);
      var more = cljs.core.rest(arglist__18427);
      return G__18426__delegate(x, y, more);
    };
    G__18426.cljs$core$IFn$_invoke$arity$variadic = G__18426__delegate;
    return G__18426;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__18428__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__18428 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18428__delegate.call(this, x, y, more);
    };
    G__18428.cljs$lang$maxFixedArity = 2;
    G__18428.cljs$lang$applyTo = function(arglist__18429) {
      var x = cljs.core.first(arglist__18429);
      arglist__18429 = cljs.core.next(arglist__18429);
      var y = cljs.core.first(arglist__18429);
      var more = cljs.core.rest(arglist__18429);
      return G__18428__delegate(x, y, more);
    };
    G__18428.cljs$core$IFn$_invoke$arity$variadic = G__18428__delegate;
    return G__18428;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__18430__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__18431 = y;
            var G__18432 = cljs.core.first.call(null, more);
            var G__18433 = cljs.core.next.call(null, more);
            x = G__18431;
            y = G__18432;
            more = G__18433;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__18430 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18430__delegate.call(this, x, y, more);
    };
    G__18430.cljs$lang$maxFixedArity = 2;
    G__18430.cljs$lang$applyTo = function(arglist__18434) {
      var x = cljs.core.first(arglist__18434);
      arglist__18434 = cljs.core.next(arglist__18434);
      var y = cljs.core.first(arglist__18434);
      var more = cljs.core.rest(arglist__18434);
      return G__18430__delegate(x, y, more);
    };
    G__18430.cljs$core$IFn$_invoke$arity$variadic = G__18430__delegate;
    return G__18430;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__18435 = n__$1 - 1;
      var G__18436 = cljs.core.next.call(null, xs);
      n__$1 = G__18435;
      xs = G__18436;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__18437__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__18438 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__18439 = cljs.core.next.call(null, more);
          sb = G__18438;
          more = G__18439;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__18437 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__18437__delegate.call(this, x, ys);
    };
    G__18437.cljs$lang$maxFixedArity = 1;
    G__18437.cljs$lang$applyTo = function(arglist__18440) {
      var x = cljs.core.first(arglist__18440);
      var ys = cljs.core.rest(arglist__18440);
      return G__18437__delegate(x, ys);
    };
    G__18437.cljs$core$IFn$_invoke$arity$variadic = G__18437__delegate;
    return G__18437;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__18441 = cljs.core.next.call(null, xs);
            var G__18442 = cljs.core.next.call(null, ys);
            xs = G__18441;
            ys = G__18442;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__18443 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__18444 = cljs.core.next.call(null, s);
        res = G__18443;
        s = G__18444;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__18445 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__18446 = cljs.core.next.call(null, s);
      h = G__18445;
      s = G__18446;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__18447 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__18448 = cljs.core.next.call(null, s__$1);
      h = G__18447;
      s__$1 = G__18448;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__18455_18461 = cljs.core.seq.call(null, fn_map);
  var chunk__18456_18462 = null;
  var count__18457_18463 = 0;
  var i__18458_18464 = 0;
  while (true) {
    if (i__18458_18464 < count__18457_18463) {
      var vec__18459_18465 = cljs.core._nth.call(null, chunk__18456_18462, i__18458_18464);
      var key_name_18466 = cljs.core.nth.call(null, vec__18459_18465, 0, null);
      var f_18467 = cljs.core.nth.call(null, vec__18459_18465, 1, null);
      var str_name_18468 = cljs.core.name.call(null, key_name_18466);
      obj[str_name_18468] = f_18467;
      var G__18469 = seq__18455_18461;
      var G__18470 = chunk__18456_18462;
      var G__18471 = count__18457_18463;
      var G__18472 = i__18458_18464 + 1;
      seq__18455_18461 = G__18469;
      chunk__18456_18462 = G__18470;
      count__18457_18463 = G__18471;
      i__18458_18464 = G__18472;
      continue;
    } else {
      var temp__4126__auto___18473 = cljs.core.seq.call(null, seq__18455_18461);
      if (temp__4126__auto___18473) {
        var seq__18455_18474__$1 = temp__4126__auto___18473;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18455_18474__$1)) {
          var c__4333__auto___18475 = cljs.core.chunk_first.call(null, seq__18455_18474__$1);
          var G__18476 = cljs.core.chunk_rest.call(null, seq__18455_18474__$1);
          var G__18477 = c__4333__auto___18475;
          var G__18478 = cljs.core.count.call(null, c__4333__auto___18475);
          var G__18479 = 0;
          seq__18455_18461 = G__18476;
          chunk__18456_18462 = G__18477;
          count__18457_18463 = G__18478;
          i__18458_18464 = G__18479;
          continue;
        } else {
          var vec__18460_18480 = cljs.core.first.call(null, seq__18455_18474__$1);
          var key_name_18481 = cljs.core.nth.call(null, vec__18460_18480, 0, null);
          var f_18482 = cljs.core.nth.call(null, vec__18460_18480, 1, null);
          var str_name_18483 = cljs.core.name.call(null, key_name_18481);
          obj[str_name_18483] = f_18482;
          var G__18484 = cljs.core.next.call(null, seq__18455_18474__$1);
          var G__18485 = null;
          var G__18486 = 0;
          var G__18487 = 0;
          seq__18455_18461 = G__18484;
          chunk__18456_18462 = G__18485;
          count__18457_18463 = G__18486;
          i__18458_18464 = G__18487;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__18489 = coll;
  if (G__18489) {
    var bit__4227__auto__ = G__18489.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4227__auto__ || G__18489.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__18489.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__18489);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__18489);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__18490 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__18490;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__18491 = i - 1;
        var G__18492 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__18491;
        r = G__18492;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__18493) {
    var xs = cljs.core.seq(arglist__18493);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3577__auto__ = coll == null;
    if (or__3577__auto__) {
      return or__3577__auto__;
    } else {
      var G__18497 = coll;
      if (G__18497) {
        var bit__4220__auto__ = G__18497.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4220__auto__ || G__18497.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__18499 = x;
  if (G__18499) {
    var bit__4227__auto__ = G__18499.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4227__auto__ || G__18499.cljs$core$IList$) {
      return true;
    } else {
      if (!G__18499.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__18499);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__18499);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__18501 = null;
  var G__18501__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__18501__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__18501 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18501__2.call(this, self__, coll);
      case 3:
        return G__18501__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18501;
}();
cljs.core.Keyword.prototype.apply = function(self__, args18500) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18500)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__18503 = x;
    if (G__18503) {
      var bit__4220__auto__ = G__18503.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4220__auto__ || G__18503.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__18504 = ls.sval();
        ls = G__18504;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__18506 = s;
    if (G__18506) {
      var bit__4220__auto__ = G__18506.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4220__auto__ || G__18506.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__18507 = cljs.core.next.call(null, s__$1);
      s__$1 = G__18507;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_18508 = 0;
  var xs_18509 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_18509) {
      ret[i_18508] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_18509));
      var G__18510 = i_18508 + 1;
      var G__18511 = cljs.core.next.call(null, xs_18509);
      i_18508 = G__18510;
      xs_18509 = G__18511;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__18512 = i + 1;
          var G__18513 = cljs.core.next.call(null, s__$1);
          i = G__18512;
          s__$1 = G__18513;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4433__auto___18514 = size;
      var i_18515 = 0;
      while (true) {
        if (i_18515 < n__4433__auto___18514) {
          a[i_18515] = init_val_or_seq;
          var G__18516 = i_18515 + 1;
          i_18515 = G__18516;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__18517 = i + 1;
          var G__18518 = cljs.core.next.call(null, s__$1);
          i = G__18517;
          s__$1 = G__18518;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4433__auto___18519 = size;
      var i_18520 = 0;
      while (true) {
        if (i_18520 < n__4433__auto___18519) {
          a[i_18520] = init_val_or_seq;
          var G__18521 = i_18520 + 1;
          i_18520 = G__18521;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__18522 = i + 1;
          var G__18523 = cljs.core.next.call(null, s__$1);
          i = G__18522;
          s__$1 = G__18523;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4433__auto___18524 = size;
      var i_18525 = 0;
      while (true) {
        if (i_18525 < n__4433__auto___18524) {
          a[i_18525] = init_val_or_seq;
          var G__18526 = i_18525 + 1;
          i_18525 = G__18526;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__18527 = i + 1;
          var G__18528 = cljs.core.next.call(null, s__$1);
          i = G__18527;
          s__$1 = G__18528;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4433__auto___18529 = size;
      var i_18530 = 0;
      while (true) {
        if (i_18530 < n__4433__auto___18529) {
          a[i_18530] = init_val_or_seq;
          var G__18531 = i_18530 + 1;
          i_18530 = G__18531;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__18532 = cljs.core.next.call(null, s__$1);
        var G__18533 = i - 1;
        var G__18534 = sum + 1;
        s__$1 = G__18532;
        i = G__18533;
        sum = G__18534;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__18535__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__18535 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18535__delegate.call(this, x, y, zs);
    };
    G__18535.cljs$lang$maxFixedArity = 2;
    G__18535.cljs$lang$applyTo = function(arglist__18536) {
      var x = cljs.core.first(arglist__18536);
      arglist__18536 = cljs.core.next(arglist__18536);
      var y = cljs.core.first(arglist__18536);
      var zs = cljs.core.rest(arglist__18536);
      return G__18535__delegate(x, y, zs);
    };
    G__18535.cljs$core$IFn$_invoke$arity$variadic = G__18535__delegate;
    return G__18535;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__18537__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__18537 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__18537__delegate.call(this, a, b, c, d, more);
    };
    G__18537.cljs$lang$maxFixedArity = 4;
    G__18537.cljs$lang$applyTo = function(arglist__18538) {
      var a = cljs.core.first(arglist__18538);
      arglist__18538 = cljs.core.next(arglist__18538);
      var b = cljs.core.first(arglist__18538);
      arglist__18538 = cljs.core.next(arglist__18538);
      var c = cljs.core.first(arglist__18538);
      arglist__18538 = cljs.core.next(arglist__18538);
      var d = cljs.core.first(arglist__18538);
      var more = cljs.core.rest(arglist__18538);
      return G__18537__delegate(a, b, c, d, more);
    };
    G__18537.cljs$core$IFn$_invoke$arity$variadic = G__18537__delegate;
    return G__18537;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__18539__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__18540 = ntcoll;
          var G__18541 = cljs.core.first.call(null, vals);
          var G__18542 = cljs.core.next.call(null, vals);
          tcoll = G__18540;
          val = G__18541;
          vals = G__18542;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__18539 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18539__delegate.call(this, tcoll, val, vals);
    };
    G__18539.cljs$lang$maxFixedArity = 2;
    G__18539.cljs$lang$applyTo = function(arglist__18543) {
      var tcoll = cljs.core.first(arglist__18543);
      arglist__18543 = cljs.core.next(arglist__18543);
      var val = cljs.core.first(arglist__18543);
      var vals = cljs.core.rest(arglist__18543);
      return G__18539__delegate(tcoll, val, vals);
    };
    G__18539.cljs$core$IFn$_invoke$arity$variadic = G__18539__delegate;
    return G__18539;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__18544__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__18545 = ntcoll;
          var G__18546 = cljs.core.first.call(null, kvs);
          var G__18547 = cljs.core.second.call(null, kvs);
          var G__18548 = cljs.core.nnext.call(null, kvs);
          tcoll = G__18545;
          key = G__18546;
          val = G__18547;
          kvs = G__18548;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__18544 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18544__delegate.call(this, tcoll, key, val, kvs);
    };
    G__18544.cljs$lang$maxFixedArity = 3;
    G__18544.cljs$lang$applyTo = function(arglist__18549) {
      var tcoll = cljs.core.first(arglist__18549);
      arglist__18549 = cljs.core.next(arglist__18549);
      var key = cljs.core.first(arglist__18549);
      arglist__18549 = cljs.core.next(arglist__18549);
      var val = cljs.core.first(arglist__18549);
      var kvs = cljs.core.rest(arglist__18549);
      return G__18544__delegate(tcoll, key, val, kvs);
    };
    G__18544.cljs$core$IFn$_invoke$arity$variadic = G__18544__delegate;
    return G__18544;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__18550__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__18551 = ntcoll;
          var G__18552 = cljs.core.first.call(null, ks);
          var G__18553 = cljs.core.next.call(null, ks);
          tcoll = G__18551;
          key = G__18552;
          ks = G__18553;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__18550 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18550__delegate.call(this, tcoll, key, ks);
    };
    G__18550.cljs$lang$maxFixedArity = 2;
    G__18550.cljs$lang$applyTo = function(arglist__18554) {
      var tcoll = cljs.core.first(arglist__18554);
      arglist__18554 = cljs.core.next(arglist__18554);
      var key = cljs.core.first(arglist__18554);
      var ks = cljs.core.rest(arglist__18554);
      return G__18550__delegate(tcoll, key, ks);
    };
    G__18550.cljs$core$IFn$_invoke$arity$variadic = G__18550__delegate;
    return G__18550;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__18555__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__18556 = ntcoll;
          var G__18557 = cljs.core.first.call(null, vals);
          var G__18558 = cljs.core.next.call(null, vals);
          tcoll = G__18556;
          val = G__18557;
          vals = G__18558;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__18555 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18555__delegate.call(this, tcoll, val, vals);
    };
    G__18555.cljs$lang$maxFixedArity = 2;
    G__18555.cljs$lang$applyTo = function(arglist__18559) {
      var tcoll = cljs.core.first(arglist__18559);
      arglist__18559 = cljs.core.next(arglist__18559);
      var val = cljs.core.first(arglist__18559);
      var vals = cljs.core.rest(arglist__18559);
      return G__18555__delegate(tcoll, val, vals);
    };
    G__18555.cljs$core$IFn$_invoke$arity$variadic = G__18555__delegate;
    return G__18555;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4477 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4477);
      } else {
        return f.call(null, a4477);
      }
    } else {
      var b4478 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4477, b4478);
        } else {
          return f.call(null, a4477, b4478);
        }
      } else {
        var c4479 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4477, b4478, c4479);
          } else {
            return f.call(null, a4477, b4478, c4479);
          }
        } else {
          var d4480 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4477, b4478, c4479, d4480);
            } else {
              return f.call(null, a4477, b4478, c4479, d4480);
            }
          } else {
            var e4481 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4477, b4478, c4479, d4480, e4481);
              } else {
                return f.call(null, a4477, b4478, c4479, d4480, e4481);
              }
            } else {
              var f4482 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4477, b4478, c4479, d4480, e4481, f4482);
                } else {
                  return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482);
                }
              } else {
                var g4483 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4477, b4478, c4479, d4480, e4481, f4482, g4483);
                  } else {
                    return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483);
                  }
                } else {
                  var h4484 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484);
                    } else {
                      return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484);
                    }
                  } else {
                    var i4485 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485);
                      } else {
                        return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485);
                      }
                    } else {
                      var j4486 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486);
                        } else {
                          return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486);
                        }
                      } else {
                        var k4487 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487);
                          } else {
                            return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487);
                          }
                        } else {
                          var l4488 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488);
                            } else {
                              return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488);
                            }
                          } else {
                            var m4489 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489);
                              } else {
                                return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489);
                              }
                            } else {
                              var n4490 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490);
                                } else {
                                  return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490);
                                }
                              } else {
                                var o4491 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491);
                                  } else {
                                    return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491);
                                  }
                                } else {
                                  var p4492 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492);
                                    } else {
                                      return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492);
                                    }
                                  } else {
                                    var q4493 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493);
                                      } else {
                                        return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493);
                                      }
                                    } else {
                                      var r4494 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494);
                                        } else {
                                          return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494);
                                        }
                                      } else {
                                        var s4495 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494, s4495);
                                          } else {
                                            return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494, s4495);
                                          }
                                        } else {
                                          var t4496 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494, s4495, t4496);
                                            } else {
                                              return f.call(null, a4477, b4478, c4479, d4480, e4481, f4482, g4483, h4484, i4485, j4486, k4487, l4488, m4489, n4490, o4491, p4492, q4493, r4494, s4495, t4496);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__18560__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__18560 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__18560__delegate.call(this, f, a, b, c, d, args);
    };
    G__18560.cljs$lang$maxFixedArity = 5;
    G__18560.cljs$lang$applyTo = function(arglist__18561) {
      var f = cljs.core.first(arglist__18561);
      arglist__18561 = cljs.core.next(arglist__18561);
      var a = cljs.core.first(arglist__18561);
      arglist__18561 = cljs.core.next(arglist__18561);
      var b = cljs.core.first(arglist__18561);
      arglist__18561 = cljs.core.next(arglist__18561);
      var c = cljs.core.first(arglist__18561);
      arglist__18561 = cljs.core.next(arglist__18561);
      var d = cljs.core.first(arglist__18561);
      var args = cljs.core.rest(arglist__18561);
      return G__18560__delegate(f, a, b, c, d, args);
    };
    G__18560.cljs$core$IFn$_invoke$arity$variadic = G__18560__delegate;
    return G__18560;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__18562__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__18562 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__18562__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__18562.cljs$lang$maxFixedArity = 6;
    G__18562.cljs$lang$applyTo = function(arglist__18563) {
      var obj = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var f = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var a = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var b = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var c = cljs.core.first(arglist__18563);
      arglist__18563 = cljs.core.next(arglist__18563);
      var d = cljs.core.first(arglist__18563);
      var args = cljs.core.rest(arglist__18563);
      return G__18562__delegate(obj, f, a, b, c, d, args);
    };
    G__18562.cljs$core$IFn$_invoke$arity$variadic = G__18562__delegate;
    return G__18562;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__18564__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__18564 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18564__delegate.call(this, x, y, more);
    };
    G__18564.cljs$lang$maxFixedArity = 2;
    G__18564.cljs$lang$applyTo = function(arglist__18565) {
      var x = cljs.core.first(arglist__18565);
      arglist__18565 = cljs.core.next(arglist__18565);
      var y = cljs.core.first(arglist__18565);
      var more = cljs.core.rest(arglist__18565);
      return G__18564__delegate(x, y, more);
    };
    G__18564.cljs$core$IFn$_invoke$arity$variadic = G__18564__delegate;
    return G__18564;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__18566 = pred;
        var G__18567 = cljs.core.next.call(null, coll);
        pred = G__18566;
        coll = G__18567;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3577__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        var G__18568 = pred;
        var G__18569 = cljs.core.next.call(null, coll);
        pred = G__18568;
        coll = G__18569;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__18570 = null;
    var G__18570__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__18570__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__18570__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__18570__3 = function() {
      var G__18571__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__18571 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__18571__delegate.call(this, x, y, zs);
      };
      G__18571.cljs$lang$maxFixedArity = 2;
      G__18571.cljs$lang$applyTo = function(arglist__18572) {
        var x = cljs.core.first(arglist__18572);
        arglist__18572 = cljs.core.next(arglist__18572);
        var y = cljs.core.first(arglist__18572);
        var zs = cljs.core.rest(arglist__18572);
        return G__18571__delegate(x, y, zs);
      };
      G__18571.cljs$core$IFn$_invoke$arity$variadic = G__18571__delegate;
      return G__18571;
    }();
    G__18570 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__18570__0.call(this);
        case 1:
          return G__18570__1.call(this, x);
        case 2:
          return G__18570__2.call(this, x, y);
        default:
          return G__18570__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__18570.cljs$lang$maxFixedArity = 2;
    G__18570.cljs$lang$applyTo = G__18570__3.cljs$lang$applyTo;
    return G__18570;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__18573__delegate = function(args) {
      return x;
    };
    var G__18573 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__18573__delegate.call(this, args);
    };
    G__18573.cljs$lang$maxFixedArity = 0;
    G__18573.cljs$lang$applyTo = function(arglist__18574) {
      var args = cljs.core.seq(arglist__18574);
      return G__18573__delegate(args);
    };
    G__18573.cljs$core$IFn$_invoke$arity$variadic = G__18573__delegate;
    return G__18573;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__18575 = null;
      var G__18575__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__18575__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__18575__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__18575__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__18575__4 = function() {
        var G__18576__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__18576 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18576__delegate.call(this, x, y, z, args);
        };
        G__18576.cljs$lang$maxFixedArity = 3;
        G__18576.cljs$lang$applyTo = function(arglist__18577) {
          var x = cljs.core.first(arglist__18577);
          arglist__18577 = cljs.core.next(arglist__18577);
          var y = cljs.core.first(arglist__18577);
          arglist__18577 = cljs.core.next(arglist__18577);
          var z = cljs.core.first(arglist__18577);
          var args = cljs.core.rest(arglist__18577);
          return G__18576__delegate(x, y, z, args);
        };
        G__18576.cljs$core$IFn$_invoke$arity$variadic = G__18576__delegate;
        return G__18576;
      }();
      G__18575 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18575__0.call(this);
          case 1:
            return G__18575__1.call(this, x);
          case 2:
            return G__18575__2.call(this, x, y);
          case 3:
            return G__18575__3.call(this, x, y, z);
          default:
            return G__18575__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18575.cljs$lang$maxFixedArity = 3;
      G__18575.cljs$lang$applyTo = G__18575__4.cljs$lang$applyTo;
      return G__18575;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__18578 = null;
      var G__18578__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__18578__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__18578__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__18578__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__18578__4 = function() {
        var G__18579__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__18579 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18579__delegate.call(this, x, y, z, args);
        };
        G__18579.cljs$lang$maxFixedArity = 3;
        G__18579.cljs$lang$applyTo = function(arglist__18580) {
          var x = cljs.core.first(arglist__18580);
          arglist__18580 = cljs.core.next(arglist__18580);
          var y = cljs.core.first(arglist__18580);
          arglist__18580 = cljs.core.next(arglist__18580);
          var z = cljs.core.first(arglist__18580);
          var args = cljs.core.rest(arglist__18580);
          return G__18579__delegate(x, y, z, args);
        };
        G__18579.cljs$core$IFn$_invoke$arity$variadic = G__18579__delegate;
        return G__18579;
      }();
      G__18578 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18578__0.call(this);
          case 1:
            return G__18578__1.call(this, x);
          case 2:
            return G__18578__2.call(this, x, y);
          case 3:
            return G__18578__3.call(this, x, y, z);
          default:
            return G__18578__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18578.cljs$lang$maxFixedArity = 3;
      G__18578.cljs$lang$applyTo = G__18578__4.cljs$lang$applyTo;
      return G__18578;
    }();
  };
  var comp__4 = function() {
    var G__18581__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__18582__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__18583 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__18584 = cljs.core.next.call(null, fs__$2);
                ret = G__18583;
                fs__$2 = G__18584;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__18582 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__18582__delegate.call(this, args);
          };
          G__18582.cljs$lang$maxFixedArity = 0;
          G__18582.cljs$lang$applyTo = function(arglist__18585) {
            var args = cljs.core.seq(arglist__18585);
            return G__18582__delegate(args);
          };
          G__18582.cljs$core$IFn$_invoke$arity$variadic = G__18582__delegate;
          return G__18582;
        }();
      }(fs__$1);
    };
    var G__18581 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18581__delegate.call(this, f1, f2, f3, fs);
    };
    G__18581.cljs$lang$maxFixedArity = 3;
    G__18581.cljs$lang$applyTo = function(arglist__18586) {
      var f1 = cljs.core.first(arglist__18586);
      arglist__18586 = cljs.core.next(arglist__18586);
      var f2 = cljs.core.first(arglist__18586);
      arglist__18586 = cljs.core.next(arglist__18586);
      var f3 = cljs.core.first(arglist__18586);
      var fs = cljs.core.rest(arglist__18586);
      return G__18581__delegate(f1, f2, f3, fs);
    };
    G__18581.cljs$core$IFn$_invoke$arity$variadic = G__18581__delegate;
    return G__18581;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__18587__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__18587 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__18587__delegate.call(this, args);
      };
      G__18587.cljs$lang$maxFixedArity = 0;
      G__18587.cljs$lang$applyTo = function(arglist__18588) {
        var args = cljs.core.seq(arglist__18588);
        return G__18587__delegate(args);
      };
      G__18587.cljs$core$IFn$_invoke$arity$variadic = G__18587__delegate;
      return G__18587;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__18589__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__18589 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__18589__delegate.call(this, args);
      };
      G__18589.cljs$lang$maxFixedArity = 0;
      G__18589.cljs$lang$applyTo = function(arglist__18590) {
        var args = cljs.core.seq(arglist__18590);
        return G__18589__delegate(args);
      };
      G__18589.cljs$core$IFn$_invoke$arity$variadic = G__18589__delegate;
      return G__18589;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__18591__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__18591 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__18591__delegate.call(this, args);
      };
      G__18591.cljs$lang$maxFixedArity = 0;
      G__18591.cljs$lang$applyTo = function(arglist__18592) {
        var args = cljs.core.seq(arglist__18592);
        return G__18591__delegate(args);
      };
      G__18591.cljs$core$IFn$_invoke$arity$variadic = G__18591__delegate;
      return G__18591;
    }();
  };
  var partial__5 = function() {
    var G__18593__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__18594__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__18594 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__18594__delegate.call(this, args);
        };
        G__18594.cljs$lang$maxFixedArity = 0;
        G__18594.cljs$lang$applyTo = function(arglist__18595) {
          var args = cljs.core.seq(arglist__18595);
          return G__18594__delegate(args);
        };
        G__18594.cljs$core$IFn$_invoke$arity$variadic = G__18594__delegate;
        return G__18594;
      }();
    };
    var G__18593 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__18593__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__18593.cljs$lang$maxFixedArity = 4;
    G__18593.cljs$lang$applyTo = function(arglist__18596) {
      var f = cljs.core.first(arglist__18596);
      arglist__18596 = cljs.core.next(arglist__18596);
      var arg1 = cljs.core.first(arglist__18596);
      arglist__18596 = cljs.core.next(arglist__18596);
      var arg2 = cljs.core.first(arglist__18596);
      arglist__18596 = cljs.core.next(arglist__18596);
      var arg3 = cljs.core.first(arglist__18596);
      var more = cljs.core.rest(arglist__18596);
      return G__18593__delegate(f, arg1, arg2, arg3, more);
    };
    G__18593.cljs$core$IFn$_invoke$arity$variadic = G__18593__delegate;
    return G__18593;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__18597 = null;
      var G__18597__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__18597__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__18597__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__18597__4 = function() {
        var G__18598__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__18598 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18598__delegate.call(this, a, b, c, ds);
        };
        G__18598.cljs$lang$maxFixedArity = 3;
        G__18598.cljs$lang$applyTo = function(arglist__18599) {
          var a = cljs.core.first(arglist__18599);
          arglist__18599 = cljs.core.next(arglist__18599);
          var b = cljs.core.first(arglist__18599);
          arglist__18599 = cljs.core.next(arglist__18599);
          var c = cljs.core.first(arglist__18599);
          var ds = cljs.core.rest(arglist__18599);
          return G__18598__delegate(a, b, c, ds);
        };
        G__18598.cljs$core$IFn$_invoke$arity$variadic = G__18598__delegate;
        return G__18598;
      }();
      G__18597 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__18597__1.call(this, a);
          case 2:
            return G__18597__2.call(this, a, b);
          case 3:
            return G__18597__3.call(this, a, b, c);
          default:
            return G__18597__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18597.cljs$lang$maxFixedArity = 3;
      G__18597.cljs$lang$applyTo = G__18597__4.cljs$lang$applyTo;
      return G__18597;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__18600 = null;
      var G__18600__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__18600__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__18600__4 = function() {
        var G__18601__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__18601 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18601__delegate.call(this, a, b, c, ds);
        };
        G__18601.cljs$lang$maxFixedArity = 3;
        G__18601.cljs$lang$applyTo = function(arglist__18602) {
          var a = cljs.core.first(arglist__18602);
          arglist__18602 = cljs.core.next(arglist__18602);
          var b = cljs.core.first(arglist__18602);
          arglist__18602 = cljs.core.next(arglist__18602);
          var c = cljs.core.first(arglist__18602);
          var ds = cljs.core.rest(arglist__18602);
          return G__18601__delegate(a, b, c, ds);
        };
        G__18601.cljs$core$IFn$_invoke$arity$variadic = G__18601__delegate;
        return G__18601;
      }();
      G__18600 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__18600__2.call(this, a, b);
          case 3:
            return G__18600__3.call(this, a, b, c);
          default:
            return G__18600__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18600.cljs$lang$maxFixedArity = 3;
      G__18600.cljs$lang$applyTo = G__18600__4.cljs$lang$applyTo;
      return G__18600;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__18603 = null;
      var G__18603__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__18603__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__18603__4 = function() {
        var G__18604__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__18604 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18604__delegate.call(this, a, b, c, ds);
        };
        G__18604.cljs$lang$maxFixedArity = 3;
        G__18604.cljs$lang$applyTo = function(arglist__18605) {
          var a = cljs.core.first(arglist__18605);
          arglist__18605 = cljs.core.next(arglist__18605);
          var b = cljs.core.first(arglist__18605);
          arglist__18605 = cljs.core.next(arglist__18605);
          var c = cljs.core.first(arglist__18605);
          var ds = cljs.core.rest(arglist__18605);
          return G__18604__delegate(a, b, c, ds);
        };
        G__18604.cljs$core$IFn$_invoke$arity$variadic = G__18604__delegate;
        return G__18604;
      }();
      G__18603 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__18603__2.call(this, a, b);
          case 3:
            return G__18603__3.call(this, a, b, c);
          default:
            return G__18603__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18603.cljs$lang$maxFixedArity = 3;
      G__18603.cljs$lang$applyTo = G__18603__4.cljs$lang$applyTo;
      return G__18603;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4433__auto___18606 = size;
          var i_18607 = 0;
          while (true) {
            if (i_18607 < n__4433__auto___18606) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_18607, cljs.core._nth.call(null, c, i_18607)));
              var G__18608 = i_18607 + 1;
              i_18607 = G__18608;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4433__auto___18609 = size;
        var i_18610 = 0;
        while (true) {
          if (i_18610 < n__4433__auto___18609) {
            var x_18611 = f.call(null, cljs.core._nth.call(null, c, i_18610));
            if (x_18611 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_18611);
            }
            var G__18612 = i_18610 + 1;
            i_18610 = G__18612;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4433__auto___18613 = size;
          var i_18614 = 0;
          while (true) {
            if (i_18614 < n__4433__auto___18613) {
              var x_18615 = f.call(null, idx + i_18614, cljs.core._nth.call(null, c, i_18614));
              if (x_18615 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_18615);
              }
              var G__18616 = i_18614 + 1;
              i_18614 = G__18616;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            return p.call(null, y);
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__18623__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__18623 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18623__delegate.call(this, x, y, z, args);
        };
        G__18623.cljs$lang$maxFixedArity = 3;
        G__18623.cljs$lang$applyTo = function(arglist__18624) {
          var x = cljs.core.first(arglist__18624);
          arglist__18624 = cljs.core.next(arglist__18624);
          var y = cljs.core.first(arglist__18624);
          arglist__18624 = cljs.core.next(arglist__18624);
          var z = cljs.core.first(arglist__18624);
          var args = cljs.core.rest(arglist__18624);
          return G__18623__delegate(x, y, z, args);
        };
        G__18623.cljs$core$IFn$_invoke$arity$variadic = G__18623__delegate;
        return G__18623;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              var and__3565__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3565__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3565__auto____$2;
              }
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              var and__3565__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3565__auto____$2)) {
                var and__3565__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3565__auto____$3)) {
                  var and__3565__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3565__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3565__auto____$4;
                  }
                } else {
                  return and__3565__auto____$3;
                }
              } else {
                return and__3565__auto____$2;
              }
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__18625__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__18617_SHARP_) {
            var and__3565__auto__ = p1.call(null, p1__18617_SHARP_);
            if (cljs.core.truth_(and__3565__auto__)) {
              return p2.call(null, p1__18617_SHARP_);
            } else {
              return and__3565__auto__;
            }
          }, args));
        };
        var G__18625 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18625__delegate.call(this, x, y, z, args);
        };
        G__18625.cljs$lang$maxFixedArity = 3;
        G__18625.cljs$lang$applyTo = function(arglist__18626) {
          var x = cljs.core.first(arglist__18626);
          arglist__18626 = cljs.core.next(arglist__18626);
          var y = cljs.core.first(arglist__18626);
          arglist__18626 = cljs.core.next(arglist__18626);
          var z = cljs.core.first(arglist__18626);
          var args = cljs.core.rest(arglist__18626);
          return G__18625__delegate(x, y, z, args);
        };
        G__18625.cljs$core$IFn$_invoke$arity$variadic = G__18625__delegate;
        return G__18625;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              var and__3565__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3565__auto____$2)) {
                var and__3565__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3565__auto____$3)) {
                  var and__3565__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3565__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3565__auto____$4;
                  }
                } else {
                  return and__3565__auto____$3;
                }
              } else {
                return and__3565__auto____$2;
              }
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3565__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3565__auto____$1)) {
              var and__3565__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3565__auto____$2)) {
                var and__3565__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3565__auto____$3)) {
                  var and__3565__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3565__auto____$4)) {
                    var and__3565__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3565__auto____$5)) {
                      var and__3565__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3565__auto____$6)) {
                        var and__3565__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3565__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3565__auto____$7;
                        }
                      } else {
                        return and__3565__auto____$6;
                      }
                    } else {
                      return and__3565__auto____$5;
                    }
                  } else {
                    return and__3565__auto____$4;
                  }
                } else {
                  return and__3565__auto____$3;
                }
              } else {
                return and__3565__auto____$2;
              }
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__18627__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__18618_SHARP_) {
            var and__3565__auto__ = p1.call(null, p1__18618_SHARP_);
            if (cljs.core.truth_(and__3565__auto__)) {
              var and__3565__auto____$1 = p2.call(null, p1__18618_SHARP_);
              if (cljs.core.truth_(and__3565__auto____$1)) {
                return p3.call(null, p1__18618_SHARP_);
              } else {
                return and__3565__auto____$1;
              }
            } else {
              return and__3565__auto__;
            }
          }, args));
        };
        var G__18627 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18627__delegate.call(this, x, y, z, args);
        };
        G__18627.cljs$lang$maxFixedArity = 3;
        G__18627.cljs$lang$applyTo = function(arglist__18628) {
          var x = cljs.core.first(arglist__18628);
          arglist__18628 = cljs.core.next(arglist__18628);
          var y = cljs.core.first(arglist__18628);
          arglist__18628 = cljs.core.next(arglist__18628);
          var z = cljs.core.first(arglist__18628);
          var args = cljs.core.rest(arglist__18628);
          return G__18627__delegate(x, y, z, args);
        };
        G__18627.cljs$core$IFn$_invoke$arity$variadic = G__18627__delegate;
        return G__18627;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__18629__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__18619_SHARP_) {
                return p1__18619_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__18620_SHARP_) {
                var and__3565__auto__ = p1__18620_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3565__auto__)) {
                  return p1__18620_SHARP_.call(null, y);
                } else {
                  return and__3565__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__18621_SHARP_) {
                var and__3565__auto__ = p1__18621_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3565__auto__)) {
                  var and__3565__auto____$1 = p1__18621_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3565__auto____$1)) {
                    return p1__18621_SHARP_.call(null, z);
                  } else {
                    return and__3565__auto____$1;
                  }
                } else {
                  return and__3565__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__18630__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__18622_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__18622_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__18630 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__18630__delegate.call(this, x, y, z, args);
            };
            G__18630.cljs$lang$maxFixedArity = 3;
            G__18630.cljs$lang$applyTo = function(arglist__18631) {
              var x = cljs.core.first(arglist__18631);
              arglist__18631 = cljs.core.next(arglist__18631);
              var y = cljs.core.first(arglist__18631);
              arglist__18631 = cljs.core.next(arglist__18631);
              var z = cljs.core.first(arglist__18631);
              var args = cljs.core.rest(arglist__18631);
              return G__18630__delegate(x, y, z, args);
            };
            G__18630.cljs$core$IFn$_invoke$arity$variadic = G__18630__delegate;
            return G__18630;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__18629 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18629__delegate.call(this, p1, p2, p3, ps);
    };
    G__18629.cljs$lang$maxFixedArity = 3;
    G__18629.cljs$lang$applyTo = function(arglist__18632) {
      var p1 = cljs.core.first(arglist__18632);
      arglist__18632 = cljs.core.next(arglist__18632);
      var p2 = cljs.core.first(arglist__18632);
      arglist__18632 = cljs.core.next(arglist__18632);
      var p3 = cljs.core.first(arglist__18632);
      var ps = cljs.core.rest(arglist__18632);
      return G__18629__delegate(p1, p2, p3, ps);
    };
    G__18629.cljs$core$IFn$_invoke$arity$variadic = G__18629__delegate;
    return G__18629;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3577__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3577__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__18639__delegate = function(x, y, z, args) {
          var or__3577__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__18639 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18639__delegate.call(this, x, y, z, args);
        };
        G__18639.cljs$lang$maxFixedArity = 3;
        G__18639.cljs$lang$applyTo = function(arglist__18640) {
          var x = cljs.core.first(arglist__18640);
          arglist__18640 = cljs.core.next(arglist__18640);
          var y = cljs.core.first(arglist__18640);
          arglist__18640 = cljs.core.next(arglist__18640);
          var z = cljs.core.first(arglist__18640);
          var args = cljs.core.rest(arglist__18640);
          return G__18639__delegate(x, y, z, args);
        };
        G__18639.cljs$core$IFn$_invoke$arity$variadic = G__18639__delegate;
        return G__18639;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            var or__3577__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3577__auto____$2)) {
              return or__3577__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            var or__3577__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3577__auto____$2)) {
              return or__3577__auto____$2;
            } else {
              var or__3577__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3577__auto____$3)) {
                return or__3577__auto____$3;
              } else {
                var or__3577__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3577__auto____$4)) {
                  return or__3577__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__18641__delegate = function(x, y, z, args) {
          var or__3577__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3577__auto__) {
              return function(p1__18633_SHARP_) {
                var or__3577__auto____$1 = p1.call(null, p1__18633_SHARP_);
                if (cljs.core.truth_(or__3577__auto____$1)) {
                  return or__3577__auto____$1;
                } else {
                  return p2.call(null, p1__18633_SHARP_);
                }
              };
            }(or__3577__auto__), args);
          }
        };
        var G__18641 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18641__delegate.call(this, x, y, z, args);
        };
        G__18641.cljs$lang$maxFixedArity = 3;
        G__18641.cljs$lang$applyTo = function(arglist__18642) {
          var x = cljs.core.first(arglist__18642);
          arglist__18642 = cljs.core.next(arglist__18642);
          var y = cljs.core.first(arglist__18642);
          arglist__18642 = cljs.core.next(arglist__18642);
          var z = cljs.core.first(arglist__18642);
          var args = cljs.core.rest(arglist__18642);
          return G__18641__delegate(x, y, z, args);
        };
        G__18641.cljs$core$IFn$_invoke$arity$variadic = G__18641__delegate;
        return G__18641;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            var or__3577__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3577__auto____$2)) {
              return or__3577__auto____$2;
            } else {
              var or__3577__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3577__auto____$3)) {
                return or__3577__auto____$3;
              } else {
                var or__3577__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3577__auto____$4)) {
                  return or__3577__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3577__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3577__auto____$1)) {
            return or__3577__auto____$1;
          } else {
            var or__3577__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3577__auto____$2)) {
              return or__3577__auto____$2;
            } else {
              var or__3577__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3577__auto____$3)) {
                return or__3577__auto____$3;
              } else {
                var or__3577__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3577__auto____$4)) {
                  return or__3577__auto____$4;
                } else {
                  var or__3577__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3577__auto____$5)) {
                    return or__3577__auto____$5;
                  } else {
                    var or__3577__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3577__auto____$6)) {
                      return or__3577__auto____$6;
                    } else {
                      var or__3577__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3577__auto____$7)) {
                        return or__3577__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__18643__delegate = function(x, y, z, args) {
          var or__3577__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3577__auto__) {
              return function(p1__18634_SHARP_) {
                var or__3577__auto____$1 = p1.call(null, p1__18634_SHARP_);
                if (cljs.core.truth_(or__3577__auto____$1)) {
                  return or__3577__auto____$1;
                } else {
                  var or__3577__auto____$2 = p2.call(null, p1__18634_SHARP_);
                  if (cljs.core.truth_(or__3577__auto____$2)) {
                    return or__3577__auto____$2;
                  } else {
                    return p3.call(null, p1__18634_SHARP_);
                  }
                }
              };
            }(or__3577__auto__), args);
          }
        };
        var G__18643 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18643__delegate.call(this, x, y, z, args);
        };
        G__18643.cljs$lang$maxFixedArity = 3;
        G__18643.cljs$lang$applyTo = function(arglist__18644) {
          var x = cljs.core.first(arglist__18644);
          arglist__18644 = cljs.core.next(arglist__18644);
          var y = cljs.core.first(arglist__18644);
          arglist__18644 = cljs.core.next(arglist__18644);
          var z = cljs.core.first(arglist__18644);
          var args = cljs.core.rest(arglist__18644);
          return G__18643__delegate(x, y, z, args);
        };
        G__18643.cljs$core$IFn$_invoke$arity$variadic = G__18643__delegate;
        return G__18643;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__18645__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__18635_SHARP_) {
                return p1__18635_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__18636_SHARP_) {
                var or__3577__auto__ = p1__18636_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3577__auto__)) {
                  return or__3577__auto__;
                } else {
                  return p1__18636_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__18637_SHARP_) {
                var or__3577__auto__ = p1__18637_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3577__auto__)) {
                  return or__3577__auto__;
                } else {
                  var or__3577__auto____$1 = p1__18637_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3577__auto____$1)) {
                    return or__3577__auto____$1;
                  } else {
                    return p1__18637_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__18646__delegate = function(x, y, z, args) {
              var or__3577__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3577__auto__)) {
                return or__3577__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3577__auto__, ps__$1) {
                  return function(p1__18638_SHARP_) {
                    return cljs.core.some.call(null, p1__18638_SHARP_, args);
                  };
                }(or__3577__auto__, ps__$1), ps__$1);
              }
            };
            var G__18646 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__18646__delegate.call(this, x, y, z, args);
            };
            G__18646.cljs$lang$maxFixedArity = 3;
            G__18646.cljs$lang$applyTo = function(arglist__18647) {
              var x = cljs.core.first(arglist__18647);
              arglist__18647 = cljs.core.next(arglist__18647);
              var y = cljs.core.first(arglist__18647);
              arglist__18647 = cljs.core.next(arglist__18647);
              var z = cljs.core.first(arglist__18647);
              var args = cljs.core.rest(arglist__18647);
              return G__18646__delegate(x, y, z, args);
            };
            G__18646.cljs$core$IFn$_invoke$arity$variadic = G__18646__delegate;
            return G__18646;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__18645 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18645__delegate.call(this, p1, p2, p3, ps);
    };
    G__18645.cljs$lang$maxFixedArity = 3;
    G__18645.cljs$lang$applyTo = function(arglist__18648) {
      var p1 = cljs.core.first(arglist__18648);
      arglist__18648 = cljs.core.next(arglist__18648);
      var p2 = cljs.core.first(arglist__18648);
      arglist__18648 = cljs.core.next(arglist__18648);
      var p3 = cljs.core.first(arglist__18648);
      var ps = cljs.core.rest(arglist__18648);
      return G__18645__delegate(p1, p2, p3, ps);
    };
    G__18645.cljs$core$IFn$_invoke$arity$variadic = G__18645__delegate;
    return G__18645;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4433__auto___18650 = size;
          var i_18651 = 0;
          while (true) {
            if (i_18651 < n__4433__auto___18650) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_18651)));
              var G__18652 = i_18651 + 1;
              i_18651 = G__18652;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__18653__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__18649_SHARP_) {
          return cljs.core.apply.call(null, f, p1__18649_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__18653 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__18653__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__18653.cljs$lang$maxFixedArity = 4;
    G__18653.cljs$lang$applyTo = function(arglist__18654) {
      var f = cljs.core.first(arglist__18654);
      arglist__18654 = cljs.core.next(arglist__18654);
      var c1 = cljs.core.first(arglist__18654);
      arglist__18654 = cljs.core.next(arglist__18654);
      var c2 = cljs.core.first(arglist__18654);
      arglist__18654 = cljs.core.next(arglist__18654);
      var c3 = cljs.core.first(arglist__18654);
      var colls = cljs.core.rest(arglist__18654);
      return G__18653__delegate(f, c1, c2, c3, colls);
    };
    G__18653.cljs$core$IFn$_invoke$arity$variadic = G__18653__delegate;
    return G__18653;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__18655 = n__$1 - 1;
        var G__18656 = cljs.core.rest.call(null, s);
        n__$1 = G__18655;
        coll__$1 = G__18656;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, n, coll);
    };
  }(step), null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__18657 = cljs.core.next.call(null, s);
      var G__18658 = cljs.core.next.call(null, lead);
      s = G__18657;
      lead = G__18658;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3565__auto__ = s;
        if (and__3565__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3565__auto__;
        }
      }())) {
        var G__18659 = pred__$1;
        var G__18660 = cljs.core.rest.call(null, s);
        pred__$1 = G__18659;
        coll__$1 = G__18660;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, pred, coll);
    };
  }(step), null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__18661__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__18661 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18661__delegate.call(this, c1, c2, colls);
    };
    G__18661.cljs$lang$maxFixedArity = 2;
    G__18661.cljs$lang$applyTo = function(arglist__18662) {
      var c1 = cljs.core.first(arglist__18662);
      arglist__18662 = cljs.core.next(arglist__18662);
      var c2 = cljs.core.first(arglist__18662);
      var colls = cljs.core.rest(arglist__18662);
      return G__18661__delegate(c1, c2, colls);
    };
    G__18661.cljs$core$IFn$_invoke$arity$variadic = G__18661__delegate;
    return G__18661;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__18663__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__18663 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__18663__delegate.call(this, f, coll, colls);
    };
    G__18663.cljs$lang$maxFixedArity = 2;
    G__18663.cljs$lang$applyTo = function(arglist__18664) {
      var f = cljs.core.first(arglist__18664);
      arglist__18664 = cljs.core.next(arglist__18664);
      var coll = cljs.core.first(arglist__18664);
      var colls = cljs.core.rest(arglist__18664);
      return G__18663__delegate(f, coll, colls);
    };
    G__18663.cljs$core$IFn$_invoke$arity$variadic = G__18663__delegate;
    return G__18663;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4433__auto___18665 = size;
        var i_18666 = 0;
        while (true) {
          if (i_18666 < n__4433__auto___18665) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_18666)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_18666));
            } else {
            }
            var G__18667 = i_18666 + 1;
            i_18666 = G__18667;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__18668_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__18668_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__18670 = to;
      if (G__18670) {
        var bit__4220__auto__ = G__18670.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4220__auto__ || G__18670.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__18671__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__18671 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__18671__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__18671.cljs$lang$maxFixedArity = 4;
    G__18671.cljs$lang$applyTo = function(arglist__18672) {
      var f = cljs.core.first(arglist__18672);
      arglist__18672 = cljs.core.next(arglist__18672);
      var c1 = cljs.core.first(arglist__18672);
      arglist__18672 = cljs.core.next(arglist__18672);
      var c2 = cljs.core.first(arglist__18672);
      arglist__18672 = cljs.core.next(arglist__18672);
      var c3 = cljs.core.first(arglist__18672);
      var colls = cljs.core.rest(arglist__18672);
      return G__18671__delegate(f, c1, c2, c3, colls);
    };
    G__18671.cljs$core$IFn$_invoke$arity$variadic = G__18671__delegate;
    return G__18671;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__18674 = m__$1;
          if (G__18674) {
            var bit__4227__auto__ = G__18674.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4227__auto__ || G__18674.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__18674.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__18674);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__18674);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__18675 = sentinel;
            var G__18676 = m__$2;
            var G__18677 = cljs.core.next.call(null, ks__$1);
            sentinel = G__18675;
            m__$1 = G__18676;
            ks__$1 = G__18677;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__18678, v) {
  var vec__18680 = p__18678;
  var k = cljs.core.nth.call(null, vec__18680, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__18680, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__18681, f) {
    var vec__18691 = p__18681;
    var k = cljs.core.nth.call(null, vec__18691, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__18691, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__18682, f, a) {
    var vec__18692 = p__18682;
    var k = cljs.core.nth.call(null, vec__18692, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__18692, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__18683, f, a, b) {
    var vec__18693 = p__18683;
    var k = cljs.core.nth.call(null, vec__18693, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__18693, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__18684, f, a, b, c) {
    var vec__18694 = p__18684;
    var k = cljs.core.nth.call(null, vec__18694, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__18694, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__18696__delegate = function(m, p__18685, f, a, b, c, args) {
      var vec__18695 = p__18685;
      var k = cljs.core.nth.call(null, vec__18695, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__18695, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__18696 = function(m, p__18685, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__18696__delegate.call(this, m, p__18685, f, a, b, c, args);
    };
    G__18696.cljs$lang$maxFixedArity = 6;
    G__18696.cljs$lang$applyTo = function(arglist__18697) {
      var m = cljs.core.first(arglist__18697);
      arglist__18697 = cljs.core.next(arglist__18697);
      var p__18685 = cljs.core.first(arglist__18697);
      arglist__18697 = cljs.core.next(arglist__18697);
      var f = cljs.core.first(arglist__18697);
      arglist__18697 = cljs.core.next(arglist__18697);
      var a = cljs.core.first(arglist__18697);
      arglist__18697 = cljs.core.next(arglist__18697);
      var b = cljs.core.first(arglist__18697);
      arglist__18697 = cljs.core.next(arglist__18697);
      var c = cljs.core.first(arglist__18697);
      var args = cljs.core.rest(arglist__18697);
      return G__18696__delegate(m, p__18685, f, a, b, c, args);
    };
    G__18696.cljs$core$IFn$_invoke$arity$variadic = G__18696__delegate;
    return G__18696;
  }();
  update_in = function(m, p__18685, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__18685, f);
      case 4:
        return update_in__4.call(this, m, p__18685, f, a);
      case 5:
        return update_in__5.call(this, m, p__18685, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__18685, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__18685, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4147__auto__, writer__4148__auto__, opts__4149__auto__) {
  return cljs.core._write.call(null, writer__4148__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__18698 = ll - 5;
      var G__18699 = r;
      ll = G__18698;
      ret = G__18699;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__18700 = cljs.core.pv_aget.call(null, node, 0);
      var G__18701 = level - 5;
      node = G__18700;
      level = G__18701;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__18702 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__18703 = level - 5;
        node = G__18702;
        level = G__18703;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__18705 = j + 1;
              var G__18706 = init__$2;
              j = G__18705;
              init__$1 = G__18706;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__18707 = i + step_init[0];
        i = G__18707;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4433__auto___18708 = len;
    var i_18709 = 0;
    while (true) {
      if (i_18709 < n__4433__auto___18708) {
        new_tail[i_18709] = self__.tail[i_18709];
        var G__18710 = i_18709 + 1;
        i_18709 = G__18710;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__18711 = null;
  var G__18711__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__18711__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__18711 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18711__2.call(this, self__, k);
      case 3:
        return G__18711__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18711;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args18704) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18704)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__18712 = i + 1;
        var G__18713 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__18712;
        out = G__18713;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__18714) {
    var args = cljs.core.seq(arglist__18714);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3884__auto__ = self__.end;
    var y__3885__auto__ = v_pos + 1;
    return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__18716 = null;
  var G__18716__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__18716__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__18716 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18716__2.call(this, self__, k);
      case 3:
        return G__18716__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18716;
}();
cljs.core.Subvec.prototype.apply = function(self__, args18715) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18715)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__18717 = meta;
      var G__18718 = v.v;
      var G__18719 = v.start + start;
      var G__18720 = v.start + end;
      var G__18721 = __hash;
      meta = G__18717;
      v = G__18718;
      start = G__18719;
      end = G__18720;
      __hash = G__18721;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj18725 = {};
    return obj18725;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__18726 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__18727 = level - 5;
        node = G__18726;
        level = G__18727;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__18729 = null;
  var G__18729__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18729__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18729 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18729__2.call(this, self__, k);
      case 3:
        return G__18729__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18729;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args18728) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18728)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3577__auto__ = self__.front;
    if (cljs.core.truth_(or__3577__auto__)) {
      return or__3577__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3577__auto__ = self__.rear;
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__18730 = i + incr;
        i = G__18730;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__18731 = i + 1;
      var G__18732 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__18731;
      out = G__18732;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj18736 = {};
    return obj18736;
  }();
  var l = ks.length;
  var i_18737 = 0;
  while (true) {
    if (i_18737 < l) {
      var k_18738 = ks[i_18737];
      new_obj[k_18738] = obj[k_18738];
      var G__18739 = i_18737 + 1;
      i_18737 = G__18739;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__18742 = cljs.core.rest.call(null, keys__$1);
        var G__18743 = init__$2;
        keys__$1 = G__18742;
        init__$1 = G__18743;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__18740_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18740_SHARP_, self__.strobj[p1__18740_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__18744 = null;
  var G__18744__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18744__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18744 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18744__2.call(this, self__, k);
      case 3:
        return G__18744__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18744;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args18741) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18741)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj18746 = {};
  return obj18746;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__18747 = i + 2;
          i = G__18747;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__18748 = i + 2;
          i = G__18748;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__18749 = i + 2;
          i = G__18749;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__18750 = i + 2;
          i = G__18750;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__18751 = i + 2;
          i = G__18751;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_18752 = 0;
  while (true) {
    if (i_18752 < l) {
      narr[i_18752] = arr[i_18752];
      var G__18753 = i_18752 + 1;
      i_18752 = G__18753;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__18758 = i + 2;
        var G__18759 = init__$2;
        i = G__18758;
        init__$1 = G__18759;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj18756 = {};
    return obj18756;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__18760 = s + 2;
            var G__18761 = d;
            s = G__18760;
            d = G__18761;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__18762 = s + 2;
              var G__18763 = d + 2;
              s = G__18762;
              d = G__18763;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__18757 = cljs.core.aclone.call(null, self__.arr);
          G__18757[idx + 1] = v;
          return G__18757;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__18764 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__18765 = cljs.core.next.call(null, es);
          ret = G__18764;
          es = G__18765;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__18766 = null;
  var G__18766__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18766__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18766 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18766__2.call(this, self__, k);
      case 3:
        return G__18766__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18766;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args18754) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18754)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__18767 = i + 2;
        var G__18768 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__18767;
        ret = G__18768;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__18769_18771 = self__.arr;
      G__18769_18771.pop();
      G__18769_18771.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__18770 = o;
      if (G__18770) {
        var bit__4227__auto__ = G__18770.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4227__auto__ || G__18770.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__18770.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__18770);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__18770);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__18772 = cljs.core.next.call(null, es);
          var G__18773 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__18772;
          tcoll__$2 = G__18773;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__18774 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__18775 = i + 2;
      out = G__18774;
      i = G__18775;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4147__auto__, writer__4148__auto__, opts__4149__auto__) {
  return cljs.core._write.call(null, writer__4148__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__18778 = cljs.core.aclone.call(null, arr);
    G__18778[i] = a;
    return G__18778;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__18779 = cljs.core.aclone.call(null, arr);
    G__18779[i] = a;
    G__18779[j] = b;
    return G__18779;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__18780 = i + 2;
        var G__18781 = init__$2;
        i = G__18780;
        init__$1 = G__18781;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_18782 = 0;
        var j_18783 = 0;
        while (true) {
          if (i_18782 < 32) {
            if ((self__.bitmap >>> i_18782 & 1) === 0) {
              var G__18784 = i_18782 + 1;
              var G__18785 = j_18783;
              i_18782 = G__18784;
              j_18783 = G__18785;
              continue;
            } else {
              nodes[i_18782] = !(self__.arr[j_18783] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_18783]), self__.arr[j_18783], self__.arr[j_18783 + 1], added_leaf_QMARK_) : self__.arr[j_18783 + 1];
              var G__18786 = i_18782 + 1;
              var G__18787 = j_18783 + 2;
              i_18782 = G__18786;
              j_18783 = G__18787;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_18788 = 0;
      var j_18789 = 0;
      while (true) {
        if (i_18788 < 32) {
          if ((self__.bitmap >>> i_18788 & 1) === 0) {
            var G__18790 = i_18788 + 1;
            var G__18791 = j_18789;
            i_18788 = G__18790;
            j_18789 = G__18791;
            continue;
          } else {
            nodes[i_18788] = !(self__.arr[j_18789] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_18789]), self__.arr[j_18789], self__.arr[j_18789 + 1], added_leaf_QMARK_) : self__.arr[j_18789 + 1];
            var G__18792 = i_18788 + 1;
            var G__18793 = j_18789 + 2;
            i_18788 = G__18792;
            j_18789 = G__18793;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__18794 = i + 1;
        var G__18795 = j + 2;
        var G__18796 = bitmap | 1 << i;
        i = G__18794;
        j = G__18795;
        bitmap = G__18796;
        continue;
      } else {
        var G__18797 = i + 1;
        var G__18798 = j;
        var G__18799 = bitmap;
        i = G__18797;
        j = G__18798;
        bitmap = G__18799;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__18800 = i + 1;
          var G__18801 = init__$2;
          i = G__18800;
          init__$1 = G__18801;
          continue;
        }
      } else {
        var G__18802 = i + 1;
        var G__18803 = init__$1;
        i = G__18802;
        init__$1 = G__18803;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__18804 = i + 2;
        i = G__18804;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__18805 = j + 2;
                j = G__18805;
                continue;
              }
            } else {
              var G__18806 = j + 2;
              j = G__18806;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__18807 = j + 1;
              j = G__18807;
              continue;
            }
          } else {
            var G__18808 = j + 1;
            j = G__18808;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj18811 = {};
    return obj18811;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__18812 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__18813 = cljs.core.next.call(null, es);
          ret = G__18812;
          es = G__18813;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__18814 = null;
  var G__18814__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18814__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18814 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18814__2.call(this, self__, k);
      case 3:
        return G__18814__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18814;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args18809) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18809)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__18815 = i + 1;
      var G__18816 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__18815;
      out = G__18816;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__18817 = o;
      if (G__18817) {
        var bit__4227__auto__ = G__18817.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4227__auto__ || G__18817.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__18817.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__18817);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__18817);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__18818 = cljs.core.next.call(null, es);
          var G__18819 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__18818;
          tcoll__$1 = G__18819;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__18820 = ascending_QMARK_ ? t.left : t.right;
      var G__18821 = cljs.core.conj.call(null, stack__$1, t);
      t = G__18820;
      stack__$1 = G__18821;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__18823 = null;
  var G__18823__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18823__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18823 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18823__2.call(this, self__, k);
      case 3:
        return G__18823__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18823;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args18822) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18822)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__18825 = null;
  var G__18825__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18825__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18825 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18825__2.call(this, self__, k);
      case 3:
        return G__18825__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18825;
}();
cljs.core.RedNode.prototype.apply = function(self__, args18824) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18824)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__18827 = t.left;
          t = G__18827;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__18828 = t.right;
            t = G__18828;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__18829 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__18830 = cljs.core.next.call(null, es);
          ret = G__18829;
          es = G__18830;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__18831 = null;
  var G__18831__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18831__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18831 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18831__2.call(this, self__, k);
      case 3:
        return G__18831__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18831;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args18826) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18826)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__18832 = cljs.core.conj.call(null, stack, t);
              var G__18833 = t.left;
              stack = G__18832;
              t = G__18833;
              continue;
            } else {
              var G__18834 = stack;
              var G__18835 = t.right;
              stack = G__18834;
              t = G__18835;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__18836 = cljs.core.conj.call(null, stack, t);
                var G__18837 = t.right;
                stack = G__18836;
                t = G__18837;
                continue;
              } else {
                var G__18838 = stack;
                var G__18839 = t.left;
                stack = G__18838;
                t = G__18839;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__18840 = cljs.core.nnext.call(null, in$);
        var G__18841 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__18840;
        out = G__18841;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__18842) {
    var keyvals = cljs.core.seq(arglist__18842);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__18843) {
    var keyvals = cljs.core.seq(arglist__18843);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj18847 = {};
      return obj18847;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__18848 = cljs.core.nnext.call(null, kvs);
        kvs = G__18848;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__18849) {
    var keyvals = cljs.core.seq(arglist__18849);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__18850 = cljs.core.nnext.call(null, in$);
        var G__18851 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__18850;
        out = G__18851;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__18852) {
    var keyvals = cljs.core.seq(arglist__18852);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__18853 = cljs.core.nnext.call(null, in$);
        var G__18854 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__18853;
        out = G__18854;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__18855) {
    var comparator = cljs.core.first(arglist__18855);
    var keyvals = cljs.core.rest(arglist__18855);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__18856 = self__.mseq;
    if (G__18856) {
      var bit__4227__auto__ = G__18856.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4227__auto__ || G__18856.cljs$core$INext$) {
        return true;
      } else {
        if (!G__18856.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18856);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18856);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__18857 = self__.mseq;
    if (G__18857) {
      var bit__4227__auto__ = G__18857.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4227__auto__ || G__18857.cljs$core$INext$) {
        return true;
      } else {
        if (!G__18857.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18857);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18857);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__18858 = self__.mseq;
    if (G__18858) {
      var bit__4227__auto__ = G__18858.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4227__auto__ || G__18858.cljs$core$INext$) {
        return true;
      } else {
        if (!G__18858.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18858);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18858);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__18859 = self__.mseq;
    if (G__18859) {
      var bit__4227__auto__ = G__18859.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4227__auto__ || G__18859.cljs$core$INext$) {
        return true;
      } else {
        if (!G__18859.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18859);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__18859);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__18860_SHARP_, p2__18861_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3577__auto__ = p1__18860_SHARP_;
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__18861_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__18862) {
    var maps = cljs.core.seq(arglist__18862);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3577__auto__ = m1;
            if (cljs.core.truth_(or__3577__auto__)) {
              return or__3577__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__18863) {
    var f = cljs.core.first(arglist__18863);
    var maps = cljs.core.rest(arglist__18863);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__18864 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__18865 = cljs.core.next.call(null, keys);
      ret = G__18864;
      keys = G__18865;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__18866_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__18866_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__18868 = null;
  var G__18868__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18868__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18868 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18868__2.call(this, self__, k);
      case 3:
        return G__18868__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18868;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args18867) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18867)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__18869 = i + 1;
        var G__18870 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__18869;
        out = G__18870;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__18871 = i + 1;
        var G__18872 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__18871;
        out = G__18872;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__18874 = null;
  var G__18874__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__18874__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__18874 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18874__2.call(this, self__, k);
      case 3:
        return G__18874__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18874;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args18873) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18873)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__18875_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__18875_SHARP_);
    };
  }(coll__$1), other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__18877 = null;
  var G__18877__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__18877__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__18877 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__18877__2.call(this, self__, k);
      case 3:
        return G__18877__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__18877;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args18876) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args18876)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4427__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4427__auto__.length) {
        var G__18878 = i + 1;
        var G__18879 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__18878;
        res = G__18879;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__18880 = cljs.core._next.call(null, in$__$1);
            var G__18881 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__18880;
            out = G__18881;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__18882__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__18882 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__18882__delegate.call(this, keys);
    };
    G__18882.cljs$lang$maxFixedArity = 0;
    G__18882.cljs$lang$applyTo = function(arglist__18883) {
      var keys = cljs.core.seq(arglist__18883);
      return G__18882__delegate(keys);
    };
    G__18882.cljs$core$IFn$_invoke$arity$variadic = G__18882__delegate;
    return G__18882;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__18884) {
    var keys = cljs.core.seq(arglist__18884);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__18885) {
    var comparator = cljs.core.first(arglist__18885);
    var keys = cljs.core.rest(arglist__18885);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(n) {
      return function(v, i) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__18886_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__18886_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__18886_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__18893, seen__$1) {
        while (true) {
          var vec__18894 = p__18893;
          var f = cljs.core.nth.call(null, vec__18894, 0, null);
          var xs__$1 = vec__18894;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__18895 = cljs.core.rest.call(null, s);
              var G__18896 = seen__$1;
              p__18893 = G__18895;
              seen__$1 = G__18896;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__18897 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__18898 = cljs.core.next.call(null, s__$1);
      ret = G__18897;
      s__$1 = G__18898;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__18900 = x;
    if (G__18900) {
      var bit__4220__auto__ = G__18900.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4220__auto__ || G__18900.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__18901 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__18902 = cljs.core.next.call(null, ks);
      var G__18903 = cljs.core.next.call(null, vs);
      map = G__18901;
      ks = G__18902;
      vs = G__18903;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__18906__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__18904_SHARP_, p2__18905_SHARP_) {
        return max_key.call(null, k, p1__18904_SHARP_, p2__18905_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__18906 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18906__delegate.call(this, k, x, y, more);
    };
    G__18906.cljs$lang$maxFixedArity = 3;
    G__18906.cljs$lang$applyTo = function(arglist__18907) {
      var k = cljs.core.first(arglist__18907);
      arglist__18907 = cljs.core.next(arglist__18907);
      var x = cljs.core.first(arglist__18907);
      arglist__18907 = cljs.core.next(arglist__18907);
      var y = cljs.core.first(arglist__18907);
      var more = cljs.core.rest(arglist__18907);
      return G__18906__delegate(k, x, y, more);
    };
    G__18906.cljs$core$IFn$_invoke$arity$variadic = G__18906__delegate;
    return G__18906;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__18910__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__18908_SHARP_, p2__18909_SHARP_) {
        return min_key.call(null, k, p1__18908_SHARP_, p2__18909_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__18910 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18910__delegate.call(this, k, x, y, more);
    };
    G__18910.cljs$lang$maxFixedArity = 3;
    G__18910.cljs$lang$applyTo = function(arglist__18911) {
      var k = cljs.core.first(arglist__18911);
      arglist__18911 = cljs.core.next(arglist__18911);
      var x = cljs.core.first(arglist__18911);
      arglist__18911 = cljs.core.next(arglist__18911);
      var y = cljs.core.first(arglist__18911);
      var more = cljs.core.rest(arglist__18911);
      return G__18910__delegate(k, x, y, more);
    };
    G__18910.cljs$core$IFn$_invoke$arity$variadic = G__18910__delegate;
    return G__18910;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__18914 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__18914, 0, null);
        var s = vec__18914;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__18915 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__18915, 0, null);
      var s = vec__18915;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__18918 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__18918, 0, null);
        var s = vec__18918;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__18919 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__18919, 0, null);
      var s = vec__18919;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
        return function(p1__18920_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__18920_SHARP_));
        };
      }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__18931 = null;
      var G__18931__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__18931__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__18931__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__18931__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__18931__4 = function() {
        var G__18932__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__18932 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18932__delegate.call(this, x, y, z, args);
        };
        G__18932.cljs$lang$maxFixedArity = 3;
        G__18932.cljs$lang$applyTo = function(arglist__18933) {
          var x = cljs.core.first(arglist__18933);
          arglist__18933 = cljs.core.next(arglist__18933);
          var y = cljs.core.first(arglist__18933);
          arglist__18933 = cljs.core.next(arglist__18933);
          var z = cljs.core.first(arglist__18933);
          var args = cljs.core.rest(arglist__18933);
          return G__18932__delegate(x, y, z, args);
        };
        G__18932.cljs$core$IFn$_invoke$arity$variadic = G__18932__delegate;
        return G__18932;
      }();
      G__18931 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18931__0.call(this);
          case 1:
            return G__18931__1.call(this, x);
          case 2:
            return G__18931__2.call(this, x, y);
          case 3:
            return G__18931__3.call(this, x, y, z);
          default:
            return G__18931__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18931.cljs$lang$maxFixedArity = 3;
      G__18931.cljs$lang$applyTo = G__18931__4.cljs$lang$applyTo;
      return G__18931;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__18934 = null;
      var G__18934__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__18934__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__18934__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__18934__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__18934__4 = function() {
        var G__18935__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__18935 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18935__delegate.call(this, x, y, z, args);
        };
        G__18935.cljs$lang$maxFixedArity = 3;
        G__18935.cljs$lang$applyTo = function(arglist__18936) {
          var x = cljs.core.first(arglist__18936);
          arglist__18936 = cljs.core.next(arglist__18936);
          var y = cljs.core.first(arglist__18936);
          arglist__18936 = cljs.core.next(arglist__18936);
          var z = cljs.core.first(arglist__18936);
          var args = cljs.core.rest(arglist__18936);
          return G__18935__delegate(x, y, z, args);
        };
        G__18935.cljs$core$IFn$_invoke$arity$variadic = G__18935__delegate;
        return G__18935;
      }();
      G__18934 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18934__0.call(this);
          case 1:
            return G__18934__1.call(this, x);
          case 2:
            return G__18934__2.call(this, x, y);
          case 3:
            return G__18934__3.call(this, x, y, z);
          default:
            return G__18934__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18934.cljs$lang$maxFixedArity = 3;
      G__18934.cljs$lang$applyTo = G__18934__4.cljs$lang$applyTo;
      return G__18934;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__18937 = null;
      var G__18937__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__18937__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__18937__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__18937__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__18937__4 = function() {
        var G__18938__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__18938 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__18938__delegate.call(this, x, y, z, args);
        };
        G__18938.cljs$lang$maxFixedArity = 3;
        G__18938.cljs$lang$applyTo = function(arglist__18939) {
          var x = cljs.core.first(arglist__18939);
          arglist__18939 = cljs.core.next(arglist__18939);
          var y = cljs.core.first(arglist__18939);
          arglist__18939 = cljs.core.next(arglist__18939);
          var z = cljs.core.first(arglist__18939);
          var args = cljs.core.rest(arglist__18939);
          return G__18938__delegate(x, y, z, args);
        };
        G__18938.cljs$core$IFn$_invoke$arity$variadic = G__18938__delegate;
        return G__18938;
      }();
      G__18937 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__18937__0.call(this);
          case 1:
            return G__18937__1.call(this, x);
          case 2:
            return G__18937__2.call(this, x, y);
          case 3:
            return G__18937__3.call(this, x, y, z);
          default:
            return G__18937__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__18937.cljs$lang$maxFixedArity = 3;
      G__18937.cljs$lang$applyTo = G__18937__4.cljs$lang$applyTo;
      return G__18937;
    }();
  };
  var juxt__4 = function() {
    var G__18940__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__18941 = null;
          var G__18941__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__18921_SHARP_, p2__18922_SHARP_) {
                return cljs.core.conj.call(null, p1__18921_SHARP_, p2__18922_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__18941__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__18923_SHARP_, p2__18924_SHARP_) {
                return cljs.core.conj.call(null, p1__18923_SHARP_, p2__18924_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__18941__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__18925_SHARP_, p2__18926_SHARP_) {
                return cljs.core.conj.call(null, p1__18925_SHARP_, p2__18926_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__18941__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__18927_SHARP_, p2__18928_SHARP_) {
                return cljs.core.conj.call(null, p1__18927_SHARP_, p2__18928_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__18941__4 = function() {
            var G__18942__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__18929_SHARP_, p2__18930_SHARP_) {
                  return cljs.core.conj.call(null, p1__18929_SHARP_, cljs.core.apply.call(null, p2__18930_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__18942 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__18942__delegate.call(this, x, y, z, args);
            };
            G__18942.cljs$lang$maxFixedArity = 3;
            G__18942.cljs$lang$applyTo = function(arglist__18943) {
              var x = cljs.core.first(arglist__18943);
              arglist__18943 = cljs.core.next(arglist__18943);
              var y = cljs.core.first(arglist__18943);
              arglist__18943 = cljs.core.next(arglist__18943);
              var z = cljs.core.first(arglist__18943);
              var args = cljs.core.rest(arglist__18943);
              return G__18942__delegate(x, y, z, args);
            };
            G__18942.cljs$core$IFn$_invoke$arity$variadic = G__18942__delegate;
            return G__18942;
          }();
          G__18941 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__18941__0.call(this);
              case 1:
                return G__18941__1.call(this, x);
              case 2:
                return G__18941__2.call(this, x, y);
              case 3:
                return G__18941__3.call(this, x, y, z);
              default:
                return G__18941__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__18941.cljs$lang$maxFixedArity = 3;
          G__18941.cljs$lang$applyTo = G__18941__4.cljs$lang$applyTo;
          return G__18941;
        }();
      }(fs__$1);
    };
    var G__18940 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__18940__delegate.call(this, f, g, h, fs);
    };
    G__18940.cljs$lang$maxFixedArity = 3;
    G__18940.cljs$lang$applyTo = function(arglist__18944) {
      var f = cljs.core.first(arglist__18944);
      arglist__18944 = cljs.core.next(arglist__18944);
      var g = cljs.core.first(arglist__18944);
      arglist__18944 = cljs.core.next(arglist__18944);
      var h = cljs.core.first(arglist__18944);
      var fs = cljs.core.rest(arglist__18944);
      return G__18940__delegate(f, g, h, fs);
    };
    G__18940.cljs$core$IFn$_invoke$arity$variadic = G__18940__delegate;
    return G__18940;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__18945 = cljs.core.next.call(null, coll);
        coll = G__18945;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__18946 = n - 1;
        var G__18947 = cljs.core.next.call(null, coll);
        n = G__18946;
        coll = G__18947;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__18949 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__18949, 0, null);
  var flags = cljs.core.nth.call(null, vec__18949, 1, null);
  var pattern = cljs.core.nth.call(null, vec__18949, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_18951 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_18952__$1 = cljs.core.next.call(null, coll);
      var n_18953 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_18952__$1 && (n_18953 == null || !(n_18953 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_18952__$1), writer, opts);
          var G__18954 = cljs.core.next.call(null, coll_18952__$1);
          var G__18955 = n_18953 - 1;
          coll_18952__$1 = G__18954;
          n_18953 = G__18955;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_18952__$1) && n_18953 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_18951;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__18960 = cljs.core.seq.call(null, ss);
    var chunk__18961 = null;
    var count__18962 = 0;
    var i__18963 = 0;
    while (true) {
      if (i__18963 < count__18962) {
        var s = cljs.core._nth.call(null, chunk__18961, i__18963);
        cljs.core._write.call(null, writer, s);
        var G__18964 = seq__18960;
        var G__18965 = chunk__18961;
        var G__18966 = count__18962;
        var G__18967 = i__18963 + 1;
        seq__18960 = G__18964;
        chunk__18961 = G__18965;
        count__18962 = G__18966;
        i__18963 = G__18967;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__18960);
        if (temp__4126__auto__) {
          var seq__18960__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18960__$1)) {
            var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__18960__$1);
            var G__18968 = cljs.core.chunk_rest.call(null, seq__18960__$1);
            var G__18969 = c__4333__auto__;
            var G__18970 = cljs.core.count.call(null, c__4333__auto__);
            var G__18971 = 0;
            seq__18960 = G__18968;
            chunk__18961 = G__18969;
            count__18962 = G__18970;
            i__18963 = G__18971;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__18960__$1);
            cljs.core._write.call(null, writer, s);
            var G__18972 = cljs.core.next.call(null, seq__18960__$1);
            var G__18973 = null;
            var G__18974 = 0;
            var G__18975 = 0;
            seq__18960 = G__18972;
            chunk__18961 = G__18973;
            count__18962 = G__18974;
            i__18963 = G__18975;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__18976) {
    var writer = cljs.core.first(arglist__18976);
    var ss = cljs.core.rest(arglist__18976);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj18978 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj18978;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__3565__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__3565__auto__)) {
            var and__3565__auto____$1 = function() {
              var G__18984 = obj;
              if (G__18984) {
                var bit__4227__auto__ = G__18984.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4227__auto__ || G__18984.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__18984.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__18984);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__18984);
              }
            }();
            if (and__3565__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3565__auto____$1;
            }
          } else {
            return and__3565__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__18985 = obj;
              if (G__18985) {
                var bit__4220__auto__ = G__18985.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4220__auto__ || G__18985.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__18987 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                                ns = G__18987;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__18986 = obj;
                              if (G__18986) {
                                var bit__4227__auto__ = G__18986.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4227__auto__ || G__18986.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__18986.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__18986);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__18986);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__18992 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__18993 = null;
  var count__18994 = 0;
  var i__18995 = 0;
  while (true) {
    if (i__18995 < count__18994) {
      var obj = cljs.core._nth.call(null, chunk__18993, i__18995);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__18996 = seq__18992;
      var G__18997 = chunk__18993;
      var G__18998 = count__18994;
      var G__18999 = i__18995 + 1;
      seq__18992 = G__18996;
      chunk__18993 = G__18997;
      count__18994 = G__18998;
      i__18995 = G__18999;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__18992);
      if (temp__4126__auto__) {
        var seq__18992__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18992__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__18992__$1);
          var G__19000 = cljs.core.chunk_rest.call(null, seq__18992__$1);
          var G__19001 = c__4333__auto__;
          var G__19002 = cljs.core.count.call(null, c__4333__auto__);
          var G__19003 = 0;
          seq__18992 = G__19000;
          chunk__18993 = G__19001;
          count__18994 = G__19002;
          i__18995 = G__19003;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__18992__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__19004 = cljs.core.next.call(null, seq__18992__$1);
          var G__19005 = null;
          var G__19006 = 0;
          var G__19007 = 0;
          seq__18992 = G__19004;
          chunk__18993 = G__19005;
          count__18994 = G__19006;
          i__18995 = G__19007;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__19008) {
    var objs = cljs.core.seq(arglist__19008);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__19009) {
    var objs = cljs.core.seq(arglist__19009);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__19010) {
    var objs = cljs.core.seq(arglist__19010);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__19011) {
    var objs = cljs.core.seq(arglist__19011);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__19012) {
    var objs = cljs.core.seq(arglist__19012);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__19013) {
    var objs = cljs.core.seq(arglist__19013);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__19014) {
    var objs = cljs.core.seq(arglist__19014);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__19015) {
    var objs = cljs.core.seq(arglist__19015);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj19017 = {};
  return obj19017;
}();
cljs.core.IReset = function() {
  var obj19019 = {};
  return obj19019;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3565__auto__ = o;
    if (and__3565__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4204__auto__ = o == null ? null : o;
    return function() {
      var or__3577__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj19021 = {};
  return obj19021;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3565__auto__ = o;
      if (and__3565__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4204__auto__ = o == null ? null : o;
      return function() {
        var or__3577__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__19022 = cljs.core.seq.call(null, self__.watches);
  var chunk__19023 = null;
  var count__19024 = 0;
  var i__19025 = 0;
  while (true) {
    if (i__19025 < count__19024) {
      var vec__19026 = cljs.core._nth.call(null, chunk__19023, i__19025);
      var key = cljs.core.nth.call(null, vec__19026, 0, null);
      var f = cljs.core.nth.call(null, vec__19026, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__19028 = seq__19022;
      var G__19029 = chunk__19023;
      var G__19030 = count__19024;
      var G__19031 = i__19025 + 1;
      seq__19022 = G__19028;
      chunk__19023 = G__19029;
      count__19024 = G__19030;
      i__19025 = G__19031;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__19022);
      if (temp__4126__auto__) {
        var seq__19022__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19022__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__19022__$1);
          var G__19032 = cljs.core.chunk_rest.call(null, seq__19022__$1);
          var G__19033 = c__4333__auto__;
          var G__19034 = cljs.core.count.call(null, c__4333__auto__);
          var G__19035 = 0;
          seq__19022 = G__19032;
          chunk__19023 = G__19033;
          count__19024 = G__19034;
          i__19025 = G__19035;
          continue;
        } else {
          var vec__19027 = cljs.core.first.call(null, seq__19022__$1);
          var key = cljs.core.nth.call(null, vec__19027, 0, null);
          var f = cljs.core.nth.call(null, vec__19027, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__19036 = cljs.core.next.call(null, seq__19022__$1);
          var G__19037 = null;
          var G__19038 = 0;
          var G__19039 = 0;
          seq__19022 = G__19036;
          chunk__19023 = G__19037;
          count__19024 = G__19038;
          i__19025 = G__19039;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__19043__delegate = function(x, p__19040) {
      var map__19042 = p__19040;
      var map__19042__$1 = cljs.core.seq_QMARK_.call(null, map__19042) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19042) : map__19042;
      var validator = cljs.core.get.call(null, map__19042__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__19042__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__19043 = function(x, var_args) {
      var p__19040 = null;
      if (arguments.length > 1) {
        p__19040 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__19043__delegate.call(this, x, p__19040);
    };
    G__19043.cljs$lang$maxFixedArity = 1;
    G__19043.cljs$lang$applyTo = function(arglist__19044) {
      var x = cljs.core.first(arglist__19044);
      var p__19040 = cljs.core.rest(arglist__19044);
      return G__19043__delegate(x, p__19040);
    };
    G__19043.cljs$core$IFn$_invoke$arity$variadic = G__19043__delegate;
    return G__19043;
  }();
  atom = function(x, var_args) {
    var p__19040 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__19045__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__19045 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__19045__delegate.call(this, a, f, x, y, more);
    };
    G__19045.cljs$lang$maxFixedArity = 4;
    G__19045.cljs$lang$applyTo = function(arglist__19046) {
      var a = cljs.core.first(arglist__19046);
      arglist__19046 = cljs.core.next(arglist__19046);
      var f = cljs.core.first(arglist__19046);
      arglist__19046 = cljs.core.next(arglist__19046);
      var x = cljs.core.first(arglist__19046);
      arglist__19046 = cljs.core.next(arglist__19046);
      var y = cljs.core.first(arglist__19046);
      var more = cljs.core.rest(arglist__19046);
      return G__19045__delegate(a, f, x, y, more);
    };
    G__19045.cljs$core$IFn$_invoke$arity$variadic = G__19045__delegate;
    return G__19045;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__19047) {
    var iref = cljs.core.first(arglist__19047);
    arglist__19047 = cljs.core.next(arglist__19047);
    var f = cljs.core.first(arglist__19047);
    var args = cljs.core.rest(arglist__19047);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(___$1) {
    return function(p__19048) {
      var map__19049 = p__19048;
      var map__19049__$1 = cljs.core.seq_QMARK_.call(null, map__19049) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19049) : map__19049;
      var curr_state = map__19049__$1;
      var done = cljs.core.get.call(null, map__19049__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
      if (cljs.core.truth_(done)) {
        return curr_state;
      } else {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
      }
    };
  }(___$1)));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj19051 = {};
  return obj19051;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__19053 = k;
    if (G__19053) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto__ = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return G__19053.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__19053.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__19053);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__19053);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__19067 = x;
      if (G__19067) {
        var bit__4227__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3577__auto__ = bit__4227__auto__;
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return G__19067.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__19067.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__19067);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__19067);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj19069 = {};
              return obj19069;
            }();
            var seq__19070_19080 = cljs.core.seq.call(null, x);
            var chunk__19071_19081 = null;
            var count__19072_19082 = 0;
            var i__19073_19083 = 0;
            while (true) {
              if (i__19073_19083 < count__19072_19082) {
                var vec__19074_19084 = cljs.core._nth.call(null, chunk__19071_19081, i__19073_19083);
                var k_19085 = cljs.core.nth.call(null, vec__19074_19084, 0, null);
                var v_19086 = cljs.core.nth.call(null, vec__19074_19084, 1, null);
                m[cljs.core.key__GT_js.call(null, k_19085)] = clj__GT_js.call(null, v_19086);
                var G__19087 = seq__19070_19080;
                var G__19088 = chunk__19071_19081;
                var G__19089 = count__19072_19082;
                var G__19090 = i__19073_19083 + 1;
                seq__19070_19080 = G__19087;
                chunk__19071_19081 = G__19088;
                count__19072_19082 = G__19089;
                i__19073_19083 = G__19090;
                continue;
              } else {
                var temp__4126__auto___19091 = cljs.core.seq.call(null, seq__19070_19080);
                if (temp__4126__auto___19091) {
                  var seq__19070_19092__$1 = temp__4126__auto___19091;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__19070_19092__$1)) {
                    var c__4333__auto___19093 = cljs.core.chunk_first.call(null, seq__19070_19092__$1);
                    var G__19094 = cljs.core.chunk_rest.call(null, seq__19070_19092__$1);
                    var G__19095 = c__4333__auto___19093;
                    var G__19096 = cljs.core.count.call(null, c__4333__auto___19093);
                    var G__19097 = 0;
                    seq__19070_19080 = G__19094;
                    chunk__19071_19081 = G__19095;
                    count__19072_19082 = G__19096;
                    i__19073_19083 = G__19097;
                    continue;
                  } else {
                    var vec__19075_19098 = cljs.core.first.call(null, seq__19070_19092__$1);
                    var k_19099 = cljs.core.nth.call(null, vec__19075_19098, 0, null);
                    var v_19100 = cljs.core.nth.call(null, vec__19075_19098, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_19099)] = clj__GT_js.call(null, v_19100);
                    var G__19101 = cljs.core.next.call(null, seq__19070_19092__$1);
                    var G__19102 = null;
                    var G__19103 = 0;
                    var G__19104 = 0;
                    seq__19070_19080 = G__19101;
                    chunk__19071_19081 = G__19102;
                    count__19072_19082 = G__19103;
                    i__19073_19083 = G__19104;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__19076_19105 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__19077_19106 = null;
              var count__19078_19107 = 0;
              var i__19079_19108 = 0;
              while (true) {
                if (i__19079_19108 < count__19078_19107) {
                  var x_19109__$1 = cljs.core._nth.call(null, chunk__19077_19106, i__19079_19108);
                  arr.push(x_19109__$1);
                  var G__19110 = seq__19076_19105;
                  var G__19111 = chunk__19077_19106;
                  var G__19112 = count__19078_19107;
                  var G__19113 = i__19079_19108 + 1;
                  seq__19076_19105 = G__19110;
                  chunk__19077_19106 = G__19111;
                  count__19078_19107 = G__19112;
                  i__19079_19108 = G__19113;
                  continue;
                } else {
                  var temp__4126__auto___19114 = cljs.core.seq.call(null, seq__19076_19105);
                  if (temp__4126__auto___19114) {
                    var seq__19076_19115__$1 = temp__4126__auto___19114;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__19076_19115__$1)) {
                      var c__4333__auto___19116 = cljs.core.chunk_first.call(null, seq__19076_19115__$1);
                      var G__19117 = cljs.core.chunk_rest.call(null, seq__19076_19115__$1);
                      var G__19118 = c__4333__auto___19116;
                      var G__19119 = cljs.core.count.call(null, c__4333__auto___19116);
                      var G__19120 = 0;
                      seq__19076_19105 = G__19117;
                      chunk__19077_19106 = G__19118;
                      count__19078_19107 = G__19119;
                      i__19079_19108 = G__19120;
                      continue;
                    } else {
                      var x_19121__$1 = cljs.core.first.call(null, seq__19076_19115__$1);
                      arr.push(x_19121__$1);
                      var G__19122 = cljs.core.next.call(null, seq__19076_19115__$1);
                      var G__19123 = null;
                      var G__19124 = 0;
                      var G__19125 = 0;
                      seq__19076_19105 = G__19122;
                      chunk__19077_19106 = G__19123;
                      count__19078_19107 = G__19124;
                      i__19079_19108 = G__19125;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj19127 = {};
  return obj19127;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3565__auto__ = x;
    if (and__3565__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4204__auto__ = x == null ? null : x;
    return function() {
      var or__3577__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__19148__delegate = function(x, opts) {
      if (function() {
        var G__19138 = x;
        if (G__19138) {
          var bit__4227__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3577__auto__ = bit__4227__auto__;
            if (cljs.core.truth_(or__3577__auto__)) {
              return or__3577__auto__;
            } else {
              return G__19138.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__19138.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__19138);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__19138);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__19139 = opts;
          var map__19139__$1 = cljs.core.seq_QMARK_.call(null, map__19139) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19139) : map__19139;
          var keywordize_keys = cljs.core.get.call(null, map__19139__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__19139, map__19139__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4302__auto__ = function(map__19139, map__19139__$1, keywordize_keys, keyfn) {
                          return function iter__19144(s__19145) {
                            return new cljs.core.LazySeq(null, function(map__19139, map__19139__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__19145__$1 = s__19145;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__19145__$1);
                                  if (temp__4126__auto__) {
                                    var s__19145__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__19145__$2)) {
                                      var c__4300__auto__ = cljs.core.chunk_first.call(null, s__19145__$2);
                                      var size__4301__auto__ = cljs.core.count.call(null, c__4300__auto__);
                                      var b__19147 = cljs.core.chunk_buffer.call(null, size__4301__auto__);
                                      if (function() {
                                        var i__19146 = 0;
                                        while (true) {
                                          if (i__19146 < size__4301__auto__) {
                                            var k = cljs.core._nth.call(null, c__4300__auto__, i__19146);
                                            cljs.core.chunk_append.call(null, b__19147, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__19149 = i__19146 + 1;
                                            i__19146 = G__19149;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19147), iter__19144.call(null, cljs.core.chunk_rest.call(null, s__19145__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__19147), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__19145__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__19144.call(null, cljs.core.rest.call(null, s__19145__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__19139, map__19139__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__19139, map__19139__$1, keywordize_keys, keyfn);
                        return iter__4302__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__19139, map__19139__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__19148 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__19148__delegate.call(this, x, opts);
    };
    G__19148.cljs$lang$maxFixedArity = 1;
    G__19148.cljs$lang$applyTo = function(arglist__19150) {
      var x = cljs.core.first(arglist__19150);
      var opts = cljs.core.rest(arglist__19150);
      return G__19148__delegate(x, opts);
    };
    G__19148.cljs$core$IFn$_invoke$arity$variadic = G__19148__delegate;
    return G__19148;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__19151__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__19151 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__19151__delegate.call(this, args);
      };
      G__19151.cljs$lang$maxFixedArity = 0;
      G__19151.cljs$lang$applyTo = function(arglist__19152) {
        var args = cljs.core.seq(arglist__19152);
        return G__19151__delegate(args);
      };
      G__19151.cljs$core$IFn$_invoke$arity$variadic = G__19151__delegate;
      return G__19151;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__19153 = ret;
        f = G__19153;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__19154__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__19154 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__19154__delegate.call(this, f, args);
    };
    G__19154.cljs$lang$maxFixedArity = 1;
    G__19154.cljs$lang$applyTo = function(arglist__19155) {
      var f = cljs.core.first(arglist__19155);
      var args = cljs.core.rest(arglist__19155);
      return G__19154__delegate(f, args);
    };
    G__19154.cljs$core$IFn$_invoke$arity$variadic = G__19154__delegate;
    return G__19154;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__19156) {
    var f = cljs.core.first(arglist__19156);
    var args = cljs.core.rest(arglist__19156);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3577__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3577__auto__) {
      return or__3577__auto__;
    } else {
      var or__3577__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3577__auto____$1) {
        return or__3577__auto____$1;
      } else {
        var and__3565__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3565__auto__) {
          var and__3565__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3565__auto____$1) {
            var and__3565__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3565__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__19157 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__19158 = i + 1;
                  ret = G__19157;
                  i = G__19158;
                  continue;
                }
                break;
              }
            } else {
              return and__3565__auto____$2;
            }
          } else {
            return and__3565__auto____$1;
          }
        } else {
          return and__3565__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3577__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3577__auto__)) {
      return or__3577__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__19159_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__19159_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__19159_SHARP_), cljs.core.second.call(null, p1__19159_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__19160_SHARP_, p2__19161_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__19160_SHARP_, p2__19161_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3577__auto__ = cljs.core.truth_(function() {
    var and__3565__auto__ = xprefs;
    if (cljs.core.truth_(and__3565__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3565__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    var or__3577__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__19162 = cljs.core.rest.call(null, ps);
          ps = G__19162;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3577__auto____$1)) {
      return or__3577__auto____$1;
    } else {
      var or__3577__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__19163 = cljs.core.rest.call(null, ps);
            ps = G__19163;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3577__auto____$2)) {
        return or__3577__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3577__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__19166) {
    var vec__19167 = p__19166;
    var k = cljs.core.nth.call(null, vec__19167, 0, null);
    var _ = cljs.core.nth.call(null, vec__19167, 1, null);
    var e = vec__19167;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3577__auto__ = be == null;
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj19169 = {};
  return obj19169;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._reset[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._reset["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._add_method[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._add_method["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._remove_method[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._remove_method["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._prefer_method[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._get_method[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._get_method["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._methods[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._methods["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3565__auto__ = mf;
    if (and__3565__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4204__auto__ = mf == null ? null : mf;
    return function() {
      var or__3577__auto__ = cljs.core._prefers[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core._prefers["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__19171 = null;
  var G__19171__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__19171__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__19171__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__19171__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__19171__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__19171__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__19171__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__19171__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__19171__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__19171__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__19171__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__19171__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__19171__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__19171__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__19171__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__19171__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__19171__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__19171__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__19171__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__19171__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__19171__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__19171 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__19171__2.call(this, self__, a);
      case 3:
        return G__19171__3.call(this, self__, a, b);
      case 4:
        return G__19171__4.call(this, self__, a, b, c);
      case 5:
        return G__19171__5.call(this, self__, a, b, c, d);
      case 6:
        return G__19171__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__19171__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__19171__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__19171__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__19171__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__19171__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__19171__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__19171__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__19171__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__19171__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__19171__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__19171__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__19171__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__19171__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__19171__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__19171__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__19171__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__19171;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args19170) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args19170)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4147__auto__, writer__4148__auto__, opts__4149__auto__) {
  return cljs.core._write.call(null, writer__4148__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("util.map");
goog.require("cljs.core");
util.map.deep_merge_with = function() {
  var deep_merge_with__delegate = function(f, maps) {
    return cljs.core.apply.call(null, function() {
      var m__delegate = function(maps__$1) {
        if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, maps__$1)) {
          return cljs.core.apply.call(null, cljs.core.merge_with, m, maps__$1);
        } else {
          return cljs.core.apply.call(null, f, maps__$1);
        }
      };
      var m = function(var_args) {
        var maps__$1 = null;
        if (arguments.length > 0) {
          maps__$1 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return m__delegate.call(this, maps__$1);
      };
      m.cljs$lang$maxFixedArity = 0;
      m.cljs$lang$applyTo = function(arglist__18127) {
        var maps__$1 = cljs.core.seq(arglist__18127);
        return m__delegate(maps__$1);
      };
      m.cljs$core$IFn$_invoke$arity$variadic = m__delegate;
      return m;
    }(), maps);
  };
  var deep_merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return deep_merge_with__delegate.call(this, f, maps);
  };
  deep_merge_with.cljs$lang$maxFixedArity = 1;
  deep_merge_with.cljs$lang$applyTo = function(arglist__18128) {
    var f = cljs.core.first(arglist__18128);
    var maps = cljs.core.rest(arglist__18128);
    return deep_merge_with__delegate(f, maps);
  };
  deep_merge_with.cljs$core$IFn$_invoke$arity$variadic = deep_merge_with__delegate;
  return deep_merge_with;
}();
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj21999 = {};
  return obj21999;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3565__auto__ = port;
    if (and__3565__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4204__auto__ = port == null ? null : port;
    return function() {
      var or__3577__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj22001 = {};
  return obj22001;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3565__auto__ = port;
    if (and__3565__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4204__auto__ = port == null ? null : port;
    return function() {
      var or__3577__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj22003 = {};
  return obj22003;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3565__auto__ = chan;
    if (and__3565__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4204__auto__ = chan == null ? null : chan;
    return function() {
      var or__3577__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3565__auto__ = chan;
    if (and__3565__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4204__auto__ = chan == null ? null : chan;
    return function() {
      var or__3577__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj22005 = {};
  return obj22005;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3565__auto__ = h;
    if (and__3565__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4204__auto__ = h == null ? null : h;
    return function() {
      var or__3577__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3565__auto__ = h;
    if (and__3565__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4204__auto__ = h == null ? null : h;
    return function() {
      var or__3577__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj22007 = {};
  return obj22007;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3565__auto__ = b;
    if (and__3565__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4204__auto__ = b == null ? null : b;
    return function() {
      var or__3577__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3565__auto__ = b;
    if (and__3565__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4204__auto__ = b == null ? null : b;
    return function() {
      var or__3577__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3565__auto__ = b;
    if (and__3565__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4204__auto__ = b == null ? null : b;
    return function() {
      var or__3577__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj22009 = {};
  return obj22009;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t21946 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t21946 = function(f, fn_handler, meta21947) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta21947 = meta21947;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t21946.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t21946.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t21946";
    cljs.core.async.impl.ioc_helpers.t21946.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
      return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async.impl.ioc-helpers/t21946");
    };
    cljs.core.async.impl.ioc_helpers.t21946.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t21946.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t21946.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t21946.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21948) {
      var self__ = this;
      var _21948__$1 = this;
      return self__.meta21947;
    };
    cljs.core.async.impl.ioc_helpers.t21946.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21948, meta21947__$1) {
      var self__ = this;
      var _21948__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t21946(self__.f, self__.fn_handler, meta21947__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t21946 = function __GT_t21946(f__$1, fn_handler__$1, meta21947) {
      return new cljs.core.async.impl.ioc_helpers.t21946(f__$1, fn_handler__$1, meta21947);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t21946(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e21950) {
    if (e21950 instanceof Object) {
      var ex = e21950;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e21950;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_21953_21955 = state;
    statearr_21953_21955[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_21953_21955[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_21954_21956 = state;
    statearr_21954_21956[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_21954_21956[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_21959_21961 = state;
    statearr_21959_21961[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_21959_21961[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_21960_21962 = state;
    statearr_21960_21962[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_21960_21962[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__21963) {
    var map__21968 = p__21963;
    var map__21968__$1 = cljs.core.seq_QMARK_.call(null, map__21968) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21968) : map__21968;
    var opts = map__21968__$1;
    var statearr_21969_21972 = state;
    statearr_21969_21972[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__21968, map__21968__$1, opts) {
      return function(val) {
        var statearr_21970_21973 = state;
        statearr_21970_21973[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__21968, map__21968__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_21971_21974 = state;
      statearr_21971_21974[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__21963 = null;
    if (arguments.length > 3) {
      p__21963 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__21963);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__21975) {
    var state = cljs.core.first(arglist__21975);
    arglist__21975 = cljs.core.next(arglist__21975);
    var cont_block = cljs.core.first(arglist__21975);
    arglist__21975 = cljs.core.next(arglist__21975);
    var ports = cljs.core.first(arglist__21975);
    var p__21963 = cljs.core.rest(arglist__21975);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__21963);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4163__auto__, k__4164__auto__) {
  var self__ = this;
  var this__4163__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4163__auto____$1, k__4164__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4165__auto__, k21977, else__4166__auto__) {
  var self__ = this;
  var this__4165__auto____$1 = this;
  var G__21979 = k21977 instanceof cljs.core.Keyword ? k21977.fqn : null;
  switch(G__21979) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k21977, else__4166__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4177__auto__, writer__4178__auto__, opts__4179__auto__) {
  var self__ = this;
  var this__4177__auto____$1 = this;
  var pr_pair__4180__auto__ = function(this__4177__auto____$1) {
    return function(keyval__4181__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4178__auto__, cljs.core.pr_writer, "", " ", "", opts__4179__auto__, keyval__4181__auto__);
    };
  }(this__4177__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4178__auto__, pr_pair__4180__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4179__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4161__auto__) {
  var self__ = this;
  var this__4161__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4157__auto__) {
  var self__ = this;
  var this__4157__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4167__auto__) {
  var self__ = this;
  var this__4167__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4158__auto__) {
  var self__ = this;
  var this__4158__auto____$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, this__4158__auto____$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4159__auto__, other__4160__auto__) {
  var self__ = this;
  var this__4159__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3565__auto__ = other__4160__auto__;
    if (cljs.core.truth_(and__3565__auto__)) {
      return this__4159__auto____$1.constructor === other__4160__auto__.constructor && cljs.core.equiv_map.call(null, this__4159__auto____$1, other__4160__auto__);
    } else {
      return and__3565__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4172__auto__, k__4173__auto__) {
  var self__ = this;
  var this__4172__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  null], null), null), k__4173__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4172__auto____$1), self__.__meta), k__4173__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4173__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4170__auto__, k__4171__auto__, G__21976) {
  var self__ = this;
  var this__4170__auto____$1 = this;
  var pred__21980 = cljs.core.keyword_identical_QMARK_;
  var expr__21981 = k__4171__auto__;
  if (cljs.core.truth_(pred__21980.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), expr__21981))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__21976, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__21980.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), expr__21981))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__21976, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__21980.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), expr__21981))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__21976, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__21980.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), expr__21981))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__21976, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__21980.call(null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), expr__21981))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__21976, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4171__auto__, G__21976), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4175__auto__) {
  var self__ = this;
  var this__4175__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4162__auto__, G__21976) {
  var self__ = this;
  var this__4162__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__21976, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4168__auto__, entry__4169__auto__) {
  var self__ = this;
  var this__4168__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4169__auto__)) {
    return cljs.core._assoc.call(null, this__4168__auto____$1, cljs.core._nth.call(null, entry__4169__auto__, 0), cljs.core._nth.call(null, entry__4169__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4168__auto____$1, entry__4169__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4197__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4197__auto__, writer__4198__auto__) {
  return cljs.core._write.call(null, writer__4198__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__21978) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(G__21978), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(G__21978), (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(G__21978), (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(G__21978), 
  (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(G__21978), null, cljs.core.dissoc.call(null, G__21978, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), new cljs.core.Keyword(null, "prev", "prev", 1017353637)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_21985 = state;
  statearr_21985[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_21985;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3565__auto__ = exception;
      if (cljs.core.truth_(and__3565__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3565__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3565__auto__ = exception;
        if (cljs.core.truth_(and__3565__auto__)) {
          var and__3565__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3565__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3565__auto____$1;
          }
        } else {
          return and__3565__auto__;
        }
      }())) {
        var statearr_21991 = state;
        statearr_21991[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_21991[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_21991[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_21991[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null);
        return statearr_21991;
      } else {
        if (cljs.core.truth_(function() {
          var and__3565__auto__ = exception;
          if (cljs.core.truth_(and__3565__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3565__auto__;
          }
        }())) {
          var statearr_21992_21996 = state;
          statearr_21992_21996[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__21997 = state;
          state = G__21997;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3565__auto__ = exception;
            if (cljs.core.truth_(and__3565__auto__)) {
              var and__3565__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3565__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3565__auto____$1;
              }
            } else {
              return and__3565__auto__;
            }
          }())) {
            var statearr_21993 = state;
            statearr_21993[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_21993[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
            return statearr_21993;
          } else {
            if (cljs.core.truth_(function() {
              var and__3565__auto__ = cljs.core.not.call(null, exception);
              if (and__3565__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3565__auto__;
              }
            }())) {
              var statearr_21994 = state;
              statearr_21994[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_21994[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
              return statearr_21994;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_21995 = state;
                statearr_21995[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_21995[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_21995;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error("Assert failed: No matching clause\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, false)));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (Math.pow(10, x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__22010 = cnt + 1;
      cnt = G__22010;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4433__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4433__auto__) {
      var v_22011 = this$.pop();
      if (keep_QMARK_.call(null, v_22011)) {
        this$.unshift(v_22011);
      } else {
      }
      var G__22012 = x + 1;
      x = G__22012;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_22013 = 0;
  while (true) {
    var m_22014 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_22014 == null) {
    } else {
      m_22014.call(null);
      if (count_22013 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__22015 = count_22013 + 1;
        count_22013 = G__22015;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3565__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3565__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3565__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t22019 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t22019 = function(val, box, meta22020) {
      this.val = val;
      this.box = box;
      this.meta22020 = meta22020;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t22019.cljs$lang$type = true;
    cljs.core.async.impl.channels.t22019.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t22019";
    cljs.core.async.impl.channels.t22019.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
      return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async.impl.channels/t22019");
    };
    cljs.core.async.impl.channels.t22019.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t22019.prototype.cljs$core$IMeta$_meta$arity$1 = function(_22021) {
      var self__ = this;
      var _22021__$1 = this;
      return self__.meta22020;
    };
    cljs.core.async.impl.channels.t22019.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_22021, meta22020__$1) {
      var self__ = this;
      var _22021__$1 = this;
      return new cljs.core.async.impl.channels.t22019(self__.val, self__.box, meta22020__$1);
    };
    cljs.core.async.impl.channels.__GT_t22019 = function __GT_t22019(val__$1, box__$1, meta22020) {
      return new cljs.core.async.impl.channels.t22019(val__$1, box__$1, meta22020);
    };
  }
  return new cljs.core.async.impl.channels.t22019(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4147__auto__, writer__4148__auto__, opts__4149__auto__) {
  return cljs.core._write.call(null, writer__4148__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_22022 = self__.takes.pop();
      if (taker_22022 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_22022)) {
          var take_cb_22023 = cljs.core.async.impl.protocols.commit.call(null, taker_22022);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_22023, taker_22022, this$__$1) {
            return function() {
              return take_cb_22023.call(null, null);
            };
          }(take_cb_22023, taker_22022, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        var putter_22024 = self__.puts.pop();
        if (!(putter_22024 == null)) {
          var put_handler_22025 = putter_22024.handler;
          var val_22026 = putter_22024.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_22025)) {
            var put_cb_22027 = cljs.core.async.impl.protocols.commit.call(null, put_handler_22025);
            var __22028__$1 = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb_22027, __22028__$1, put_handler_22025, val_22026, putter_22024, _, retval, this$__$1) {
              return function() {
                return put_cb_22027.call(null, true);
              };
            }(put_cb_22027, __22028__$1, put_handler_22025, val_22026, putter_22024, _, retval, this$__$1));
            cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val_22026);
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      return retval;
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb, _, put_handler, val, putter, this$__$1) {
              return function() {
                return put_cb.call(null, true);
              };
            }(put_cb, _, put_handler, val, putter, this$__$1));
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false);
};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = goog.string.startsWith(ua, "Opera");
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && (goog.string.contains(ua, "MSIE") || goog.string.contains(ua, "Trident"));
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && goog.string.contains(ua, "WebKit");
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && goog.string.contains(ua, "Mobile");
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && (!goog.userAgent.detectedIe_ && navigator.product == "Gecko"));
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || (goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || (goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", 
INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", 
READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), 
TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", 
MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", 
COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  try {
    return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
  } catch (e) {
    return false;
  }
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope))) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type, proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(opt_obj, opt_type) {
  if (!opt_obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(opt_obj)) {
    return opt_obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((opt_obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  for (var type in listenerMap.listeners) {
    if (!opt_type || type == opt_type) {
      var listeners = goog.array.clone(listenerMap.listeners[type]);
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type];
    if (listenerArray) {
      listenerArray = goog.array.clone(listenerArray);
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && (listener.capture == capture && !listener.removed)) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = goog.array.clone(listenerArray);
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && (!listener.removed && listener.capture == capture)) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || (!err.stack || (!err.message || !err.name))))) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && (!contentTypeKey && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && (goog.userAgent.isVersionOrHigher(9) && (goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_])));
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__22888 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__22888;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__22892 = cljs.core._EQ_;
    var expr__22893 = limit;
    if (cljs.core.truth_(pred__22892.call(null, 1, expr__22893))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__22892.call(null, 2, expr__22893))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__22895 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__22896 = limit__$1 - 1;
            var G__22897 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__22895;
            limit__$1 = G__22896;
            parts = G__22897;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__22898 = index - 1;
        index = G__22898;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___22899 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___22899)) {
        var replacement_22900 = temp__4124__auto___22899;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_22900));
      } else {
        buffer.append(ch);
      }
      var G__22901 = index + 1;
      index = G__22901;
      continue;
    }
    break;
  }
};
goog.provide("pathetic.core");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
goog.require("goog.Uri");
goog.require("goog.Uri");
goog.require("clojure.string");
goog.require("clojure.string");
pathetic.core.separator = "/";
pathetic.core.separator_pattern = cljs.core.re_pattern.call(null, pathetic.core.separator);
pathetic.core.common_prefix = function common_prefix(coll1, coll2) {
  return cljs.core.map.call(null, cljs.core.first, cljs.core.take_while.call(null, function(p1__23013_SHARP_) {
    return cljs.core._EQ_.call(null, cljs.core.first.call(null, p1__23013_SHARP_), cljs.core.second.call(null, p1__23013_SHARP_));
  }, cljs.core.map.call(null, function(p1__23014_SHARP_, p2__23015_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__23014_SHARP_, p2__23015_SHARP_], null);
  }, coll1, coll2)));
};
pathetic.core.unique_suffix = function unique_suffix(uninteresting_coll, interesting_coll) {
  var common_parts = pathetic.core.common_prefix.call(null, uninteresting_coll, interesting_coll);
  return cljs.core.drop.call(null, cljs.core.count.call(null, common_parts), interesting_coll);
};
pathetic.core.split = function split(path) {
  if (cljs.core._EQ_.call(null, path, pathetic.core.separator)) {
    return cljs.core.PersistentVector.EMPTY;
  } else {
    return clojure.string.split.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(path), pathetic.core.separator_pattern);
  }
};
pathetic.core.parse_path = function parse_path(path) {
  if (cljs.core.empty_QMARK_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(path))) {
    return null;
  } else {
    var path_pieces = pathetic.core.split.call(null, path);
    if (cljs.core._EQ_.call(null, 0, cljs.core.count.call(null, path_pieces))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "root", "root", 1017410644)], null);
    } else {
      var G__23017 = cljs.core.first.call(null, path_pieces);
      switch(G__23017) {
        case "":
          return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "root", "root", 1017410644), cljs.core.rest.call(null, path_pieces));
          break;
        case ".":
          return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "cwd", "cwd", 1014003170), cljs.core.rest.call(null, path_pieces));
          break;
        default:
          return cljs.core.apply.call(null, cljs.core.vector, new cljs.core.Keyword(null, "cwd", "cwd", 1014003170), path_pieces);
      }
    }
  }
};
pathetic.core.render_path = function render_path(path_pieces) {
  var G__23020 = cljs.core.first.call(null, path_pieces) instanceof cljs.core.Keyword ? cljs.core.first.call(null, path_pieces).fqn : null;
  switch(G__23020) {
    case "cwd":
      if (cljs.core.next.call(null, path_pieces)) {
        return clojure.string.join.call(null, pathetic.core.separator, cljs.core.rest.call(null, path_pieces));
      } else {
        return ".";
      }
      break;
    case "root":
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pathetic.core.separator) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.call(null, pathetic.core.separator, cljs.core.rest.call(null, path_pieces)));
      break;
    default:
      return clojure.string.join.call(null, pathetic.core.separator, path_pieces);
  }
};
pathetic.core.starts_with = function starts_with(s, prefix) {
  return goog.string.startsWith(s, prefix);
};
pathetic.core.absolute_path_QMARK_ = function absolute_path_QMARK_(path) {
  return pathetic.core.starts_with.call(null, path, pathetic.core.separator);
};
pathetic.core.up_dir = function up_dir(path_pieces) {
  var G__23023 = cljs.core.last.call(null, path_pieces);
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "root", "root", 1017410644), G__23023)) {
    return path_pieces;
  } else {
    if (cljs.core._EQ_.call(null, "..", G__23023)) {
      return cljs.core.conj.call(null, path_pieces, "..");
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "cwd", "cwd", 1014003170), G__23023)) {
        return cljs.core.conj.call(null, path_pieces, "..");
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.pop.call(null, path_pieces);
        } else {
          return null;
        }
      }
    }
  }
};
pathetic.core.normalize_STAR_ = function normalize_STAR_(path_pieces) {
  var result = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, path_pieces)], null);
  var remaining_path = cljs.core.rest.call(null, path_pieces);
  while (true) {
    var vec__23028 = remaining_path;
    var curr = cljs.core.nth.call(null, vec__23028, 0, null);
    var remainder = cljs.core.nthnext.call(null, vec__23028, 1);
    var pred__23029 = cljs.core._EQ_;
    var expr__23030 = curr;
    if (cljs.core.truth_(pred__23029.call(null, null, expr__23030))) {
      return result;
    } else {
      if (cljs.core.truth_(pred__23029.call(null, "", expr__23030))) {
        var G__23032 = result;
        var G__23033 = remainder;
        result = G__23032;
        remaining_path = G__23033;
        continue;
      } else {
        if (cljs.core.truth_(pred__23029.call(null, ".", expr__23030))) {
          var G__23034 = result;
          var G__23035 = remainder;
          result = G__23034;
          remaining_path = G__23035;
          continue;
        } else {
          if (cljs.core.truth_(pred__23029.call(null, "..", expr__23030))) {
            var G__23036 = pathetic.core.up_dir.call(null, result);
            var G__23037 = remainder;
            result = G__23036;
            remaining_path = G__23037;
            continue;
          } else {
            var G__23038 = cljs.core.conj.call(null, result, curr);
            var G__23039 = remainder;
            result = G__23038;
            remaining_path = G__23039;
            continue;
          }
        }
      }
    }
    break;
  }
};
pathetic.core.normalize = function normalize(path) {
  return pathetic.core.render_path.call(null, pathetic.core.normalize_STAR_.call(null, pathetic.core.parse_path.call(null, path)));
};
pathetic.core.relativize_STAR_ = function relativize_STAR_(base_path, dest_path) {
  var common_path = pathetic.core.common_prefix.call(null, base_path, dest_path);
  var base_suffix = cljs.core.drop.call(null, cljs.core.count.call(null, common_path), base_path);
  var dest_suffix = cljs.core.drop.call(null, cljs.core.count.call(null, common_path), dest_path);
  if (common_path == null) {
    throw cljs.core.ex_info.call(null, "Paths contain no common components.", cljs.core.PersistentArrayMap.EMPTY);
  } else {
  }
  return cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cwd", "cwd", 1014003170)], null), cljs.core.repeat.call(null, cljs.core.count.call(null, base_suffix), ".."), function() {
    var suffix = cljs.core.PersistentVector.EMPTY;
    var remainder = dest_suffix;
    while (true) {
      var curr = cljs.core.first.call(null, remainder);
      var pred__23043 = cljs.core._EQ_;
      var expr__23044 = curr;
      if (cljs.core.truth_(pred__23043.call(null, null, expr__23044))) {
        return suffix;
      } else {
        if (cljs.core.truth_(pred__23043.call(null, "", expr__23044))) {
          var G__23046 = suffix;
          var G__23047 = cljs.core.rest.call(null, remainder);
          suffix = G__23046;
          remainder = G__23047;
          continue;
        } else {
          if (cljs.core.truth_(pred__23043.call(null, ".", expr__23044))) {
            var G__23048 = suffix;
            var G__23049 = cljs.core.rest.call(null, remainder);
            suffix = G__23048;
            remainder = G__23049;
            continue;
          } else {
            if (cljs.core.truth_(pred__23043.call(null, "..", expr__23044))) {
              var G__23050 = cljs.core.conj.call(null, suffix, "..");
              var G__23051 = cljs.core.rest.call(null, remainder);
              suffix = G__23050;
              remainder = G__23051;
              continue;
            } else {
              var G__23052 = cljs.core.conj.call(null, suffix, curr);
              var G__23053 = cljs.core.rest.call(null, remainder);
              suffix = G__23052;
              remainder = G__23053;
              continue;
            }
          }
        }
      }
      break;
    }
  }());
};
pathetic.core.relativize = function relativize(base_path, dest_path) {
  var base_path__$1 = pathetic.core.normalize_STAR_.call(null, pathetic.core.parse_path.call(null, base_path));
  var dest_path__$1 = pathetic.core.normalize_STAR_.call(null, pathetic.core.parse_path.call(null, dest_path));
  return pathetic.core.render_path.call(null, pathetic.core.relativize_STAR_.call(null, base_path__$1, dest_path__$1));
};
pathetic.core.resolve_STAR_ = function resolve_STAR_(base_path, other_path) {
  if (other_path == null) {
    return base_path;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "root", "root", 1017410644), cljs.core.first.call(null, other_path))) {
      return other_path;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var base_components = pathetic.core.normalize_STAR_.call(null, base_path);
        var other_components = cljs.core.rest.call(null, pathetic.core.normalize_STAR_.call(null, other_path));
        return cljs.core.concat.call(null, base_components, other_components);
      } else {
        return null;
      }
    }
  }
};
pathetic.core.resolve = function resolve(base_path, other_path) {
  return pathetic.core.render_path.call(null, pathetic.core.resolve_STAR_.call(null, pathetic.core.parse_path.call(null, base_path), pathetic.core.parse_path.call(null, other_path)));
};
pathetic.core.ends_with = function ends_with(s, suffix) {
  return goog.string.endsWith(s, suffix);
};
pathetic.core.ensure_trailing_separator = function ensure_trailing_separator(path) {
  if (cljs.core.truth_(pathetic.core.ends_with.call(null, path, pathetic.core.separator))) {
    return path;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(path) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pathetic.core.separator);
  }
};
pathetic.core.as_url = function as_url(url_or_string) {
  if (url_or_string instanceof goog.Uri) {
    return url_or_string;
  } else {
    return new goog.Uri(url_or_string);
  }
};
pathetic.core.split_url_on_path = function split_url_on_path(url_or_string) {
  var url = pathetic.core.as_url.call(null, url_or_string);
  var url_string = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(url);
  var path = url.getPath();
  var path_idx = url_string.lastIndexOf(path);
  var pre_path = url_string.substring(0, path_idx);
  var post_path = url_string.substring(path_idx + cljs.core.count.call(null, path));
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [pre_path, path, post_path], null);
};
pathetic.core.url_normalize = function url_normalize(url_or_string) {
  var vec__23055 = pathetic.core.split_url_on_path.call(null, url_or_string);
  var pre_path = cljs.core.nth.call(null, vec__23055, 0, null);
  var path = cljs.core.nth.call(null, vec__23055, 1, null);
  var post_path = cljs.core.nth.call(null, vec__23055, 2, null);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pre_path) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pathetic.core.normalize.call(null, path)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(post_path);
};
pathetic.core.url_ensure_trailing_separator = function url_ensure_trailing_separator(url_or_string) {
  var vec__23057 = pathetic.core.split_url_on_path.call(null, url_or_string);
  var pre_path = cljs.core.nth.call(null, vec__23057, 0, null);
  var path = cljs.core.nth.call(null, vec__23057, 1, null);
  var post_path = cljs.core.nth.call(null, vec__23057, 2, null);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pre_path) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(pathetic.core.ensure_trailing_separator.call(null, path)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(post_path);
};
goog.provide("jayq.util");
goog.require("cljs.core");
jayq.util.wait = function wait(ms, func) {
  return setTimeout(func, ms);
};
jayq.util.log = function() {
  var log__delegate = function(v, text) {
    var vs = typeof v === "string" ? cljs.core.apply.call(null, cljs.core.str, v, text) : v;
    console.log(vs);
    return v;
  };
  var log = function(v, var_args) {
    var text = null;
    if (arguments.length > 1) {
      text = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return log__delegate.call(this, v, text);
  };
  log.cljs$lang$maxFixedArity = 1;
  log.cljs$lang$applyTo = function(arglist__19172) {
    var v = cljs.core.first(arglist__19172);
    var text = cljs.core.rest(arglist__19172);
    return log__delegate(v, text);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
goog.provide("translate");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
goog.require("pathetic.core");
goog.require("pathetic.core");
translate.get_locale = function get_locale() {
  return cljs.core.keyword.call(null, cljs.core.second.call(null, pathetic.core.parse_path.call(null, window["location"]["pathname"])));
};
translate.translate = function() {
  var translate__$1__delegate = function(m, keys) {
    var locale = translate.get_locale.call(null);
    return cljs.core.get_in.call(null, m, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [locale], null), keys));
  };
  var translate__$1 = function(m, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return translate__$1__delegate.call(this, m, keys);
  };
  translate__$1.cljs$lang$maxFixedArity = 1;
  translate__$1.cljs$lang$applyTo = function(arglist__18126) {
    var m = cljs.core.first(arglist__18126);
    var keys = cljs.core.rest(arglist__18126);
    return translate__$1__delegate(m, keys);
  };
  translate__$1.cljs$core$IFn$_invoke$arity$variadic = translate__$1__delegate;
  return translate__$1;
}();
goog.provide("monet.core");
goog.require("cljs.core");
monet.core.animation_frame = function() {
  var or__3577__auto__ = window.requestAnimationFrame;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    var or__3577__auto____$1 = window.webkitRequestAnimationFrame;
    if (cljs.core.truth_(or__3577__auto____$1)) {
      return or__3577__auto____$1;
    } else {
      var or__3577__auto____$2 = window.mozRequestAnimationFrame;
      if (cljs.core.truth_(or__3577__auto____$2)) {
        return or__3577__auto____$2;
      } else {
        var or__3577__auto____$3 = window.oRequestAnimationFrame;
        if (cljs.core.truth_(or__3577__auto____$3)) {
          return or__3577__auto____$3;
        } else {
          var or__3577__auto____$4 = window.msRequestAnimationFrame;
          if (cljs.core.truth_(or__3577__auto____$4)) {
            return or__3577__auto____$4;
          } else {
            return function(or__3577__auto____$4, or__3577__auto____$3, or__3577__auto____$2, or__3577__auto____$1, or__3577__auto__) {
              return function(callback) {
                return setTimeout(callback, 17);
              };
            }(or__3577__auto____$4, or__3577__auto____$3, or__3577__auto____$2, or__3577__auto____$1, or__3577__auto__);
          }
        }
      }
    }
  }
}();
goog.provide("monet.canvas");
goog.require("cljs.core");
goog.require("monet.core");
goog.require("monet.core");
monet.canvas.get_context = function get_context(canvas, type) {
  return canvas.getContext(cljs.core.name.call(null, type));
};
monet.canvas.begin_path = function begin_path(ctx) {
  ctx.beginPath();
  return ctx;
};
monet.canvas.close_path = function close_path(ctx) {
  ctx.closePath();
  return ctx;
};
monet.canvas.fill = function fill(ctx) {
  ctx.fill();
  return ctx;
};
monet.canvas.stroke = function stroke(ctx) {
  ctx.stroke();
  return ctx;
};
monet.canvas.clear_rect = function clear_rect(ctx, p__19173) {
  var map__19175 = p__19173;
  var map__19175__$1 = cljs.core.seq_QMARK_.call(null, map__19175) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19175) : map__19175;
  var h = cljs.core.get.call(null, map__19175__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__19175__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__19175__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__19175__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.clearRect(x, y, w, h);
  return ctx;
};
monet.canvas.rect = function rect(ctx, p__19176) {
  var map__19178 = p__19176;
  var map__19178__$1 = cljs.core.seq_QMARK_.call(null, map__19178) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19178) : map__19178;
  var h = cljs.core.get.call(null, map__19178__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__19178__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__19178__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__19178__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  monet.canvas.begin_path.call(null, ctx);
  ctx.rect(x, y, w, h);
  monet.canvas.close_path.call(null, ctx);
  monet.canvas.fill.call(null, ctx);
  return ctx;
};
monet.canvas.stroke_rect = function stroke_rect(ctx, p__19179) {
  var map__19181 = p__19179;
  var map__19181__$1 = cljs.core.seq_QMARK_.call(null, map__19181) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19181) : map__19181;
  var h = cljs.core.get.call(null, map__19181__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__19181__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__19181__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__19181__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.strokeRect(x, y, w, h);
  return ctx;
};
monet.canvas.fill_rect = function fill_rect(ctx, p__19182) {
  var map__19184 = p__19182;
  var map__19184__$1 = cljs.core.seq_QMARK_.call(null, map__19184) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19184) : map__19184;
  var h = cljs.core.get.call(null, map__19184__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__19184__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__19184__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__19184__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.fillRect(x, y, w, h);
  return ctx;
};
monet.canvas.circle = function circle(ctx, p__19185) {
  var map__19187 = p__19185;
  var map__19187__$1 = cljs.core.seq_QMARK_.call(null, map__19187) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19187) : map__19187;
  var r = cljs.core.get.call(null, map__19187__$1, new cljs.core.Keyword(null, "r", "r", 1013904356));
  var y = cljs.core.get.call(null, map__19187__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__19187__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  monet.canvas.begin_path.call(null, ctx);
  ctx.arc(x, y, r, 0, Math.PI * 2, true);
  monet.canvas.close_path.call(null, ctx);
  monet.canvas.fill.call(null, ctx);
  return ctx;
};
monet.canvas.text = function text(ctx, p__19188) {
  var map__19190 = p__19188;
  var map__19190__$1 = cljs.core.seq_QMARK_.call(null, map__19190) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19190) : map__19190;
  var y = cljs.core.get.call(null, map__19190__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__19190__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  var text__$1 = cljs.core.get.call(null, map__19190__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
  ctx.fillText(text__$1, x, y);
  return ctx;
};
monet.canvas.font_style = function font_style(ctx, font) {
  ctx.font = font;
  return ctx;
};
monet.canvas.fill_style = function fill_style(ctx, color__$1) {
  ctx.fillStyle = cljs.core.name.call(null, color__$1);
  return ctx;
};
monet.canvas.stroke_style = function stroke_style(ctx, color__$1) {
  ctx.strokeStyle = cljs.core.name.call(null, color__$1);
  return ctx;
};
monet.canvas.stroke_width = function stroke_width(ctx, w) {
  ctx.lineWidth = w;
  return ctx;
};
monet.canvas.stroke_cap = function stroke_cap(ctx, cap) {
  ctx.lineCap = cljs.core.name.call(null, cap);
  return ctx;
};
monet.canvas.move_to = function move_to(ctx, x, y) {
  ctx.moveTo(x, y);
  return ctx;
};
monet.canvas.line_to = function line_to(ctx, x, y) {
  ctx.lineTo(x, y);
  return ctx;
};
monet.canvas.alpha = function alpha(ctx, a) {
  ctx.globalAlpha = a;
  return ctx;
};
monet.canvas.composition_operation = function composition_operation(ctx, operation) {
  ctx.globalCompositionOperation = cljs.core.name.call(null, operation);
  return ctx;
};
monet.canvas.text_align = function text_align(ctx, alignment) {
  ctx.textAlign = cljs.core.name.call(null, alignment);
  return ctx;
};
monet.canvas.text_baseline = function text_baseline(ctx, alignment) {
  ctx.textBaseline = cljs.core.name.call(null, alignment);
  return ctx;
};
monet.canvas.get_pixel = function get_pixel(ctx, x, y) {
  var imgd = ctx.getImageData(x, y, 1, 1).data;
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "red", "red", 1014017027), imgd[0], new cljs.core.Keyword(null, "green", "green", 1112523381), imgd[1], new cljs.core.Keyword(null, "blue", "blue", 1016931276), imgd[2], new cljs.core.Keyword(null, "alpha", "alpha", 1106814160), imgd[3]], null);
};
monet.canvas.save = function save(ctx) {
  ctx.save();
  return ctx;
};
monet.canvas.restore = function restore(ctx) {
  ctx.restore();
  return ctx;
};
monet.canvas.rotate = function rotate(ctx, angle) {
  ctx.rotate(angle);
  return ctx;
};
monet.canvas.scale = function scale(ctx, x, y) {
  ctx.scale(x, y);
  return ctx;
};
monet.canvas.translate = function translate__$1(ctx, x, y) {
  ctx.translate(x, y);
  return ctx;
};
monet.canvas.transform = function() {
  var transform = null;
  var transform__2 = function(ctx, p__19191) {
    var map__19193 = p__19191;
    var map__19193__$1 = cljs.core.seq_QMARK_.call(null, map__19193) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19193) : map__19193;
    var dy = cljs.core.get.call(null, map__19193__$1, new cljs.core.Keyword(null, "dy", "dy", 1013907463));
    var dx = cljs.core.get.call(null, map__19193__$1, new cljs.core.Keyword(null, "dx", "dx", 1013907462));
    var m22 = cljs.core.get.call(null, map__19193__$1, new cljs.core.Keyword(null, "m22", "m22", 1014010591));
    var m21 = cljs.core.get.call(null, map__19193__$1, new cljs.core.Keyword(null, "m21", "m21", 1014010590));
    var m12 = cljs.core.get.call(null, map__19193__$1, new cljs.core.Keyword(null, "m12", "m12", 1014010560));
    var m11 = cljs.core.get.call(null, map__19193__$1, new cljs.core.Keyword(null, "m11", "m11", 1014010559));
    ctx.transform(m11, m12, m21, m22, dx, dy);
    return ctx;
  };
  var transform__7 = function(ctx, m11, m12, m21, m22, dx, dy) {
    ctx.transform(m11, m12, m21, m22, dx, dy);
    return ctx;
  };
  transform = function(ctx, m11, m12, m21, m22, dx, dy) {
    switch(arguments.length) {
      case 2:
        return transform__2.call(this, ctx, m11);
      case 7:
        return transform__7.call(this, ctx, m11, m12, m21, m22, dx, dy);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transform.cljs$core$IFn$_invoke$arity$2 = transform__2;
  transform.cljs$core$IFn$_invoke$arity$7 = transform__7;
  return transform;
}();
monet.canvas.draw_image = function() {
  var draw_image = null;
  var draw_image__3 = function(ctx, img, p__19194) {
    var map__19199 = p__19194;
    var map__19199__$1 = cljs.core.seq_QMARK_.call(null, map__19199) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19199) : map__19199;
    var params = map__19199__$1;
    var sh = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "sh", "sh", 1013907911));
    var sw = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "sw", "sw", 1013907926));
    var x = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
    var y = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
    var dh = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "dh", "dh", 1013907446));
    var dx = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "dx", "dx", 1013907462));
    var w = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
    var sy = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "sy", "sy", 1013907928));
    var dy = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "dy", "dy", 1013907463));
    var h = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
    var dw = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "dw", "dw", 1013907461));
    var sx = cljs.core.get.call(null, map__19199__$1, new cljs.core.Keyword(null, "sx", "sx", 1013907927));
    var pred__19200_19203 = cljs.core._EQ_;
    var expr__19201_19204 = cljs.core.count.call(null, params);
    if (cljs.core.truth_(pred__19200_19203.call(null, 2, expr__19201_19204))) {
      ctx.drawImage(img, x, y);
    } else {
      if (cljs.core.truth_(pred__19200_19203.call(null, 4, expr__19201_19204))) {
        ctx.drawImage(img, x, y, w, h);
      } else {
        if (cljs.core.truth_(pred__19200_19203.call(null, 8, expr__19201_19204))) {
          ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh);
        } else {
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__19201_19204));
        }
      }
    }
    return ctx;
  };
  var draw_image__4 = function(ctx, img, x, y) {
    ctx.drawImage(img, x, y);
    return ctx;
  };
  draw_image = function(ctx, img, x, y) {
    switch(arguments.length) {
      case 3:
        return draw_image__3.call(this, ctx, img, x);
      case 4:
        return draw_image__4.call(this, ctx, img, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  draw_image.cljs$core$IFn$_invoke$arity$3 = draw_image__3;
  draw_image.cljs$core$IFn$_invoke$arity$4 = draw_image__4;
  return draw_image;
}();
monet.canvas.quadratic_curve_to = function() {
  var quadratic_curve_to = null;
  var quadratic_curve_to__2 = function(ctx, p__19205) {
    var map__19207 = p__19205;
    var map__19207__$1 = cljs.core.seq_QMARK_.call(null, map__19207) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19207) : map__19207;
    var y = cljs.core.get.call(null, map__19207__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
    var x = cljs.core.get.call(null, map__19207__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
    var cpy = cljs.core.get.call(null, map__19207__$1, new cljs.core.Keyword(null, "cpy", "cpy", 1014002974));
    var cpx = cljs.core.get.call(null, map__19207__$1, new cljs.core.Keyword(null, "cpx", "cpx", 1014002973));
    ctx.quadraticCurveTo(cpx, cpy, x, y);
    return ctx;
  };
  var quadratic_curve_to__5 = function(ctx, cpx, cpy, x, y) {
    ctx.quadraticCurveTo(cpx, cpy, x, y);
    return ctx;
  };
  quadratic_curve_to = function(ctx, cpx, cpy, x, y) {
    switch(arguments.length) {
      case 2:
        return quadratic_curve_to__2.call(this, ctx, cpx);
      case 5:
        return quadratic_curve_to__5.call(this, ctx, cpx, cpy, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  quadratic_curve_to.cljs$core$IFn$_invoke$arity$2 = quadratic_curve_to__2;
  quadratic_curve_to.cljs$core$IFn$_invoke$arity$5 = quadratic_curve_to__5;
  return quadratic_curve_to;
}();
monet.canvas.bezier_curve_to = function() {
  var bezier_curve_to = null;
  var bezier_curve_to__2 = function(ctx, p__19208) {
    var map__19210 = p__19208;
    var map__19210__$1 = cljs.core.seq_QMARK_.call(null, map__19210) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19210) : map__19210;
    var y = cljs.core.get.call(null, map__19210__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
    var x = cljs.core.get.call(null, map__19210__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
    var cp2y = cljs.core.get.call(null, map__19210__$1, new cljs.core.Keyword(null, "cp2y", "cp2y", 1016962854));
    var cp2x = cljs.core.get.call(null, map__19210__$1, new cljs.core.Keyword(null, "cp2x", "cp2x", 1016962853));
    var cp1y = cljs.core.get.call(null, map__19210__$1, new cljs.core.Keyword(null, "cp1y", "cp1y", 1016962823));
    var cp1x = cljs.core.get.call(null, map__19210__$1, new cljs.core.Keyword(null, "cp1x", "cp1x", 1016962822));
    ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    return ctx;
  };
  var bezier_curve_to__7 = function(ctx, cp1x, cp1y, cp2x, cp2y, x, y) {
    ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
    return ctx;
  };
  bezier_curve_to = function(ctx, cp1x, cp1y, cp2x, cp2y, x, y) {
    switch(arguments.length) {
      case 2:
        return bezier_curve_to__2.call(this, ctx, cp1x);
      case 7:
        return bezier_curve_to__7.call(this, ctx, cp1x, cp1y, cp2x, cp2y, x, y);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bezier_curve_to.cljs$core$IFn$_invoke$arity$2 = bezier_curve_to__2;
  bezier_curve_to.cljs$core$IFn$_invoke$arity$7 = bezier_curve_to__7;
  return bezier_curve_to;
}();
monet.canvas.rounded_rect = function rounded_rect(ctx, p__19211) {
  var map__19213 = p__19211;
  var map__19213__$1 = cljs.core.seq_QMARK_.call(null, map__19213) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19213) : map__19213;
  var r = cljs.core.get.call(null, map__19213__$1, new cljs.core.Keyword(null, "r", "r", 1013904356));
  var h = cljs.core.get.call(null, map__19213__$1, new cljs.core.Keyword(null, "h", "h", 1013904346));
  var w = cljs.core.get.call(null, map__19213__$1, new cljs.core.Keyword(null, "w", "w", 1013904361));
  var y = cljs.core.get.call(null, map__19213__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__19213__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  monet.canvas.stroke.call(null, monet.canvas.quadratic_curve_to.call(null, monet.canvas.line_to.call(null, monet.canvas.quadratic_curve_to.call(null, monet.canvas.line_to.call(null, monet.canvas.quadratic_curve_to.call(null, monet.canvas.line_to.call(null, monet.canvas.quadratic_curve_to.call(null, monet.canvas.line_to.call(null, monet.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), x, y + r), x, y + h - r), x, y + h, x + r, y + h), x + w - r, y + h), x + w, y + h, x + w, y + 
  h - r), x + w, y + r), x + w, y, x + w - r, y), x + r, y), x, y, x, y + r));
  return ctx;
};
monet.canvas.add_entity = function add_entity(mc, k, ent) {
  return(new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k] = ent;
};
monet.canvas.remove_entity = function remove_entity(mc, k) {
  return delete (new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k];
};
monet.canvas.get_entity = function get_entity(mc, k) {
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k]);
};
monet.canvas.update_entity = function() {
  var update_entity__delegate = function(mc, k, func, extra) {
    var cur = (new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k];
    var res = cljs.core.apply.call(null, func, cur, extra);
    return(new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc)[k] = res;
  };
  var update_entity = function(mc, k, func, var_args) {
    var extra = null;
    if (arguments.length > 3) {
      extra = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return update_entity__delegate.call(this, mc, k, func, extra);
  };
  update_entity.cljs$lang$maxFixedArity = 3;
  update_entity.cljs$lang$applyTo = function(arglist__19214) {
    var mc = cljs.core.first(arglist__19214);
    arglist__19214 = cljs.core.next(arglist__19214);
    var k = cljs.core.first(arglist__19214);
    arglist__19214 = cljs.core.next(arglist__19214);
    var func = cljs.core.first(arglist__19214);
    var extra = cljs.core.rest(arglist__19214);
    return update_entity__delegate(mc, k, func, extra);
  };
  update_entity.cljs$core$IFn$_invoke$arity$variadic = update_entity__delegate;
  return update_entity;
}();
monet.canvas.clear_BANG_ = function clear_BANG_(mc) {
  var ks = cljs.core.js_keys.call(null, (new cljs.core.Keyword(null, "entities", "entities", 3206757171)).cljs$core$IFn$_invoke$arity$1(mc));
  var seq__19219 = cljs.core.seq.call(null, ks);
  var chunk__19220 = null;
  var count__19221 = 0;
  var i__19222 = 0;
  while (true) {
    if (i__19222 < count__19221) {
      var k = cljs.core._nth.call(null, chunk__19220, i__19222);
      monet.canvas.remove_entity.call(null, mc, k);
      var G__19223 = seq__19219;
      var G__19224 = chunk__19220;
      var G__19225 = count__19221;
      var G__19226 = i__19222 + 1;
      seq__19219 = G__19223;
      chunk__19220 = G__19224;
      count__19221 = G__19225;
      i__19222 = G__19226;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__19219);
      if (temp__4126__auto__) {
        var seq__19219__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__19219__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__19219__$1);
          var G__19227 = cljs.core.chunk_rest.call(null, seq__19219__$1);
          var G__19228 = c__4333__auto__;
          var G__19229 = cljs.core.count.call(null, c__4333__auto__);
          var G__19230 = 0;
          seq__19219 = G__19227;
          chunk__19220 = G__19228;
          count__19221 = G__19229;
          i__19222 = G__19230;
          continue;
        } else {
          var k = cljs.core.first.call(null, seq__19219__$1);
          monet.canvas.remove_entity.call(null, mc, k);
          var G__19231 = cljs.core.next.call(null, seq__19219__$1);
          var G__19232 = null;
          var G__19233 = 0;
          var G__19234 = 0;
          seq__19219 = G__19231;
          chunk__19220 = G__19232;
          count__19221 = G__19233;
          i__19222 = G__19234;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
monet.canvas.entity = function entity(v, update, draw) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "value", "value", 1125876963), v, new cljs.core.Keyword(null, "draw", "draw", 1016996022), draw, new cljs.core.Keyword(null, "update", "update", 4470025275), update], null);
};
monet.canvas.attr = function attr(e, a) {
  return e.getAttribute(a);
};
monet.canvas.draw_loop = function draw_loop(p__19235) {
  var map__19241 = p__19235;
  var map__19241__$1 = cljs.core.seq_QMARK_.call(null, map__19241) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19241) : map__19241;
  var mc = map__19241__$1;
  var entities = cljs.core.get.call(null, map__19241__$1, new cljs.core.Keyword(null, "entities", "entities", 3206757171));
  var active = cljs.core.get.call(null, map__19241__$1, new cljs.core.Keyword(null, "active", "active", 3885920888));
  var ctx = cljs.core.get.call(null, map__19241__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var updating_QMARK_ = cljs.core.get.call(null, map__19241__$1, new cljs.core.Keyword(null, "updating?", "updating?", 3359806763));
  var canvas = cljs.core.get.call(null, map__19241__$1, new cljs.core.Keyword(null, "canvas", "canvas", 3941165258));
  monet.canvas.clear_rect.call(null, ctx, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "x", "x", 1013904362), 0, new cljs.core.Keyword(null, "y", "y", 1013904363), 0, new cljs.core.Keyword(null, "w", "w", 1013904361), monet.canvas.attr.call(null, canvas, "width"), new cljs.core.Keyword(null, "h", "h", 1013904346), monet.canvas.attr.call(null, canvas, "height")], null));
  if (cljs.core.truth_(cljs.core.deref.call(null, active))) {
    var ks_19246 = cljs.core.js_keys.call(null, entities);
    var cnt_19247 = ks_19246.length;
    var i_19248 = 0;
    while (true) {
      if (i_19248 < cnt_19247) {
        var k_19249 = ks_19246[i_19248];
        var map__19242_19250 = entities[k_19249];
        var map__19242_19251__$1 = cljs.core.seq_QMARK_.call(null, map__19242_19250) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19242_19250) : map__19242_19250;
        var ent_19252 = map__19242_19251__$1;
        var value_19253 = cljs.core.get.call(null, map__19242_19251__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
        var update_19254 = cljs.core.get.call(null, map__19242_19251__$1, new cljs.core.Keyword(null, "update", "update", 4470025275));
        var draw_19255 = cljs.core.get.call(null, map__19242_19251__$1, new cljs.core.Keyword(null, "draw", "draw", 1016996022));
        if (cljs.core.truth_(function() {
          var and__3565__auto__ = update_19254;
          if (cljs.core.truth_(and__3565__auto__)) {
            return cljs.core.deref.call(null, updating_QMARK_);
          } else {
            return and__3565__auto__;
          }
        }())) {
          var updated_19256 = function() {
            var or__3577__auto__ = function() {
              try {
                return update_19254.call(null, value_19253);
              } catch (e19244) {
                if (e19244 instanceof Error) {
                  var e = e19244;
                  console.log(e);
                  return value_19253;
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                    throw e19244;
                  } else {
                    return null;
                  }
                }
              }
            }();
            if (cljs.core.truth_(or__3577__auto__)) {
              return or__3577__auto__;
            } else {
              return value_19253;
            }
          }();
          if (cljs.core.truth_(entities[k_19249])) {
            entities[k_19249] = cljs.core.assoc.call(null, ent_19252, new cljs.core.Keyword(null, "value", "value", 1125876963), updated_19256);
          } else {
          }
        } else {
        }
        if (cljs.core.truth_(draw_19255)) {
          try {
            draw_19255.call(null, ctx, (new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(entities[k_19249]));
          } catch (e19245) {
            if (e19245 instanceof Error) {
              var e_19257 = e19245;
              console.log(e_19257);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e19245;
              } else {
              }
            }
          }
        } else {
        }
        var G__19258 = i_19248 + 1;
        i_19248 = G__19258;
        continue;
      } else {
      }
      break;
    }
    return monet.core.animation_frame.call(null, function(map__19241, map__19241__$1, mc, entities, active, ctx, updating_QMARK_, canvas) {
      return function() {
        return draw_loop.call(null, mc);
      };
    }(map__19241, map__19241__$1, mc, entities, active, ctx, updating_QMARK_, canvas));
  } else {
    return null;
  }
};
monet.canvas.monet_canvas = function monet_canvas(elem, context_type) {
  var ct = function() {
    var or__3577__auto__ = context_type;
    if (cljs.core.truth_(or__3577__auto__)) {
      return or__3577__auto__;
    } else {
      return "2d";
    }
  }();
  var ctx = monet.canvas.get_context.call(null, elem, ct);
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "canvas", "canvas", 3941165258), elem, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097), ctx, new cljs.core.Keyword(null, "entities", "entities", 3206757171), function() {
    var obj19262 = {};
    return obj19262;
  }(), new cljs.core.Keyword(null, "updating?", "updating?", 3359806763), cljs.core.atom.call(null, true), new cljs.core.Keyword(null, "active", "active", 3885920888), cljs.core.atom.call(null, true)], null);
};
monet.canvas.init = function() {
  var init__delegate = function(canvas, p__19263) {
    var vec__19265 = p__19263;
    var context_type = cljs.core.nth.call(null, vec__19265, 0, null);
    var mc = monet.canvas.monet_canvas.call(null, canvas, context_type);
    monet.canvas.draw_loop.call(null, mc);
    return mc;
  };
  var init = function(canvas, var_args) {
    var p__19263 = null;
    if (arguments.length > 1) {
      p__19263 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return init__delegate.call(this, canvas, p__19263);
  };
  init.cljs$lang$maxFixedArity = 1;
  init.cljs$lang$applyTo = function(arglist__19266) {
    var canvas = cljs.core.first(arglist__19266);
    var p__19263 = cljs.core.rest(arglist__19266);
    return init__delegate(canvas, p__19263);
  };
  init.cljs$core$IFn$_invoke$arity$variadic = init__delegate;
  return init;
}();
monet.canvas.stop = function stop(mc) {
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "active", "active", 3885920888)).cljs$core$IFn$_invoke$arity$1(mc), false);
};
monet.canvas.stop_updating = function stop_updating(mc) {
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "updating?", "updating?", 3359806763)).cljs$core$IFn$_invoke$arity$1(mc), false);
};
monet.canvas.start_updating = function start_updating(mc) {
  return cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "updating?", "updating?", 3359806763)).cljs$core$IFn$_invoke$arity$1(mc), true);
};
monet.canvas.restart = function restart(mc) {
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "active", "active", 3885920888)).cljs$core$IFn$_invoke$arity$1(mc), true);
  return monet.canvas.draw_loop.call(null, mc);
};
goog.provide("html.canvas");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
goog.require("monet.canvas");
goog.require("monet.canvas");
html.canvas.point = function point(x, y) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "x", "x", 1013904362), x, new cljs.core.Keyword(null, "y", "y", 1013904363), y], null);
};
html.canvas.move_to = function move_to(ctx, p__15009) {
  var map__15011 = p__15009;
  var map__15011__$1 = cljs.core.seq_QMARK_.call(null, map__15011) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15011) : map__15011;
  var y = cljs.core.get.call(null, map__15011__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__15011__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.moveTo(x, y);
  return ctx;
};
html.canvas.line_to = function line_to(ctx, p__15012) {
  var map__15014 = p__15012;
  var map__15014__$1 = cljs.core.seq_QMARK_.call(null, map__15014) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15014) : map__15014;
  var y = cljs.core.get.call(null, map__15014__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__15014__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.lineTo(x, y);
  return ctx;
};
html.canvas.arc = function arc(ctx, p__15015, radius, start, end, direction) {
  var map__15017 = p__15015;
  var map__15017__$1 = cljs.core.seq_QMARK_.call(null, map__15017) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15017) : map__15017;
  var y = cljs.core.get.call(null, map__15017__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__15017__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.arc(x, y, radius, start, end, direction.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "cw", "cw", 1013907430), false, new cljs.core.Keyword(null, "ccw", "ccw", 1014002569), true], null)));
  return ctx;
};
html.canvas.offset = function offset(e) {
  var temp__4124__auto__ = e.offsetX;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var ox = temp__4124__auto__;
    return html.canvas.point.call(null, ox, e.offsetY);
  } else {
    var rect = e.target.getBoundingClientRect();
    var item = function() {
      var temp__4124__auto____$1 = e.touches;
      if (cljs.core.truth_(temp__4124__auto____$1)) {
        var touches = temp__4124__auto____$1;
        return touches.item(0);
      } else {
        return e;
      }
    }();
    return html.canvas.point.call(null, item.clientX - rect.left, item.clientY - rect.top);
  }
};
html.canvas.center = function center(item) {
  var e = cljs.core.truth_(item.nodeType) ? item : item.target;
  return html.canvas.point.call(null, e.width / 2, e.height / 2);
};
html.canvas.distance = function distance(a, b) {
  var xd = (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(a) - (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(b);
  var yd = (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(a) - (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(b);
  return Math.sqrt.call(null, xd * xd + yd * yd);
};
html.canvas.point_diff = function point_diff(p1, p2) {
  return html.canvas.point.call(null, (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(p1) - (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(p2), (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(p1) - (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(p2));
};
html.canvas.extent = function extent(ctx) {
  var canvas = ctx.canvas;
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "x", "x", 1013904362), 0, new cljs.core.Keyword(null, "y", "y", 1013904363), 0, new cljs.core.Keyword(null, "w", "w", 1013904361), canvas.width, new cljs.core.Keyword(null, "h", "h", 1013904346), canvas.height], null);
};
html.canvas.clear = function clear(ctx) {
  return monet.canvas.clear_rect.call(null, ctx, html.canvas.extent.call(null, ctx));
};
html.canvas.image = function image(ctx, img, p__15018) {
  var map__15020 = p__15018;
  var map__15020__$1 = cljs.core.seq_QMARK_.call(null, map__15020) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15020) : map__15020;
  var y = cljs.core.get.call(null, map__15020__$1, new cljs.core.Keyword(null, "y", "y", 1013904363));
  var x = cljs.core.get.call(null, map__15020__$1, new cljs.core.Keyword(null, "x", "x", 1013904362));
  ctx.drawImage(img, x, y);
  return ctx;
};
goog.provide("dommy.utils");
goog.require("cljs.core");
dommy.utils.dissoc_in = function dissoc_in(m, p__22448) {
  var vec__22450 = p__22448;
  var k = cljs.core.nth.call(null, vec__22450, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__22450, 1);
  if (cljs.core.truth_(m)) {
    var temp__4124__auto__ = function() {
      var and__3565__auto__ = ks;
      if (and__3565__auto__) {
        return dissoc_in.call(null, m.call(null, k), ks);
      } else {
        return and__3565__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4124__auto__)) {
      var res = temp__4124__auto__;
      return cljs.core.assoc.call(null, m, k, res);
    } else {
      var res = cljs.core.dissoc.call(null, m, k);
      if (cljs.core.empty_QMARK_.call(null, res)) {
        return null;
      } else {
        return res;
      }
    }
  } else {
    return null;
  }
};
dommy.utils.__GT_Array = function __GT_Array(array_like) {
  return Array.prototype.slice.call(array_like);
};
dommy.utils.string_or_keyword = function string_or_keyword(s) {
  if (s instanceof cljs.core.Keyword) {
    return cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s), 1);
  } else {
    return s;
  }
};
goog.provide("dommy.attrs");
goog.require("cljs.core");
goog.require("dommy.utils");
goog.require("dommy.utils");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.attrs.class_match_QMARK_ = function class_match_QMARK_(class_name, class$, idx) {
  var and__3565__auto__ = idx === 0 || " " === class_name.charAt(idx - 1);
  if (and__3565__auto__) {
    var total_len = class_name.length;
    var stop = idx + class$.length;
    if (stop <= total_len) {
      return stop === total_len || " " === class_name.charAt(stop);
    } else {
      return null;
    }
  } else {
    return and__3565__auto__;
  }
};
dommy.attrs.class_index = function class_index(class_name, class$) {
  var start_from = 0;
  while (true) {
    var i = class_name.indexOf(class$, start_from);
    if (i >= 0) {
      if (dommy.attrs.class_match_QMARK_.call(null, class_name, class$, i)) {
        return i;
      } else {
        var G__22451 = i + class$.length;
        start_from = G__22451;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
dommy.attrs.has_class_QMARK_ = function has_class_QMARK_(elem, class$) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var class$__$1 = dommy.utils.string_or_keyword.call(null, class$);
  var temp__4124__auto__ = elem__$1.classList;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var class_list = temp__4124__auto__;
    return class_list.contains(class$__$1);
  } else {
    var temp__4126__auto__ = elem__$1.className;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var class_name = temp__4126__auto__;
      var temp__4126__auto____$1 = dommy.attrs.class_index.call(null, class_name, class$__$1);
      if (cljs.core.truth_(temp__4126__auto____$1)) {
        var i = temp__4126__auto____$1;
        return i >= 0;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
dommy.attrs.add_class_BANG_ = function() {
  var add_class_BANG_ = null;
  var add_class_BANG___2 = function(elem, classes) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var classes__$1 = clojure.string.trim.call(null, dommy.utils.string_or_keyword.call(null, classes));
    if (cljs.core.seq.call(null, classes__$1)) {
      var temp__4124__auto___22476 = elem__$1.classList;
      if (cljs.core.truth_(temp__4124__auto___22476)) {
        var class_list_22477 = temp__4124__auto___22476;
        var seq__22464_22478 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__22465_22479 = null;
        var count__22466_22480 = 0;
        var i__22467_22481 = 0;
        while (true) {
          if (i__22467_22481 < count__22466_22480) {
            var class_22482 = cljs.core._nth.call(null, chunk__22465_22479, i__22467_22481);
            class_list_22477.add(class_22482);
            var G__22483 = seq__22464_22478;
            var G__22484 = chunk__22465_22479;
            var G__22485 = count__22466_22480;
            var G__22486 = i__22467_22481 + 1;
            seq__22464_22478 = G__22483;
            chunk__22465_22479 = G__22484;
            count__22466_22480 = G__22485;
            i__22467_22481 = G__22486;
            continue;
          } else {
            var temp__4126__auto___22487 = cljs.core.seq.call(null, seq__22464_22478);
            if (temp__4126__auto___22487) {
              var seq__22464_22488__$1 = temp__4126__auto___22487;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__22464_22488__$1)) {
                var c__4333__auto___22489 = cljs.core.chunk_first.call(null, seq__22464_22488__$1);
                var G__22490 = cljs.core.chunk_rest.call(null, seq__22464_22488__$1);
                var G__22491 = c__4333__auto___22489;
                var G__22492 = cljs.core.count.call(null, c__4333__auto___22489);
                var G__22493 = 0;
                seq__22464_22478 = G__22490;
                chunk__22465_22479 = G__22491;
                count__22466_22480 = G__22492;
                i__22467_22481 = G__22493;
                continue;
              } else {
                var class_22494 = cljs.core.first.call(null, seq__22464_22488__$1);
                class_list_22477.add(class_22494);
                var G__22495 = cljs.core.next.call(null, seq__22464_22488__$1);
                var G__22496 = null;
                var G__22497 = 0;
                var G__22498 = 0;
                seq__22464_22478 = G__22495;
                chunk__22465_22479 = G__22496;
                count__22466_22480 = G__22497;
                i__22467_22481 = G__22498;
                continue;
              }
            } else {
            }
          }
          break;
        }
      } else {
        var seq__22468_22499 = cljs.core.seq.call(null, classes__$1.split(/\s+/));
        var chunk__22469_22500 = null;
        var count__22470_22501 = 0;
        var i__22471_22502 = 0;
        while (true) {
          if (i__22471_22502 < count__22470_22501) {
            var class_22503 = cljs.core._nth.call(null, chunk__22469_22500, i__22471_22502);
            var class_name_22504 = elem__$1.className;
            if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_22504, class_22503))) {
            } else {
              elem__$1.className = class_name_22504 === "" ? class_22503 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_22504) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_22503);
            }
            var G__22505 = seq__22468_22499;
            var G__22506 = chunk__22469_22500;
            var G__22507 = count__22470_22501;
            var G__22508 = i__22471_22502 + 1;
            seq__22468_22499 = G__22505;
            chunk__22469_22500 = G__22506;
            count__22470_22501 = G__22507;
            i__22471_22502 = G__22508;
            continue;
          } else {
            var temp__4126__auto___22509 = cljs.core.seq.call(null, seq__22468_22499);
            if (temp__4126__auto___22509) {
              var seq__22468_22510__$1 = temp__4126__auto___22509;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__22468_22510__$1)) {
                var c__4333__auto___22511 = cljs.core.chunk_first.call(null, seq__22468_22510__$1);
                var G__22512 = cljs.core.chunk_rest.call(null, seq__22468_22510__$1);
                var G__22513 = c__4333__auto___22511;
                var G__22514 = cljs.core.count.call(null, c__4333__auto___22511);
                var G__22515 = 0;
                seq__22468_22499 = G__22512;
                chunk__22469_22500 = G__22513;
                count__22470_22501 = G__22514;
                i__22471_22502 = G__22515;
                continue;
              } else {
                var class_22516 = cljs.core.first.call(null, seq__22468_22510__$1);
                var class_name_22517 = elem__$1.className;
                if (cljs.core.truth_(dommy.attrs.class_index.call(null, class_name_22517, class_22516))) {
                } else {
                  elem__$1.className = class_name_22517 === "" ? class_22516 : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name_22517) + " " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_22516);
                }
                var G__22518 = cljs.core.next.call(null, seq__22468_22510__$1);
                var G__22519 = null;
                var G__22520 = 0;
                var G__22521 = 0;
                seq__22468_22499 = G__22518;
                chunk__22469_22500 = G__22519;
                count__22470_22501 = G__22520;
                i__22471_22502 = G__22521;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
    } else {
    }
    return elem__$1;
  };
  var add_class_BANG___3 = function() {
    var G__22522__delegate = function(elem, classes, more_classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__22472_22523 = cljs.core.seq.call(null, cljs.core.conj.call(null, more_classes, classes));
      var chunk__22473_22524 = null;
      var count__22474_22525 = 0;
      var i__22475_22526 = 0;
      while (true) {
        if (i__22475_22526 < count__22474_22525) {
          var c_22527 = cljs.core._nth.call(null, chunk__22473_22524, i__22475_22526);
          add_class_BANG_.call(null, elem__$1, c_22527);
          var G__22528 = seq__22472_22523;
          var G__22529 = chunk__22473_22524;
          var G__22530 = count__22474_22525;
          var G__22531 = i__22475_22526 + 1;
          seq__22472_22523 = G__22528;
          chunk__22473_22524 = G__22529;
          count__22474_22525 = G__22530;
          i__22475_22526 = G__22531;
          continue;
        } else {
          var temp__4126__auto___22532 = cljs.core.seq.call(null, seq__22472_22523);
          if (temp__4126__auto___22532) {
            var seq__22472_22533__$1 = temp__4126__auto___22532;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22472_22533__$1)) {
              var c__4333__auto___22534 = cljs.core.chunk_first.call(null, seq__22472_22533__$1);
              var G__22535 = cljs.core.chunk_rest.call(null, seq__22472_22533__$1);
              var G__22536 = c__4333__auto___22534;
              var G__22537 = cljs.core.count.call(null, c__4333__auto___22534);
              var G__22538 = 0;
              seq__22472_22523 = G__22535;
              chunk__22473_22524 = G__22536;
              count__22474_22525 = G__22537;
              i__22475_22526 = G__22538;
              continue;
            } else {
              var c_22539 = cljs.core.first.call(null, seq__22472_22533__$1);
              add_class_BANG_.call(null, elem__$1, c_22539);
              var G__22540 = cljs.core.next.call(null, seq__22472_22533__$1);
              var G__22541 = null;
              var G__22542 = 0;
              var G__22543 = 0;
              seq__22472_22523 = G__22540;
              chunk__22473_22524 = G__22541;
              count__22474_22525 = G__22542;
              i__22475_22526 = G__22543;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__22522 = function(elem, classes, var_args) {
      var more_classes = null;
      if (arguments.length > 2) {
        more_classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22522__delegate.call(this, elem, classes, more_classes);
    };
    G__22522.cljs$lang$maxFixedArity = 2;
    G__22522.cljs$lang$applyTo = function(arglist__22544) {
      var elem = cljs.core.first(arglist__22544);
      arglist__22544 = cljs.core.next(arglist__22544);
      var classes = cljs.core.first(arglist__22544);
      var more_classes = cljs.core.rest(arglist__22544);
      return G__22522__delegate(elem, classes, more_classes);
    };
    G__22522.cljs$core$IFn$_invoke$arity$variadic = G__22522__delegate;
    return G__22522;
  }();
  add_class_BANG_ = function(elem, classes, var_args) {
    var more_classes = var_args;
    switch(arguments.length) {
      case 2:
        return add_class_BANG___2.call(this, elem, classes);
      default:
        return add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, classes, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_class_BANG_.cljs$lang$maxFixedArity = 2;
  add_class_BANG_.cljs$lang$applyTo = add_class_BANG___3.cljs$lang$applyTo;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$2 = add_class_BANG___2;
  add_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = add_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return add_class_BANG_;
}();
dommy.attrs.remove_class_str = function remove_class_str(init_class_name, class$) {
  var class_name = init_class_name;
  while (true) {
    var class_len = class_name.length;
    var temp__4124__auto__ = dommy.attrs.class_index.call(null, class_name, class$);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var i = temp__4124__auto__;
      var G__22545 = function() {
        var end = i + class$.length;
        return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(end < class_len ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substring(0, i)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(class_name.substr(end + 1)) : class_name.substring(0, i - 1));
      }();
      class_name = G__22545;
      continue;
    } else {
      return class_name;
    }
    break;
  }
};
dommy.attrs.remove_class_BANG_ = function() {
  var remove_class_BANG_ = null;
  var remove_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = dommy.utils.string_or_keyword.call(null, class$);
    var temp__4124__auto___22554 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___22554)) {
      var class_list_22555 = temp__4124__auto___22554;
      class_list_22555.remove(class$__$1);
    } else {
      var class_name_22556 = elem__$1.className;
      var new_class_name_22557 = dommy.attrs.remove_class_str.call(null, class_name_22556, class$__$1);
      if (class_name_22556 === new_class_name_22557) {
      } else {
        elem__$1.className = new_class_name_22557;
      }
    }
    return elem__$1;
  };
  var remove_class_BANG___3 = function() {
    var G__22558__delegate = function(elem, class$, classes) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__22550 = cljs.core.seq.call(null, cljs.core.conj.call(null, classes, class$));
      var chunk__22551 = null;
      var count__22552 = 0;
      var i__22553 = 0;
      while (true) {
        if (i__22553 < count__22552) {
          var c = cljs.core._nth.call(null, chunk__22551, i__22553);
          remove_class_BANG_.call(null, elem__$1, c);
          var G__22559 = seq__22550;
          var G__22560 = chunk__22551;
          var G__22561 = count__22552;
          var G__22562 = i__22553 + 1;
          seq__22550 = G__22559;
          chunk__22551 = G__22560;
          count__22552 = G__22561;
          i__22553 = G__22562;
          continue;
        } else {
          var temp__4126__auto__ = cljs.core.seq.call(null, seq__22550);
          if (temp__4126__auto__) {
            var seq__22550__$1 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22550__$1)) {
              var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__22550__$1);
              var G__22563 = cljs.core.chunk_rest.call(null, seq__22550__$1);
              var G__22564 = c__4333__auto__;
              var G__22565 = cljs.core.count.call(null, c__4333__auto__);
              var G__22566 = 0;
              seq__22550 = G__22563;
              chunk__22551 = G__22564;
              count__22552 = G__22565;
              i__22553 = G__22566;
              continue;
            } else {
              var c = cljs.core.first.call(null, seq__22550__$1);
              remove_class_BANG_.call(null, elem__$1, c);
              var G__22567 = cljs.core.next.call(null, seq__22550__$1);
              var G__22568 = null;
              var G__22569 = 0;
              var G__22570 = 0;
              seq__22550 = G__22567;
              chunk__22551 = G__22568;
              count__22552 = G__22569;
              i__22553 = G__22570;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
    var G__22558 = function(elem, class$, var_args) {
      var classes = null;
      if (arguments.length > 2) {
        classes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22558__delegate.call(this, elem, class$, classes);
    };
    G__22558.cljs$lang$maxFixedArity = 2;
    G__22558.cljs$lang$applyTo = function(arglist__22571) {
      var elem = cljs.core.first(arglist__22571);
      arglist__22571 = cljs.core.next(arglist__22571);
      var class$ = cljs.core.first(arglist__22571);
      var classes = cljs.core.rest(arglist__22571);
      return G__22558__delegate(elem, class$, classes);
    };
    G__22558.cljs$core$IFn$_invoke$arity$variadic = G__22558__delegate;
    return G__22558;
  }();
  remove_class_BANG_ = function(elem, class$, var_args) {
    var classes = var_args;
    switch(arguments.length) {
      case 2:
        return remove_class_BANG___2.call(this, elem, class$);
      default:
        return remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, class$, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_class_BANG_.cljs$lang$maxFixedArity = 2;
  remove_class_BANG_.cljs$lang$applyTo = remove_class_BANG___3.cljs$lang$applyTo;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_class_BANG___2;
  remove_class_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_class_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_class_BANG_;
}();
dommy.attrs.toggle_class_BANG_ = function() {
  var toggle_class_BANG_ = null;
  var toggle_class_BANG___2 = function(elem, class$) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var class$__$1 = dommy.utils.string_or_keyword.call(null, class$);
    var temp__4124__auto___22572 = elem__$1.classList;
    if (cljs.core.truth_(temp__4124__auto___22572)) {
      var class_list_22573 = temp__4124__auto___22572;
      class_list_22573.toggle(class$__$1);
    } else {
      toggle_class_BANG_.call(null, elem__$1, class$__$1, !dommy.attrs.has_class_QMARK_.call(null, elem__$1, class$__$1));
    }
    return elem__$1;
  };
  var toggle_class_BANG___3 = function(elem, class$, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      dommy.attrs.add_class_BANG_.call(null, elem__$1, class$);
    } else {
      dommy.attrs.remove_class_BANG_.call(null, elem__$1, class$);
    }
    return elem__$1;
  };
  toggle_class_BANG_ = function(elem, class$, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_class_BANG___2.call(this, elem, class$);
      case 3:
        return toggle_class_BANG___3.call(this, elem, class$, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_class_BANG___2;
  toggle_class_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_class_BANG___3;
  return toggle_class_BANG_;
}();
dommy.attrs.style_str = function style_str(x) {
  if (typeof x === "string") {
    return x;
  } else {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, function(p__22576) {
      var vec__22577 = p__22576;
      var k = cljs.core.nth.call(null, vec__22577, 0, null);
      var v = cljs.core.nth.call(null, vec__22577, 1, null);
      return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dommy.utils.string_or_keyword.call(null, k)) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dommy.utils.string_or_keyword.call(null, v)) + ";";
    }, x));
  }
};
dommy.attrs.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var style = elem__$1.style;
    var seq__22584_22590 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__22585_22591 = null;
    var count__22586_22592 = 0;
    var i__22587_22593 = 0;
    while (true) {
      if (i__22587_22593 < count__22586_22592) {
        var vec__22588_22594 = cljs.core._nth.call(null, chunk__22585_22591, i__22587_22593);
        var k_22595 = cljs.core.nth.call(null, vec__22588_22594, 0, null);
        var v_22596 = cljs.core.nth.call(null, vec__22588_22594, 1, null);
        style.setProperty(dommy.utils.string_or_keyword.call(null, k_22595), v_22596);
        var G__22597 = seq__22584_22590;
        var G__22598 = chunk__22585_22591;
        var G__22599 = count__22586_22592;
        var G__22600 = i__22587_22593 + 1;
        seq__22584_22590 = G__22597;
        chunk__22585_22591 = G__22598;
        count__22586_22592 = G__22599;
        i__22587_22593 = G__22600;
        continue;
      } else {
        var temp__4126__auto___22601 = cljs.core.seq.call(null, seq__22584_22590);
        if (temp__4126__auto___22601) {
          var seq__22584_22602__$1 = temp__4126__auto___22601;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22584_22602__$1)) {
            var c__4333__auto___22603 = cljs.core.chunk_first.call(null, seq__22584_22602__$1);
            var G__22604 = cljs.core.chunk_rest.call(null, seq__22584_22602__$1);
            var G__22605 = c__4333__auto___22603;
            var G__22606 = cljs.core.count.call(null, c__4333__auto___22603);
            var G__22607 = 0;
            seq__22584_22590 = G__22604;
            chunk__22585_22591 = G__22605;
            count__22586_22592 = G__22606;
            i__22587_22593 = G__22607;
            continue;
          } else {
            var vec__22589_22608 = cljs.core.first.call(null, seq__22584_22602__$1);
            var k_22609 = cljs.core.nth.call(null, vec__22589_22608, 0, null);
            var v_22610 = cljs.core.nth.call(null, vec__22589_22608, 1, null);
            style.setProperty(dommy.utils.string_or_keyword.call(null, k_22609), v_22610);
            var G__22611 = cljs.core.next.call(null, seq__22584_22602__$1);
            var G__22612 = null;
            var G__22613 = 0;
            var G__22614 = 0;
            seq__22584_22590 = G__22611;
            chunk__22585_22591 = G__22612;
            count__22586_22592 = G__22613;
            i__22587_22593 = G__22614;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_style_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_style_BANG___delegate.call(this, elem, kvs);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 1;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__22615) {
    var elem = cljs.core.first(arglist__22615);
    var kvs = cljs.core.rest(arglist__22615);
    return set_style_BANG___delegate(elem, kvs);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
dommy.attrs.style = function style(elem, k) {
  if (cljs.core.truth_(k)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "k", "k", -1640531420, null))));
  }
  return window.getComputedStyle(dommy.template.__GT_node_like.call(null, elem))[cljs.core.name.call(null, k)];
};
dommy.attrs.set_px_BANG_ = function() {
  var set_px_BANG___delegate = function(elem, kvs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null))))));
    }
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    var seq__22622_22628 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, kvs));
    var chunk__22623_22629 = null;
    var count__22624_22630 = 0;
    var i__22625_22631 = 0;
    while (true) {
      if (i__22625_22631 < count__22624_22630) {
        var vec__22626_22632 = cljs.core._nth.call(null, chunk__22623_22629, i__22625_22631);
        var k_22633 = cljs.core.nth.call(null, vec__22626_22632, 0, null);
        var v_22634 = cljs.core.nth.call(null, vec__22626_22632, 1, null);
        dommy.attrs.set_style_BANG_.call(null, elem__$1, k_22633, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_22634) + "px");
        var G__22635 = seq__22622_22628;
        var G__22636 = chunk__22623_22629;
        var G__22637 = count__22624_22630;
        var G__22638 = i__22625_22631 + 1;
        seq__22622_22628 = G__22635;
        chunk__22623_22629 = G__22636;
        count__22624_22630 = G__22637;
        i__22625_22631 = G__22638;
        continue;
      } else {
        var temp__4126__auto___22639 = cljs.core.seq.call(null, seq__22622_22628);
        if (temp__4126__auto___22639) {
          var seq__22622_22640__$1 = temp__4126__auto___22639;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22622_22640__$1)) {
            var c__4333__auto___22641 = cljs.core.chunk_first.call(null, seq__22622_22640__$1);
            var G__22642 = cljs.core.chunk_rest.call(null, seq__22622_22640__$1);
            var G__22643 = c__4333__auto___22641;
            var G__22644 = cljs.core.count.call(null, c__4333__auto___22641);
            var G__22645 = 0;
            seq__22622_22628 = G__22642;
            chunk__22623_22629 = G__22643;
            count__22624_22630 = G__22644;
            i__22625_22631 = G__22645;
            continue;
          } else {
            var vec__22627_22646 = cljs.core.first.call(null, seq__22622_22640__$1);
            var k_22647 = cljs.core.nth.call(null, vec__22627_22646, 0, null);
            var v_22648 = cljs.core.nth.call(null, vec__22627_22646, 1, null);
            dommy.attrs.set_style_BANG_.call(null, elem__$1, k_22647, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v_22648) + "px");
            var G__22649 = cljs.core.next.call(null, seq__22622_22640__$1);
            var G__22650 = null;
            var G__22651 = 0;
            var G__22652 = 0;
            seq__22622_22628 = G__22649;
            chunk__22623_22629 = G__22650;
            count__22624_22630 = G__22651;
            i__22625_22631 = G__22652;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem__$1;
  };
  var set_px_BANG_ = function(elem, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_px_BANG___delegate.call(this, elem, kvs);
  };
  set_px_BANG_.cljs$lang$maxFixedArity = 1;
  set_px_BANG_.cljs$lang$applyTo = function(arglist__22653) {
    var elem = cljs.core.first(arglist__22653);
    var kvs = cljs.core.rest(arglist__22653);
    return set_px_BANG___delegate(elem, kvs);
  };
  set_px_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_px_BANG___delegate;
  return set_px_BANG_;
}();
dommy.attrs.px = function px(elem, k) {
  var pixels = dommy.attrs.style.call(null, dommy.template.__GT_node_like.call(null, elem), k);
  if (cljs.core.seq.call(null, pixels)) {
    return parseInt(pixels);
  } else {
    return null;
  }
};
dommy.attrs.set_attr_BANG_ = function() {
  var set_attr_BANG_ = null;
  var set_attr_BANG___2 = function(elem, k) {
    return set_attr_BANG_.call(null, dommy.template.__GT_node_like.call(null, elem), k, "true");
  };
  var set_attr_BANG___3 = function(elem, k, v) {
    if (cljs.core.truth_(v)) {
      if (cljs.core.fn_QMARK_.call(null, v)) {
        var G__22662 = dommy.template.__GT_node_like.call(null, elem);
        G__22662[dommy.utils.string_or_keyword.call(null, k)] = v;
        return G__22662;
      } else {
        var G__22663 = dommy.template.__GT_node_like.call(null, elem);
        G__22663.setAttribute(dommy.utils.string_or_keyword.call(null, k), cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "style", "style", 1123684643)) ? dommy.attrs.style_str.call(null, v) : v);
        return G__22663;
      }
    } else {
      return null;
    }
  };
  var set_attr_BANG___4 = function() {
    var G__22670__delegate = function(elem, k, v, kvs) {
      if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, kvs))) {
      } else {
        throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "kvs", "kvs", -1640424927, null))))));
      }
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__22664_22671 = cljs.core.seq.call(null, cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null), cljs.core.partition.call(null, 2, kvs)));
      var chunk__22665_22672 = null;
      var count__22666_22673 = 0;
      var i__22667_22674 = 0;
      while (true) {
        if (i__22667_22674 < count__22666_22673) {
          var vec__22668_22675 = cljs.core._nth.call(null, chunk__22665_22672, i__22667_22674);
          var k_22676__$1 = cljs.core.nth.call(null, vec__22668_22675, 0, null);
          var v_22677__$1 = cljs.core.nth.call(null, vec__22668_22675, 1, null);
          set_attr_BANG_.call(null, elem__$1, k_22676__$1, v_22677__$1);
          var G__22678 = seq__22664_22671;
          var G__22679 = chunk__22665_22672;
          var G__22680 = count__22666_22673;
          var G__22681 = i__22667_22674 + 1;
          seq__22664_22671 = G__22678;
          chunk__22665_22672 = G__22679;
          count__22666_22673 = G__22680;
          i__22667_22674 = G__22681;
          continue;
        } else {
          var temp__4126__auto___22682 = cljs.core.seq.call(null, seq__22664_22671);
          if (temp__4126__auto___22682) {
            var seq__22664_22683__$1 = temp__4126__auto___22682;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22664_22683__$1)) {
              var c__4333__auto___22684 = cljs.core.chunk_first.call(null, seq__22664_22683__$1);
              var G__22685 = cljs.core.chunk_rest.call(null, seq__22664_22683__$1);
              var G__22686 = c__4333__auto___22684;
              var G__22687 = cljs.core.count.call(null, c__4333__auto___22684);
              var G__22688 = 0;
              seq__22664_22671 = G__22685;
              chunk__22665_22672 = G__22686;
              count__22666_22673 = G__22687;
              i__22667_22674 = G__22688;
              continue;
            } else {
              var vec__22669_22689 = cljs.core.first.call(null, seq__22664_22683__$1);
              var k_22690__$1 = cljs.core.nth.call(null, vec__22669_22689, 0, null);
              var v_22691__$1 = cljs.core.nth.call(null, vec__22669_22689, 1, null);
              set_attr_BANG_.call(null, elem__$1, k_22690__$1, v_22691__$1);
              var G__22692 = cljs.core.next.call(null, seq__22664_22683__$1);
              var G__22693 = null;
              var G__22694 = 0;
              var G__22695 = 0;
              seq__22664_22671 = G__22692;
              chunk__22665_22672 = G__22693;
              count__22666_22673 = G__22694;
              i__22667_22674 = G__22695;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__22670 = function(elem, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__22670__delegate.call(this, elem, k, v, kvs);
    };
    G__22670.cljs$lang$maxFixedArity = 3;
    G__22670.cljs$lang$applyTo = function(arglist__22696) {
      var elem = cljs.core.first(arglist__22696);
      arglist__22696 = cljs.core.next(arglist__22696);
      var k = cljs.core.first(arglist__22696);
      arglist__22696 = cljs.core.next(arglist__22696);
      var v = cljs.core.first(arglist__22696);
      var kvs = cljs.core.rest(arglist__22696);
      return G__22670__delegate(elem, k, v, kvs);
    };
    G__22670.cljs$core$IFn$_invoke$arity$variadic = G__22670__delegate;
    return G__22670;
  }();
  set_attr_BANG_ = function(elem, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 2:
        return set_attr_BANG___2.call(this, elem, k);
      case 3:
        return set_attr_BANG___3.call(this, elem, k, v);
      default:
        return set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic(elem, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 3;
  set_attr_BANG_.cljs$lang$applyTo = set_attr_BANG___4.cljs$lang$applyTo;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_attr_BANG___2;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_attr_BANG___3;
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return set_attr_BANG_;
}();
dommy.attrs.remove_attr_BANG_ = function() {
  var remove_attr_BANG_ = null;
  var remove_attr_BANG___2 = function(elem, k) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "class", "class", 1108647146), null, new cljs.core.Keyword(null, "classes", "classes", 1867525016), null], null), null)).call(null, k))) {
      elem__$1.className = "";
    } else {
      elem__$1.removeAttribute(dommy.utils.string_or_keyword.call(null, k));
    }
    return elem__$1;
  };
  var remove_attr_BANG___3 = function() {
    var G__22705__delegate = function(elem, k, ks) {
      var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
      var seq__22701_22706 = cljs.core.seq.call(null, cljs.core.cons.call(null, k, ks));
      var chunk__22702_22707 = null;
      var count__22703_22708 = 0;
      var i__22704_22709 = 0;
      while (true) {
        if (i__22704_22709 < count__22703_22708) {
          var k_22710__$1 = cljs.core._nth.call(null, chunk__22702_22707, i__22704_22709);
          remove_attr_BANG_.call(null, elem__$1, k_22710__$1);
          var G__22711 = seq__22701_22706;
          var G__22712 = chunk__22702_22707;
          var G__22713 = count__22703_22708;
          var G__22714 = i__22704_22709 + 1;
          seq__22701_22706 = G__22711;
          chunk__22702_22707 = G__22712;
          count__22703_22708 = G__22713;
          i__22704_22709 = G__22714;
          continue;
        } else {
          var temp__4126__auto___22715 = cljs.core.seq.call(null, seq__22701_22706);
          if (temp__4126__auto___22715) {
            var seq__22701_22716__$1 = temp__4126__auto___22715;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22701_22716__$1)) {
              var c__4333__auto___22717 = cljs.core.chunk_first.call(null, seq__22701_22716__$1);
              var G__22718 = cljs.core.chunk_rest.call(null, seq__22701_22716__$1);
              var G__22719 = c__4333__auto___22717;
              var G__22720 = cljs.core.count.call(null, c__4333__auto___22717);
              var G__22721 = 0;
              seq__22701_22706 = G__22718;
              chunk__22702_22707 = G__22719;
              count__22703_22708 = G__22720;
              i__22704_22709 = G__22721;
              continue;
            } else {
              var k_22722__$1 = cljs.core.first.call(null, seq__22701_22716__$1);
              remove_attr_BANG_.call(null, elem__$1, k_22722__$1);
              var G__22723 = cljs.core.next.call(null, seq__22701_22716__$1);
              var G__22724 = null;
              var G__22725 = 0;
              var G__22726 = 0;
              seq__22701_22706 = G__22723;
              chunk__22702_22707 = G__22724;
              count__22703_22708 = G__22725;
              i__22704_22709 = G__22726;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem__$1;
    };
    var G__22705 = function(elem, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22705__delegate.call(this, elem, k, ks);
    };
    G__22705.cljs$lang$maxFixedArity = 2;
    G__22705.cljs$lang$applyTo = function(arglist__22727) {
      var elem = cljs.core.first(arglist__22727);
      arglist__22727 = cljs.core.next(arglist__22727);
      var k = cljs.core.first(arglist__22727);
      var ks = cljs.core.rest(arglist__22727);
      return G__22705__delegate(elem, k, ks);
    };
    G__22705.cljs$core$IFn$_invoke$arity$variadic = G__22705__delegate;
    return G__22705;
  }();
  remove_attr_BANG_ = function(elem, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return remove_attr_BANG___2.call(this, elem, k);
      default:
        return remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic(elem, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_attr_BANG_.cljs$lang$maxFixedArity = 2;
  remove_attr_BANG_.cljs$lang$applyTo = remove_attr_BANG___3.cljs$lang$applyTo;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = remove_attr_BANG___2;
  remove_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = remove_attr_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return remove_attr_BANG_;
}();
dommy.attrs.attr = function attr(elem, k) {
  if (cljs.core.truth_(k)) {
    return dommy.template.__GT_node_like.call(null, elem).getAttribute(dommy.utils.string_or_keyword.call(null, k));
  } else {
    return null;
  }
};
dommy.attrs.toggle_attr_BANG_ = function() {
  var toggle_attr_BANG_ = null;
  var toggle_attr_BANG___2 = function(elem, k) {
    return toggle_attr_BANG_.call(null, elem, k, cljs.core.boolean$.call(null, dommy.attrs.attr.call(null, elem, k)));
  };
  var toggle_attr_BANG___3 = function(elem, k, add_QMARK_) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    if (add_QMARK_) {
      return dommy.attrs.set_attr_BANG_.call(null, elem__$1, k);
    } else {
      return dommy.attrs.remove_attr_BANG_.call(null, elem__$1, k);
    }
  };
  toggle_attr_BANG_ = function(elem, k, add_QMARK_) {
    switch(arguments.length) {
      case 2:
        return toggle_attr_BANG___2.call(this, elem, k);
      case 3:
        return toggle_attr_BANG___3.call(this, elem, k, add_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_attr_BANG___2;
  toggle_attr_BANG_.cljs$core$IFn$_invoke$arity$3 = toggle_attr_BANG___3;
  return toggle_attr_BANG_;
}();
dommy.attrs.hidden_QMARK_ = function hidden_QMARK_(elem) {
  return "none" === dommy.template.__GT_node_like.call(null, elem).style.display;
};
dommy.attrs.toggle_BANG_ = function() {
  var toggle_BANG_ = null;
  var toggle_BANG___1 = function(elem) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    toggle_BANG_.call(null, elem__$1, dommy.attrs.hidden_QMARK_.call(null, elem__$1));
    return elem__$1;
  };
  var toggle_BANG___2 = function(elem, show_QMARK_) {
    var G__22729 = dommy.template.__GT_node_like.call(null, elem);
    G__22729.style.display = show_QMARK_ ? "" : "none";
    return G__22729;
  };
  toggle_BANG_ = function(elem, show_QMARK_) {
    switch(arguments.length) {
      case 1:
        return toggle_BANG___1.call(this, elem);
      case 2:
        return toggle_BANG___2.call(this, elem, show_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  toggle_BANG_.cljs$core$IFn$_invoke$arity$1 = toggle_BANG___1;
  toggle_BANG_.cljs$core$IFn$_invoke$arity$2 = toggle_BANG___2;
  return toggle_BANG_;
}();
dommy.attrs.hide_BANG_ = function hide_BANG_(elem) {
  var G__22731 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__22731, false);
  return G__22731;
};
dommy.attrs.show_BANG_ = function show_BANG_(elem) {
  var G__22733 = dommy.template.__GT_node_like.call(null, elem);
  dommy.attrs.toggle_BANG_.call(null, G__22733, true);
  return G__22733;
};
dommy.attrs.bounding_client_rect = function bounding_client_rect(elem) {
  var r = dommy.template.__GT_node_like.call(null, elem).getBoundingClientRect();
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "top", "top", 1014019271), r.top, new cljs.core.Keyword(null, "bottom", "bottom", 3925642653), r.bottom, new cljs.core.Keyword(null, "left", "left", 1017222009), r.left, new cljs.core.Keyword(null, "right", "right", 1122416014), r.right, new cljs.core.Keyword(null, "width", "width", 1127031096), r.width, new cljs.core.Keyword(null, "height", "height", 4087841945), r.height], null);
};
dommy.attrs.scroll_into_view = function scroll_into_view(elem, align_with_top_QMARK_) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var top = (new cljs.core.Keyword(null, "top", "top", 1014019271)).cljs$core$IFn$_invoke$arity$1(dommy.attrs.bounding_client_rect.call(null, elem__$1));
  if (window.innerHeight < top + elem__$1.offsetHeight) {
    return elem__$1.scrollIntoView(align_with_top_QMARK_);
  } else {
    return null;
  }
};
goog.provide("dommy.template");
goog.require("cljs.core");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.template._PLUS_svg_ns_PLUS_ = "http://www.w3.org/2000/svg";
dommy.template._PLUS_svg_tags_PLUS_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, ["path", null, "svg", null, "text", null, "line", null, "polygon", null, "textPath", null, "polyline", null, "g", null, "clipPath", null, "rect", null, "circle", null], null), null);
dommy.template.PElement = function() {
  var obj22735 = {};
  return obj22735;
}();
dommy.template._elem = function _elem(this$) {
  if (function() {
    var and__3565__auto__ = this$;
    if (and__3565__auto__) {
      return this$.dommy$template$PElement$_elem$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return this$.dommy$template$PElement$_elem$arity$1(this$);
  } else {
    var x__4204__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3577__auto__ = dommy.template._elem[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = dommy.template._elem["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PElement.-elem", this$);
        }
      }
    }().call(null, this$);
  }
};
dommy.template.next_css_index = function next_css_index(s, start_idx) {
  var id_idx = s.indexOf("#", start_idx);
  var class_idx = s.indexOf(".", start_idx);
  var idx = Math.min(id_idx, class_idx);
  if (idx < 0) {
    return Math.max(id_idx, class_idx);
  } else {
    return idx;
  }
};
dommy.template.base_element = function base_element(node_key) {
  var node_str = cljs.core.subs.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(node_key), 1);
  var base_idx = dommy.template.next_css_index.call(null, node_str, 0);
  var tag = base_idx > 0 ? node_str.substring(0, base_idx) : base_idx === 0 ? "div" : new cljs.core.Keyword(null, "else", "else", 1017020587) ? node_str : null;
  var node = cljs.core.truth_(dommy.template._PLUS_svg_tags_PLUS_.call(null, tag)) ? document.createElementNS(dommy.template._PLUS_svg_ns_PLUS_, tag) : document.createElement(tag);
  if (base_idx >= 0) {
    var str_22738 = node_str.substring(base_idx);
    while (true) {
      var next_idx_22739 = dommy.template.next_css_index.call(null, str_22738, 1);
      var frag_22740 = next_idx_22739 >= 0 ? str_22738.substring(0, next_idx_22739) : str_22738;
      var G__22737_22741 = frag_22740.charAt(0);
      if (cljs.core._EQ_.call(null, "#", G__22737_22741)) {
        node.setAttribute("id", frag_22740.substring(1));
      } else {
        if (cljs.core._EQ_.call(null, ".", G__22737_22741)) {
          dommy.attrs.add_class_BANG_.call(null, node, frag_22740.substring(1));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(frag_22740.charAt(0)));
          } else {
          }
        }
      }
      if (next_idx_22739 >= 0) {
        var G__22742 = str_22738.substring(next_idx_22739);
        str_22738 = G__22742;
        continue;
      } else {
      }
      break;
    }
  } else {
  }
  return node;
};
dommy.template.throw_unable_to_make_node = function throw_unable_to_make_node(node_data) {
  throw "Don't know how to make node from: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, node_data));
};
dommy.template.__GT_document_fragment = function() {
  var __GT_document_fragment = null;
  var __GT_document_fragment__1 = function(data) {
    return __GT_document_fragment.call(null, document.createDocumentFragment(), data);
  };
  var __GT_document_fragment__2 = function(result_frag, data) {
    if (function() {
      var G__22748 = data;
      if (G__22748) {
        var bit__4227__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3577__auto__ = bit__4227__auto__;
          if (cljs.core.truth_(or__3577__auto__)) {
            return or__3577__auto__;
          } else {
            return G__22748.dommy$template$PElement$;
          }
        }())) {
          return true;
        } else {
          if (!G__22748.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__22748);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__22748);
      }
    }()) {
      result_frag.appendChild(dommy.template._elem.call(null, data));
      return result_frag;
    } else {
      if (cljs.core.seq_QMARK_.call(null, data)) {
        var seq__22749_22753 = cljs.core.seq.call(null, data);
        var chunk__22750_22754 = null;
        var count__22751_22755 = 0;
        var i__22752_22756 = 0;
        while (true) {
          if (i__22752_22756 < count__22751_22755) {
            var child_22757 = cljs.core._nth.call(null, chunk__22750_22754, i__22752_22756);
            __GT_document_fragment.call(null, result_frag, child_22757);
            var G__22758 = seq__22749_22753;
            var G__22759 = chunk__22750_22754;
            var G__22760 = count__22751_22755;
            var G__22761 = i__22752_22756 + 1;
            seq__22749_22753 = G__22758;
            chunk__22750_22754 = G__22759;
            count__22751_22755 = G__22760;
            i__22752_22756 = G__22761;
            continue;
          } else {
            var temp__4126__auto___22762 = cljs.core.seq.call(null, seq__22749_22753);
            if (temp__4126__auto___22762) {
              var seq__22749_22763__$1 = temp__4126__auto___22762;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__22749_22763__$1)) {
                var c__4333__auto___22764 = cljs.core.chunk_first.call(null, seq__22749_22763__$1);
                var G__22765 = cljs.core.chunk_rest.call(null, seq__22749_22763__$1);
                var G__22766 = c__4333__auto___22764;
                var G__22767 = cljs.core.count.call(null, c__4333__auto___22764);
                var G__22768 = 0;
                seq__22749_22753 = G__22765;
                chunk__22750_22754 = G__22766;
                count__22751_22755 = G__22767;
                i__22752_22756 = G__22768;
                continue;
              } else {
                var child_22769 = cljs.core.first.call(null, seq__22749_22763__$1);
                __GT_document_fragment.call(null, result_frag, child_22769);
                var G__22770 = cljs.core.next.call(null, seq__22749_22763__$1);
                var G__22771 = null;
                var G__22772 = 0;
                var G__22773 = 0;
                seq__22749_22753 = G__22770;
                chunk__22750_22754 = G__22771;
                count__22751_22755 = G__22772;
                i__22752_22756 = G__22773;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return result_frag;
      } else {
        if (data == null) {
          return result_frag;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return dommy.template.throw_unable_to_make_node.call(null, data);
          } else {
            return null;
          }
        }
      }
    }
  };
  __GT_document_fragment = function(result_frag, data) {
    switch(arguments.length) {
      case 1:
        return __GT_document_fragment__1.call(this, result_frag);
      case 2:
        return __GT_document_fragment__2.call(this, result_frag, data);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$1 = __GT_document_fragment__1;
  __GT_document_fragment.cljs$core$IFn$_invoke$arity$2 = __GT_document_fragment__2;
  return __GT_document_fragment;
}();
dommy.template.__GT_node_like = function __GT_node_like(data) {
  if (function() {
    var G__22775 = data;
    if (G__22775) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto__ = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return G__22775.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__22775.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__22775);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__22775);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.__GT_document_fragment.call(null, data);
  }
};
dommy.template.compound_element = function compound_element(p__22776) {
  var vec__22796 = p__22776;
  var tag_name = cljs.core.nth.call(null, vec__22796, 0, null);
  var maybe_attrs = cljs.core.nth.call(null, vec__22796, 1, null);
  var children = cljs.core.nthnext.call(null, vec__22796, 2);
  var n = dommy.template.base_element.call(null, tag_name);
  var attrs = cljs.core.map_QMARK_.call(null, maybe_attrs) && !function() {
    var G__22798 = maybe_attrs;
    if (G__22798) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto__ = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return G__22798.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__22798.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__22798);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__22798);
    }
  }() ? maybe_attrs : null;
  var children__$1 = cljs.core.truth_(attrs) ? children : cljs.core.cons.call(null, maybe_attrs, children);
  var seq__22799_22815 = cljs.core.seq.call(null, attrs);
  var chunk__22800_22816 = null;
  var count__22801_22817 = 0;
  var i__22802_22818 = 0;
  while (true) {
    if (i__22802_22818 < count__22801_22817) {
      var vec__22803_22819 = cljs.core._nth.call(null, chunk__22800_22816, i__22802_22818);
      var k_22820 = cljs.core.nth.call(null, vec__22803_22819, 0, null);
      var v_22821 = cljs.core.nth.call(null, vec__22803_22819, 1, null);
      var G__22804_22822 = k_22820 instanceof cljs.core.Keyword ? k_22820.fqn : null;
      switch(G__22804_22822) {
        case "classes":
          var seq__22805_22824 = cljs.core.seq.call(null, v_22821);
          var chunk__22806_22825 = null;
          var count__22807_22826 = 0;
          var i__22808_22827 = 0;
          while (true) {
            if (i__22808_22827 < count__22807_22826) {
              var c_22828 = cljs.core._nth.call(null, chunk__22806_22825, i__22808_22827);
              dommy.attrs.add_class_BANG_.call(null, n, c_22828);
              var G__22829 = seq__22805_22824;
              var G__22830 = chunk__22806_22825;
              var G__22831 = count__22807_22826;
              var G__22832 = i__22808_22827 + 1;
              seq__22805_22824 = G__22829;
              chunk__22806_22825 = G__22830;
              count__22807_22826 = G__22831;
              i__22808_22827 = G__22832;
              continue;
            } else {
              var temp__4126__auto___22833 = cljs.core.seq.call(null, seq__22805_22824);
              if (temp__4126__auto___22833) {
                var seq__22805_22834__$1 = temp__4126__auto___22833;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__22805_22834__$1)) {
                  var c__4333__auto___22835 = cljs.core.chunk_first.call(null, seq__22805_22834__$1);
                  var G__22836 = cljs.core.chunk_rest.call(null, seq__22805_22834__$1);
                  var G__22837 = c__4333__auto___22835;
                  var G__22838 = cljs.core.count.call(null, c__4333__auto___22835);
                  var G__22839 = 0;
                  seq__22805_22824 = G__22836;
                  chunk__22806_22825 = G__22837;
                  count__22807_22826 = G__22838;
                  i__22808_22827 = G__22839;
                  continue;
                } else {
                  var c_22840 = cljs.core.first.call(null, seq__22805_22834__$1);
                  dommy.attrs.add_class_BANG_.call(null, n, c_22840);
                  var G__22841 = cljs.core.next.call(null, seq__22805_22834__$1);
                  var G__22842 = null;
                  var G__22843 = 0;
                  var G__22844 = 0;
                  seq__22805_22824 = G__22841;
                  chunk__22806_22825 = G__22842;
                  count__22807_22826 = G__22843;
                  i__22808_22827 = G__22844;
                  continue;
                }
              } else {
              }
            }
            break;
          }
          break;
        case "class":
          dommy.attrs.add_class_BANG_.call(null, n, v_22821);
          break;
        default:
          dommy.attrs.set_attr_BANG_.call(null, n, k_22820, v_22821);
      }
      var G__22845 = seq__22799_22815;
      var G__22846 = chunk__22800_22816;
      var G__22847 = count__22801_22817;
      var G__22848 = i__22802_22818 + 1;
      seq__22799_22815 = G__22845;
      chunk__22800_22816 = G__22846;
      count__22801_22817 = G__22847;
      i__22802_22818 = G__22848;
      continue;
    } else {
      var temp__4126__auto___22849 = cljs.core.seq.call(null, seq__22799_22815);
      if (temp__4126__auto___22849) {
        var seq__22799_22850__$1 = temp__4126__auto___22849;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__22799_22850__$1)) {
          var c__4333__auto___22851 = cljs.core.chunk_first.call(null, seq__22799_22850__$1);
          var G__22852 = cljs.core.chunk_rest.call(null, seq__22799_22850__$1);
          var G__22853 = c__4333__auto___22851;
          var G__22854 = cljs.core.count.call(null, c__4333__auto___22851);
          var G__22855 = 0;
          seq__22799_22815 = G__22852;
          chunk__22800_22816 = G__22853;
          count__22801_22817 = G__22854;
          i__22802_22818 = G__22855;
          continue;
        } else {
          var vec__22809_22856 = cljs.core.first.call(null, seq__22799_22850__$1);
          var k_22857 = cljs.core.nth.call(null, vec__22809_22856, 0, null);
          var v_22858 = cljs.core.nth.call(null, vec__22809_22856, 1, null);
          var G__22810_22859 = k_22857 instanceof cljs.core.Keyword ? k_22857.fqn : null;
          switch(G__22810_22859) {
            case "classes":
              var seq__22811_22861 = cljs.core.seq.call(null, v_22858);
              var chunk__22812_22862 = null;
              var count__22813_22863 = 0;
              var i__22814_22864 = 0;
              while (true) {
                if (i__22814_22864 < count__22813_22863) {
                  var c_22865 = cljs.core._nth.call(null, chunk__22812_22862, i__22814_22864);
                  dommy.attrs.add_class_BANG_.call(null, n, c_22865);
                  var G__22866 = seq__22811_22861;
                  var G__22867 = chunk__22812_22862;
                  var G__22868 = count__22813_22863;
                  var G__22869 = i__22814_22864 + 1;
                  seq__22811_22861 = G__22866;
                  chunk__22812_22862 = G__22867;
                  count__22813_22863 = G__22868;
                  i__22814_22864 = G__22869;
                  continue;
                } else {
                  var temp__4126__auto___22870__$1 = cljs.core.seq.call(null, seq__22811_22861);
                  if (temp__4126__auto___22870__$1) {
                    var seq__22811_22871__$1 = temp__4126__auto___22870__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__22811_22871__$1)) {
                      var c__4333__auto___22872 = cljs.core.chunk_first.call(null, seq__22811_22871__$1);
                      var G__22873 = cljs.core.chunk_rest.call(null, seq__22811_22871__$1);
                      var G__22874 = c__4333__auto___22872;
                      var G__22875 = cljs.core.count.call(null, c__4333__auto___22872);
                      var G__22876 = 0;
                      seq__22811_22861 = G__22873;
                      chunk__22812_22862 = G__22874;
                      count__22813_22863 = G__22875;
                      i__22814_22864 = G__22876;
                      continue;
                    } else {
                      var c_22877 = cljs.core.first.call(null, seq__22811_22871__$1);
                      dommy.attrs.add_class_BANG_.call(null, n, c_22877);
                      var G__22878 = cljs.core.next.call(null, seq__22811_22871__$1);
                      var G__22879 = null;
                      var G__22880 = 0;
                      var G__22881 = 0;
                      seq__22811_22861 = G__22878;
                      chunk__22812_22862 = G__22879;
                      count__22813_22863 = G__22880;
                      i__22814_22864 = G__22881;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              break;
            case "class":
              dommy.attrs.add_class_BANG_.call(null, n, v_22858);
              break;
            default:
              dommy.attrs.set_attr_BANG_.call(null, n, k_22857, v_22858);
          }
          var G__22882 = cljs.core.next.call(null, seq__22799_22850__$1);
          var G__22883 = null;
          var G__22884 = 0;
          var G__22885 = 0;
          seq__22799_22815 = G__22882;
          chunk__22800_22816 = G__22883;
          count__22801_22817 = G__22884;
          i__22802_22818 = G__22885;
          continue;
        }
      } else {
      }
    }
    break;
  }
  n.appendChild(dommy.template.__GT_node_like.call(null, children__$1));
  return n;
};
dommy.template.PElement["string"] = true;
dommy.template._elem["string"] = function(this$) {
  if (this$ instanceof cljs.core.Keyword) {
    return dommy.template.base_element.call(null, this$);
  } else {
    return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
  }
};
dommy.template.PElement["number"] = true;
dommy.template._elem["number"] = function(this$) {
  return document.createTextNode("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$));
};
cljs.core.PersistentVector.prototype.dommy$template$PElement$ = true;
cljs.core.PersistentVector.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return dommy.template.compound_element.call(null, this$__$1);
};
Text.prototype.dommy$template$PElement$ = true;
Text.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Comment.prototype.dommy$template$PElement$ = true;
Comment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
Element.prototype.dommy$template$PElement$ = true;
Element.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1;
};
if (typeof HTMLElement !== "undefined") {
  HTMLElement.prototype.dommy$template$PElement$ = true;
  HTMLElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} else {
}
if (typeof DocumentFragment !== "undefined") {
  DocumentFragment.prototype.dommy$template$PElement$ = true;
  DocumentFragment.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} else {
}
if (typeof Document !== "undefined") {
  Document.prototype.dommy$template$PElement$ = true;
  Document.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} else {
}
if (typeof HTMLDocument !== "undefined") {
  HTMLDocument.prototype.dommy$template$PElement$ = true;
  HTMLDocument.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} else {
}
if (typeof SVGElement !== "undefined") {
  SVGElement.prototype.dommy$template$PElement$ = true;
  SVGElement.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} else {
}
if (typeof Window !== "undefined") {
  Window.prototype.dommy$template$PElement$ = true;
  Window.prototype.dommy$template$PElement$_elem$arity$1 = function(this$) {
    var this$__$1 = this;
    return this$__$1;
  };
} else {
}
dommy.template.node = function node(data) {
  if (function() {
    var G__22887 = data;
    if (G__22887) {
      var bit__4227__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3577__auto__ = bit__4227__auto__;
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return G__22887.dommy$template$PElement$;
        }
      }())) {
        return true;
      } else {
        if (!G__22887.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__22887);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, dommy.template.PElement, G__22887);
    }
  }()) {
    return dommy.template._elem.call(null, data);
  } else {
    return dommy.template.throw_unable_to_make_node.call(null, data);
  }
};
dommy.template.html__GT_nodes = function html__GT_nodes(html__$1) {
  var parent = document.createElement("div");
  parent.insertAdjacentHTML("beforeend", html__$1);
  return cljs.core.seq.call(null, Array.prototype.slice.call(parent.childNodes));
};
goog.provide("dommy.core");
goog.require("cljs.core");
goog.require("dommy.template");
goog.require("dommy.template");
goog.require("dommy.attrs");
goog.require("dommy.attrs");
goog.require("dommy.utils");
goog.require("dommy.utils");
goog.require("clojure.string");
goog.require("clojure.string");
dommy.core.has_class_QMARK_ = dommy.attrs.has_class_QMARK_;
dommy.core.add_class_BANG_ = dommy.attrs.add_class_BANG_;
dommy.core.remove_class_BANG_ = dommy.attrs.remove_class_BANG_;
dommy.core.toggle_class_BANG_ = dommy.attrs.toggle_class_BANG_;
dommy.core.set_attr_BANG_ = dommy.attrs.set_attr_BANG_;
dommy.core.set_style_BANG_ = dommy.attrs.set_style_BANG_;
dommy.core.set_px_BANG_ = dommy.attrs.set_px_BANG_;
dommy.core.px = dommy.attrs.px;
dommy.core.style_str = dommy.attrs.style_str;
dommy.core.style = dommy.attrs.style;
dommy.core.remove_attr_BANG_ = dommy.attrs.remove_attr_BANG_;
dommy.core.toggle_attr_BANG_ = dommy.attrs.toggle_attr_BANG_;
dommy.core.attr = dommy.attrs.attr;
dommy.core.hidden_QMARK_ = dommy.attrs.hidden_QMARK_;
dommy.core.toggle_BANG_ = dommy.attrs.toggle_BANG_;
dommy.core.hide_BANG_ = dommy.attrs.hide_BANG_;
dommy.core.show_BANG_ = dommy.attrs.show_BANG_;
dommy.core.bounding_client_rect = dommy.attrs.bounding_client_rect;
dommy.core.scroll_into_view = dommy.attrs.scroll_into_view;
dommy.core.dissoc_in = dommy.utils.dissoc_in;
dommy.core.__GT_Array = dommy.utils.__GT_Array;
dommy.core.set_html_BANG_ = function set_html_BANG_(elem, html__$1) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.innerHTML = html__$1;
  return elem__$1;
};
dommy.core.html = function html__$1(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML;
};
dommy.core.set_text_BANG_ = function set_text_BANG_(elem, text) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var prop = cljs.core.truth_(elem__$1.textContent) ? "textContent" : "innerText";
  elem__$1[prop] = text;
  return elem__$1;
};
dommy.core.text = function text(elem) {
  var or__3577__auto__ = elem.textContent;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    return elem.innerText;
  }
};
dommy.core.value = function value(elem) {
  return dommy.template.__GT_node_like.call(null, elem).value;
};
dommy.core.set_value_BANG_ = function set_value_BANG_(elem, value) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  elem__$1.value = value;
  return elem__$1;
};
dommy.core.append_BANG_ = function() {
  var append_BANG_ = null;
  var append_BANG___2 = function(parent, child) {
    var G__22058 = dommy.template.__GT_node_like.call(null, parent);
    G__22058.appendChild(dommy.template.__GT_node_like.call(null, child));
    return G__22058;
  };
  var append_BANG___3 = function() {
    var G__22063__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__22059_22064 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__22060_22065 = null;
      var count__22061_22066 = 0;
      var i__22062_22067 = 0;
      while (true) {
        if (i__22062_22067 < count__22061_22066) {
          var c_22068 = cljs.core._nth.call(null, chunk__22060_22065, i__22062_22067);
          append_BANG_.call(null, parent__$1, c_22068);
          var G__22069 = seq__22059_22064;
          var G__22070 = chunk__22060_22065;
          var G__22071 = count__22061_22066;
          var G__22072 = i__22062_22067 + 1;
          seq__22059_22064 = G__22069;
          chunk__22060_22065 = G__22070;
          count__22061_22066 = G__22071;
          i__22062_22067 = G__22072;
          continue;
        } else {
          var temp__4126__auto___22073 = cljs.core.seq.call(null, seq__22059_22064);
          if (temp__4126__auto___22073) {
            var seq__22059_22074__$1 = temp__4126__auto___22073;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22059_22074__$1)) {
              var c__4333__auto___22075 = cljs.core.chunk_first.call(null, seq__22059_22074__$1);
              var G__22076 = cljs.core.chunk_rest.call(null, seq__22059_22074__$1);
              var G__22077 = c__4333__auto___22075;
              var G__22078 = cljs.core.count.call(null, c__4333__auto___22075);
              var G__22079 = 0;
              seq__22059_22064 = G__22076;
              chunk__22060_22065 = G__22077;
              count__22061_22066 = G__22078;
              i__22062_22067 = G__22079;
              continue;
            } else {
              var c_22080 = cljs.core.first.call(null, seq__22059_22074__$1);
              append_BANG_.call(null, parent__$1, c_22080);
              var G__22081 = cljs.core.next.call(null, seq__22059_22074__$1);
              var G__22082 = null;
              var G__22083 = 0;
              var G__22084 = 0;
              seq__22059_22064 = G__22081;
              chunk__22060_22065 = G__22082;
              count__22061_22066 = G__22083;
              i__22062_22067 = G__22084;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__22063 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22063__delegate.call(this, parent, child, more_children);
    };
    G__22063.cljs$lang$maxFixedArity = 2;
    G__22063.cljs$lang$applyTo = function(arglist__22085) {
      var parent = cljs.core.first(arglist__22085);
      arglist__22085 = cljs.core.next(arglist__22085);
      var child = cljs.core.first(arglist__22085);
      var more_children = cljs.core.rest(arglist__22085);
      return G__22063__delegate(parent, child, more_children);
    };
    G__22063.cljs$core$IFn$_invoke$arity$variadic = G__22063__delegate;
    return G__22063;
  }();
  append_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return append_BANG___2.call(this, parent, child);
      default:
        return append_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  append_BANG_.cljs$lang$maxFixedArity = 2;
  append_BANG_.cljs$lang$applyTo = append_BANG___3.cljs$lang$applyTo;
  append_BANG_.cljs$core$IFn$_invoke$arity$2 = append_BANG___2;
  append_BANG_.cljs$core$IFn$_invoke$arity$variadic = append_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return append_BANG_;
}();
dommy.core.prepend_BANG_ = function() {
  var prepend_BANG_ = null;
  var prepend_BANG___2 = function(parent, child) {
    var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
    return parent__$1.insertBefore(dommy.template.__GT_node_like.call(null, child), parent__$1.firstChild);
  };
  var prepend_BANG___3 = function() {
    var G__22094__delegate = function(parent, child, more_children) {
      var parent__$1 = dommy.template.__GT_node_like.call(null, parent);
      var seq__22090_22095 = cljs.core.seq.call(null, cljs.core.cons.call(null, child, more_children));
      var chunk__22091_22096 = null;
      var count__22092_22097 = 0;
      var i__22093_22098 = 0;
      while (true) {
        if (i__22093_22098 < count__22092_22097) {
          var c_22099 = cljs.core._nth.call(null, chunk__22091_22096, i__22093_22098);
          prepend_BANG_.call(null, parent__$1, c_22099);
          var G__22100 = seq__22090_22095;
          var G__22101 = chunk__22091_22096;
          var G__22102 = count__22092_22097;
          var G__22103 = i__22093_22098 + 1;
          seq__22090_22095 = G__22100;
          chunk__22091_22096 = G__22101;
          count__22092_22097 = G__22102;
          i__22093_22098 = G__22103;
          continue;
        } else {
          var temp__4126__auto___22104 = cljs.core.seq.call(null, seq__22090_22095);
          if (temp__4126__auto___22104) {
            var seq__22090_22105__$1 = temp__4126__auto___22104;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22090_22105__$1)) {
              var c__4333__auto___22106 = cljs.core.chunk_first.call(null, seq__22090_22105__$1);
              var G__22107 = cljs.core.chunk_rest.call(null, seq__22090_22105__$1);
              var G__22108 = c__4333__auto___22106;
              var G__22109 = cljs.core.count.call(null, c__4333__auto___22106);
              var G__22110 = 0;
              seq__22090_22095 = G__22107;
              chunk__22091_22096 = G__22108;
              count__22092_22097 = G__22109;
              i__22093_22098 = G__22110;
              continue;
            } else {
              var c_22111 = cljs.core.first.call(null, seq__22090_22105__$1);
              prepend_BANG_.call(null, parent__$1, c_22111);
              var G__22112 = cljs.core.next.call(null, seq__22090_22105__$1);
              var G__22113 = null;
              var G__22114 = 0;
              var G__22115 = 0;
              seq__22090_22095 = G__22112;
              chunk__22091_22096 = G__22113;
              count__22092_22097 = G__22114;
              i__22093_22098 = G__22115;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return parent__$1;
    };
    var G__22094 = function(parent, child, var_args) {
      var more_children = null;
      if (arguments.length > 2) {
        more_children = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__22094__delegate.call(this, parent, child, more_children);
    };
    G__22094.cljs$lang$maxFixedArity = 2;
    G__22094.cljs$lang$applyTo = function(arglist__22116) {
      var parent = cljs.core.first(arglist__22116);
      arglist__22116 = cljs.core.next(arglist__22116);
      var child = cljs.core.first(arglist__22116);
      var more_children = cljs.core.rest(arglist__22116);
      return G__22094__delegate(parent, child, more_children);
    };
    G__22094.cljs$core$IFn$_invoke$arity$variadic = G__22094__delegate;
    return G__22094;
  }();
  prepend_BANG_ = function(parent, child, var_args) {
    var more_children = var_args;
    switch(arguments.length) {
      case 2:
        return prepend_BANG___2.call(this, parent, child);
      default:
        return prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic(parent, child, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prepend_BANG_.cljs$lang$maxFixedArity = 2;
  prepend_BANG_.cljs$lang$applyTo = prepend_BANG___3.cljs$lang$applyTo;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$2 = prepend_BANG___2;
  prepend_BANG_.cljs$core$IFn$_invoke$arity$variadic = prepend_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return prepend_BANG_;
}();
dommy.core.insert_before_BANG_ = function insert_before_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  if (cljs.core.truth_(other__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "other", "other", -1534461751, null)))));
  }
  other__$1.parentNode.insertBefore(actual_node, other__$1);
  return actual_node;
};
dommy.core.insert_after_BANG_ = function insert_after_BANG_(elem, other) {
  var actual_node = dommy.template.__GT_node_like.call(null, elem);
  var other__$1 = dommy.template.__GT_node_like.call(null, other);
  var parent = other__$1.parentNode;
  var temp__4124__auto___22117 = other__$1.nextSibling;
  if (cljs.core.truth_(temp__4124__auto___22117)) {
    var next_22118 = temp__4124__auto___22117;
    parent.insertBefore(actual_node, next_22118);
  } else {
    parent.appendChild(actual_node);
  }
  return actual_node;
};
dommy.core.replace_BANG_ = function replace_BANG_(elem, new$) {
  var new$__$1 = dommy.template.__GT_node_like.call(null, new$);
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  if (cljs.core.truth_(elem__$1.parentNode)) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, ".-parentNode", ".-parentNode", 499016324, null), new cljs.core.Symbol(null, "elem", "elem", -1637415608, null)))));
  }
  elem__$1.parentNode.replaceChild(new$__$1, elem__$1);
  return new$__$1;
};
dommy.core.replace_contents_BANG_ = function replace_contents_BANG_(parent, node_like) {
  var G__22120 = dommy.template.__GT_node_like.call(null, parent);
  G__22120.innerHTML = "";
  dommy.core.append_BANG_.call(null, G__22120, node_like);
  return G__22120;
};
dommy.core.remove_BANG_ = function remove_BANG_(elem) {
  var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
  var G__22122 = elem__$1.parentNode;
  G__22122.removeChild(elem__$1);
  return G__22122;
};
dommy.core.clear_BANG_ = function clear_BANG_(elem) {
  return dommy.template.__GT_node_like.call(null, elem).innerHTML = "";
};
dommy.core.selector = function selector(data) {
  if (cljs.core.coll_QMARK_.call(null, data)) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, selector, data));
  } else {
    if (typeof data === "string" || data instanceof cljs.core.Keyword) {
      return cljs.core.name.call(null, data);
    } else {
      return null;
    }
  }
};
dommy.core.selector_map = function selector_map(template, key_selectors_map) {
  var container = dommy.template.__GT_node_like.call(null, template);
  if (!cljs.core.contains_QMARK_.call(null, key_selectors_map, new cljs.core.Keyword(null, "container", "container", 602947571))) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "contains?", "contains?", -2051487815, null), new cljs.core.Symbol(null, "key-selectors-map", "key-selectors-map", 19054414, null), new cljs.core.Keyword(null, "container", "container", 602947571))))));
  }
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "container", "container", 602947571), container], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(container) {
    return function(p__22128) {
      var vec__22129 = p__22128;
      var k = cljs.core.nth.call(null, vec__22129, 0, null);
      var v = cljs.core.nth.call(null, vec__22129, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.truth_((new cljs.core.Keyword(null, "live", "live", 1017226334)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v))) ? function() {
        if (typeof dommy.core.t22130 !== "undefined") {
        } else {
          dommy.core.t22130 = function(v, k, vec__22129, p__22128, container, key_selectors_map, template, selector_map, meta22131) {
            this.v = v;
            this.k = k;
            this.vec__22129 = vec__22129;
            this.p__22128 = p__22128;
            this.container = container;
            this.key_selectors_map = key_selectors_map;
            this.template = template;
            this.selector_map = selector_map;
            this.meta22131 = meta22131;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 425984;
          };
          dommy.core.t22130.cljs$lang$type = true;
          dommy.core.t22130.cljs$lang$ctorStr = "dommy.core/t22130";
          dommy.core.t22130.cljs$lang$ctorPrWriter = function(vec__22129, k, v, container) {
            return function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
              return cljs.core._write.call(null, writer__4145__auto__, "dommy.core/t22130");
            };
          }(vec__22129, k, v, container);
          dommy.core.t22130.prototype.cljs$core$IDeref$_deref$arity$1 = function(vec__22129, k, v, container) {
            return function(this$) {
              var self__ = this;
              var this$__$1 = this;
              return dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, self__.container).querySelectorAll(dommy.core.selector.call(null, self__.v)));
            };
          }(vec__22129, k, v, container);
          dommy.core.t22130.prototype.cljs$core$IMeta$_meta$arity$1 = function(vec__22129, k, v, container) {
            return function(_22132) {
              var self__ = this;
              var _22132__$1 = this;
              return self__.meta22131;
            };
          }(vec__22129, k, v, container);
          dommy.core.t22130.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(vec__22129, k, v, container) {
            return function(_22132, meta22131__$1) {
              var self__ = this;
              var _22132__$1 = this;
              return new dommy.core.t22130(self__.v, self__.k, self__.vec__22129, self__.p__22128, self__.container, self__.key_selectors_map, self__.template, self__.selector_map, meta22131__$1);
            };
          }(vec__22129, k, v, container);
          dommy.core.__GT_t22130 = function(vec__22129, k, v, container) {
            return function __GT_t22130(v__$1, k__$1, vec__22129__$1, p__22128__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta22131) {
              return new dommy.core.t22130(v__$1, k__$1, vec__22129__$1, p__22128__$1, container__$1, key_selectors_map__$1, template__$1, selector_map__$1, meta22131);
            };
          }(vec__22129, k, v, container);
        }
        return new dommy.core.t22130(v, k, vec__22129, p__22128, container, key_selectors_map, template, selector_map, null);
      }() : dommy.template.__GT_node_like.call(null, container).querySelector(dommy.core.selector.call(null, v))], null);
    };
  }(container), key_selectors_map)));
};
dommy.core.ancestor_nodes = function ancestor_nodes(elem) {
  return cljs.core.take_while.call(null, cljs.core.identity, cljs.core.iterate.call(null, function(p1__22133_SHARP_) {
    return p1__22133_SHARP_.parentNode;
  }, dommy.template.__GT_node_like.call(null, elem)));
};
dommy.core.matches_pred = function() {
  var matches_pred = null;
  var matches_pred__1 = function(selector) {
    return matches_pred.call(null, document, selector);
  };
  var matches_pred__2 = function(base, selector) {
    var matches = dommy.utils.__GT_Array.call(null, dommy.template.__GT_node_like.call(null, dommy.template.__GT_node_like.call(null, base)).querySelectorAll(dommy.core.selector.call(null, selector)));
    return function(matches) {
      return function(elem) {
        return matches.indexOf(elem) >= 0;
      };
    }(matches);
  };
  matches_pred = function(base, selector) {
    switch(arguments.length) {
      case 1:
        return matches_pred__1.call(this, base);
      case 2:
        return matches_pred__2.call(this, base, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  matches_pred.cljs$core$IFn$_invoke$arity$1 = matches_pred__1;
  matches_pred.cljs$core$IFn$_invoke$arity$2 = matches_pred__2;
  return matches_pred;
}();
dommy.core.closest = function() {
  var closest = null;
  var closest__2 = function(elem, selector) {
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, selector), dommy.core.ancestor_nodes.call(null, dommy.template.__GT_node_like.call(null, elem))));
  };
  var closest__3 = function(base, elem, selector) {
    var base__$1 = dommy.template.__GT_node_like.call(null, base);
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return cljs.core.first.call(null, cljs.core.filter.call(null, dommy.core.matches_pred.call(null, base__$1, selector), cljs.core.take_while.call(null, function(base__$1, elem__$1) {
      return function(p1__22134_SHARP_) {
        return!(p1__22134_SHARP_ === base__$1);
      };
    }(base__$1, elem__$1), dommy.core.ancestor_nodes.call(null, elem__$1))));
  };
  closest = function(base, elem, selector) {
    switch(arguments.length) {
      case 2:
        return closest__2.call(this, base, elem);
      case 3:
        return closest__3.call(this, base, elem, selector);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  closest.cljs$core$IFn$_invoke$arity$2 = closest__2;
  closest.cljs$core$IFn$_invoke$arity$3 = closest__3;
  return closest;
}();
dommy.core.descendant_QMARK_ = function descendant_QMARK_(descendant, ancestor) {
  var descendant__$1 = dommy.template.__GT_node_like.call(null, descendant);
  var ancestor__$1 = dommy.template.__GT_node_like.call(null, ancestor);
  if (cljs.core.truth_(ancestor__$1.contains)) {
    return ancestor__$1.contains(descendant__$1);
  } else {
    if (cljs.core.truth_(ancestor__$1.compareDocumentPosition)) {
      return(ancestor__$1.compareDocumentPosition(descendant__$1) & 1 << 4) != 0;
    } else {
      return null;
    }
  }
};
dommy.core.special_listener_makers = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__22135) {
  var vec__22136 = p__22135;
  var special_mouse_event = cljs.core.nth.call(null, vec__22136, 0, null);
  var real_mouse_event = cljs.core.nth.call(null, vec__22136, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [special_mouse_event, new cljs.core.PersistentArrayMap.fromArray([real_mouse_event, function(vec__22136, special_mouse_event, real_mouse_event) {
    return function(f) {
      return function(vec__22136, special_mouse_event, real_mouse_event) {
        return function(event) {
          var related_target = event.relatedTarget;
          var listener_target = function() {
            var or__3577__auto__ = event.selectedTarget;
            if (cljs.core.truth_(or__3577__auto__)) {
              return or__3577__auto__;
            } else {
              return event.currentTarget;
            }
          }();
          if (cljs.core.truth_(function() {
            var and__3565__auto__ = related_target;
            if (cljs.core.truth_(and__3565__auto__)) {
              return dommy.core.descendant_QMARK_.call(null, related_target, listener_target);
            } else {
              return and__3565__auto__;
            }
          }())) {
            return null;
          } else {
            return f.call(null, event);
          }
        };
      }(vec__22136, special_mouse_event, real_mouse_event);
    };
  }(vec__22136, special_mouse_event, real_mouse_event)], true, false)], null);
}, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", 2027084997), new cljs.core.Keyword(null, "mouseover", "mouseover", 1601081963), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 2033263780), new cljs.core.Keyword(null, "mouseout", "mouseout", 894298107)], null)));
dommy.core.live_listener = function live_listener(elem, selector, f) {
  return function(event) {
    var selected_target = dommy.core.closest.call(null, dommy.template.__GT_node_like.call(null, elem), event.target, selector);
    if (cljs.core.truth_(function() {
      var and__3565__auto__ = selected_target;
      if (cljs.core.truth_(and__3565__auto__)) {
        return cljs.core.not.call(null, dommy.core.attr.call(null, selected_target, new cljs.core.Keyword(null, "disabled", "disabled", 1284845038)));
      } else {
        return and__3565__auto__;
      }
    }())) {
      event.selectedTarget = selected_target;
      return f.call(null, event);
    } else {
      return null;
    }
  };
};
dommy.core.event_listeners = function event_listeners(elem) {
  var or__3577__auto__ = dommy.template.__GT_node_like.call(null, elem).dommyEventListeners;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    return cljs.core.PersistentArrayMap.EMPTY;
  }
};
dommy.core.update_event_listeners_BANG_ = function() {
  var update_event_listeners_BANG___delegate = function(elem, f, args) {
    var elem__$1 = dommy.template.__GT_node_like.call(null, elem);
    return elem__$1.dommyEventListeners = cljs.core.apply.call(null, f, dommy.core.event_listeners.call(null, elem__$1), args);
  };
  var update_event_listeners_BANG_ = function(elem, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return update_event_listeners_BANG___delegate.call(this, elem, f, args);
  };
  update_event_listeners_BANG_.cljs$lang$maxFixedArity = 2;
  update_event_listeners_BANG_.cljs$lang$applyTo = function(arglist__22137) {
    var elem = cljs.core.first(arglist__22137);
    arglist__22137 = cljs.core.next(arglist__22137);
    var f = cljs.core.first(arglist__22137);
    var args = cljs.core.rest(arglist__22137);
    return update_event_listeners_BANG___delegate(elem, f, args);
  };
  update_event_listeners_BANG_.cljs$core$IFn$_invoke$arity$variadic = update_event_listeners_BANG___delegate;
  return update_event_listeners_BANG_;
}();
dommy.core.elem_and_selector = function elem_and_selector(elem_sel) {
  if (cljs.core.sequential_QMARK_.call(null, elem_sel)) {
    return cljs.core.juxt.call(null, function(p1__22138_SHARP_) {
      return dommy.template.__GT_node_like.call(null, cljs.core.first.call(null, p1__22138_SHARP_));
    }, cljs.core.rest).call(null, elem_sel);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [dommy.template.__GT_node_like.call(null, elem_sel), null], null);
  }
};
dommy.core.listen_BANG_ = function() {
  var listen_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null))))));
    }
    var vec__22162_22185 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_22186 = cljs.core.nth.call(null, vec__22162_22185, 0, null);
    var selector_22187 = cljs.core.nth.call(null, vec__22162_22185, 1, null);
    var seq__22163_22188 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__22170_22189 = null;
    var count__22171_22190 = 0;
    var i__22172_22191 = 0;
    while (true) {
      if (i__22172_22191 < count__22171_22190) {
        var vec__22179_22192 = cljs.core._nth.call(null, chunk__22170_22189, i__22172_22191);
        var orig_type_22193 = cljs.core.nth.call(null, vec__22179_22192, 0, null);
        var f_22194 = cljs.core.nth.call(null, vec__22179_22192, 1, null);
        var seq__22173_22195 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_22193, new cljs.core.PersistentArrayMap.fromArray([orig_type_22193, cljs.core.identity], true, false)));
        var chunk__22175_22196 = null;
        var count__22176_22197 = 0;
        var i__22177_22198 = 0;
        while (true) {
          if (i__22177_22198 < count__22176_22197) {
            var vec__22180_22199 = cljs.core._nth.call(null, chunk__22175_22196, i__22177_22198);
            var actual_type_22200 = cljs.core.nth.call(null, vec__22180_22199, 0, null);
            var factory_22201 = cljs.core.nth.call(null, vec__22180_22199, 1, null);
            var canonical_f_22202 = (cljs.core.truth_(selector_22187) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_22186, selector_22187) : cljs.core.identity).call(null, factory_22201.call(null, f_22194));
            dommy.core.update_event_listeners_BANG_.call(null, elem_22186, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_22187, actual_type_22200, f_22194], null), canonical_f_22202);
            if (cljs.core.truth_(elem_22186.addEventListener)) {
              elem_22186.addEventListener(cljs.core.name.call(null, actual_type_22200), canonical_f_22202);
            } else {
              elem_22186.attachEvent(cljs.core.name.call(null, actual_type_22200), canonical_f_22202);
            }
            var G__22203 = seq__22173_22195;
            var G__22204 = chunk__22175_22196;
            var G__22205 = count__22176_22197;
            var G__22206 = i__22177_22198 + 1;
            seq__22173_22195 = G__22203;
            chunk__22175_22196 = G__22204;
            count__22176_22197 = G__22205;
            i__22177_22198 = G__22206;
            continue;
          } else {
            var temp__4126__auto___22207 = cljs.core.seq.call(null, seq__22173_22195);
            if (temp__4126__auto___22207) {
              var seq__22173_22208__$1 = temp__4126__auto___22207;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__22173_22208__$1)) {
                var c__4333__auto___22209 = cljs.core.chunk_first.call(null, seq__22173_22208__$1);
                var G__22210 = cljs.core.chunk_rest.call(null, seq__22173_22208__$1);
                var G__22211 = c__4333__auto___22209;
                var G__22212 = cljs.core.count.call(null, c__4333__auto___22209);
                var G__22213 = 0;
                seq__22173_22195 = G__22210;
                chunk__22175_22196 = G__22211;
                count__22176_22197 = G__22212;
                i__22177_22198 = G__22213;
                continue;
              } else {
                var vec__22181_22214 = cljs.core.first.call(null, seq__22173_22208__$1);
                var actual_type_22215 = cljs.core.nth.call(null, vec__22181_22214, 0, null);
                var factory_22216 = cljs.core.nth.call(null, vec__22181_22214, 1, null);
                var canonical_f_22217 = (cljs.core.truth_(selector_22187) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_22186, selector_22187) : cljs.core.identity).call(null, factory_22216.call(null, f_22194));
                dommy.core.update_event_listeners_BANG_.call(null, elem_22186, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_22187, actual_type_22215, f_22194], null), canonical_f_22217);
                if (cljs.core.truth_(elem_22186.addEventListener)) {
                  elem_22186.addEventListener(cljs.core.name.call(null, actual_type_22215), canonical_f_22217);
                } else {
                  elem_22186.attachEvent(cljs.core.name.call(null, actual_type_22215), canonical_f_22217);
                }
                var G__22218 = cljs.core.next.call(null, seq__22173_22208__$1);
                var G__22219 = null;
                var G__22220 = 0;
                var G__22221 = 0;
                seq__22173_22195 = G__22218;
                chunk__22175_22196 = G__22219;
                count__22176_22197 = G__22220;
                i__22177_22198 = G__22221;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__22222 = seq__22163_22188;
        var G__22223 = chunk__22170_22189;
        var G__22224 = count__22171_22190;
        var G__22225 = i__22172_22191 + 1;
        seq__22163_22188 = G__22222;
        chunk__22170_22189 = G__22223;
        count__22171_22190 = G__22224;
        i__22172_22191 = G__22225;
        continue;
      } else {
        var temp__4126__auto___22226 = cljs.core.seq.call(null, seq__22163_22188);
        if (temp__4126__auto___22226) {
          var seq__22163_22227__$1 = temp__4126__auto___22226;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22163_22227__$1)) {
            var c__4333__auto___22228 = cljs.core.chunk_first.call(null, seq__22163_22227__$1);
            var G__22229 = cljs.core.chunk_rest.call(null, seq__22163_22227__$1);
            var G__22230 = c__4333__auto___22228;
            var G__22231 = cljs.core.count.call(null, c__4333__auto___22228);
            var G__22232 = 0;
            seq__22163_22188 = G__22229;
            chunk__22170_22189 = G__22230;
            count__22171_22190 = G__22231;
            i__22172_22191 = G__22232;
            continue;
          } else {
            var vec__22182_22233 = cljs.core.first.call(null, seq__22163_22227__$1);
            var orig_type_22234 = cljs.core.nth.call(null, vec__22182_22233, 0, null);
            var f_22235 = cljs.core.nth.call(null, vec__22182_22233, 1, null);
            var seq__22164_22236 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_22234, new cljs.core.PersistentArrayMap.fromArray([orig_type_22234, cljs.core.identity], true, false)));
            var chunk__22166_22237 = null;
            var count__22167_22238 = 0;
            var i__22168_22239 = 0;
            while (true) {
              if (i__22168_22239 < count__22167_22238) {
                var vec__22183_22240 = cljs.core._nth.call(null, chunk__22166_22237, i__22168_22239);
                var actual_type_22241 = cljs.core.nth.call(null, vec__22183_22240, 0, null);
                var factory_22242 = cljs.core.nth.call(null, vec__22183_22240, 1, null);
                var canonical_f_22243 = (cljs.core.truth_(selector_22187) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_22186, selector_22187) : cljs.core.identity).call(null, factory_22242.call(null, f_22235));
                dommy.core.update_event_listeners_BANG_.call(null, elem_22186, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_22187, actual_type_22241, f_22235], null), canonical_f_22243);
                if (cljs.core.truth_(elem_22186.addEventListener)) {
                  elem_22186.addEventListener(cljs.core.name.call(null, actual_type_22241), canonical_f_22243);
                } else {
                  elem_22186.attachEvent(cljs.core.name.call(null, actual_type_22241), canonical_f_22243);
                }
                var G__22244 = seq__22164_22236;
                var G__22245 = chunk__22166_22237;
                var G__22246 = count__22167_22238;
                var G__22247 = i__22168_22239 + 1;
                seq__22164_22236 = G__22244;
                chunk__22166_22237 = G__22245;
                count__22167_22238 = G__22246;
                i__22168_22239 = G__22247;
                continue;
              } else {
                var temp__4126__auto___22248__$1 = cljs.core.seq.call(null, seq__22164_22236);
                if (temp__4126__auto___22248__$1) {
                  var seq__22164_22249__$1 = temp__4126__auto___22248__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__22164_22249__$1)) {
                    var c__4333__auto___22250 = cljs.core.chunk_first.call(null, seq__22164_22249__$1);
                    var G__22251 = cljs.core.chunk_rest.call(null, seq__22164_22249__$1);
                    var G__22252 = c__4333__auto___22250;
                    var G__22253 = cljs.core.count.call(null, c__4333__auto___22250);
                    var G__22254 = 0;
                    seq__22164_22236 = G__22251;
                    chunk__22166_22237 = G__22252;
                    count__22167_22238 = G__22253;
                    i__22168_22239 = G__22254;
                    continue;
                  } else {
                    var vec__22184_22255 = cljs.core.first.call(null, seq__22164_22249__$1);
                    var actual_type_22256 = cljs.core.nth.call(null, vec__22184_22255, 0, null);
                    var factory_22257 = cljs.core.nth.call(null, vec__22184_22255, 1, null);
                    var canonical_f_22258 = (cljs.core.truth_(selector_22187) ? cljs.core.partial.call(null, dommy.core.live_listener, elem_22186, selector_22187) : cljs.core.identity).call(null, factory_22257.call(null, f_22235));
                    dommy.core.update_event_listeners_BANG_.call(null, elem_22186, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_22187, actual_type_22256, f_22235], null), canonical_f_22258);
                    if (cljs.core.truth_(elem_22186.addEventListener)) {
                      elem_22186.addEventListener(cljs.core.name.call(null, actual_type_22256), canonical_f_22258);
                    } else {
                      elem_22186.attachEvent(cljs.core.name.call(null, actual_type_22256), canonical_f_22258);
                    }
                    var G__22259 = cljs.core.next.call(null, seq__22164_22249__$1);
                    var G__22260 = null;
                    var G__22261 = 0;
                    var G__22262 = 0;
                    seq__22164_22236 = G__22259;
                    chunk__22166_22237 = G__22260;
                    count__22167_22238 = G__22261;
                    i__22168_22239 = G__22262;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__22263 = cljs.core.next.call(null, seq__22163_22227__$1);
            var G__22264 = null;
            var G__22265 = 0;
            var G__22266 = 0;
            seq__22163_22188 = G__22263;
            chunk__22170_22189 = G__22264;
            count__22171_22190 = G__22265;
            i__22172_22191 = G__22266;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_BANG_.cljs$lang$maxFixedArity = 1;
  listen_BANG_.cljs$lang$applyTo = function(arglist__22267) {
    var elem_sel = cljs.core.first(arglist__22267);
    var type_fs = cljs.core.rest(arglist__22267);
    return listen_BANG___delegate(elem_sel, type_fs);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_BANG___delegate;
  return listen_BANG_;
}();
dommy.core.unlisten_BANG_ = function() {
  var unlisten_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null))))));
    }
    var vec__22291_22314 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_22315 = cljs.core.nth.call(null, vec__22291_22314, 0, null);
    var selector_22316 = cljs.core.nth.call(null, vec__22291_22314, 1, null);
    var seq__22292_22317 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__22299_22318 = null;
    var count__22300_22319 = 0;
    var i__22301_22320 = 0;
    while (true) {
      if (i__22301_22320 < count__22300_22319) {
        var vec__22308_22321 = cljs.core._nth.call(null, chunk__22299_22318, i__22301_22320);
        var orig_type_22322 = cljs.core.nth.call(null, vec__22308_22321, 0, null);
        var f_22323 = cljs.core.nth.call(null, vec__22308_22321, 1, null);
        var seq__22302_22324 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_22322, new cljs.core.PersistentArrayMap.fromArray([orig_type_22322, cljs.core.identity], true, false)));
        var chunk__22304_22325 = null;
        var count__22305_22326 = 0;
        var i__22306_22327 = 0;
        while (true) {
          if (i__22306_22327 < count__22305_22326) {
            var vec__22309_22328 = cljs.core._nth.call(null, chunk__22304_22325, i__22306_22327);
            var actual_type_22329 = cljs.core.nth.call(null, vec__22309_22328, 0, null);
            var __22330 = cljs.core.nth.call(null, vec__22309_22328, 1, null);
            var keys_22331 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_22316, actual_type_22329, f_22323], null);
            var canonical_f_22332 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_22315), keys_22331);
            dommy.core.update_event_listeners_BANG_.call(null, elem_22315, dommy.utils.dissoc_in, keys_22331);
            if (cljs.core.truth_(elem_22315.removeEventListener)) {
              elem_22315.removeEventListener(cljs.core.name.call(null, actual_type_22329), canonical_f_22332);
            } else {
              elem_22315.detachEvent(cljs.core.name.call(null, actual_type_22329), canonical_f_22332);
            }
            var G__22333 = seq__22302_22324;
            var G__22334 = chunk__22304_22325;
            var G__22335 = count__22305_22326;
            var G__22336 = i__22306_22327 + 1;
            seq__22302_22324 = G__22333;
            chunk__22304_22325 = G__22334;
            count__22305_22326 = G__22335;
            i__22306_22327 = G__22336;
            continue;
          } else {
            var temp__4126__auto___22337 = cljs.core.seq.call(null, seq__22302_22324);
            if (temp__4126__auto___22337) {
              var seq__22302_22338__$1 = temp__4126__auto___22337;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__22302_22338__$1)) {
                var c__4333__auto___22339 = cljs.core.chunk_first.call(null, seq__22302_22338__$1);
                var G__22340 = cljs.core.chunk_rest.call(null, seq__22302_22338__$1);
                var G__22341 = c__4333__auto___22339;
                var G__22342 = cljs.core.count.call(null, c__4333__auto___22339);
                var G__22343 = 0;
                seq__22302_22324 = G__22340;
                chunk__22304_22325 = G__22341;
                count__22305_22326 = G__22342;
                i__22306_22327 = G__22343;
                continue;
              } else {
                var vec__22310_22344 = cljs.core.first.call(null, seq__22302_22338__$1);
                var actual_type_22345 = cljs.core.nth.call(null, vec__22310_22344, 0, null);
                var __22346 = cljs.core.nth.call(null, vec__22310_22344, 1, null);
                var keys_22347 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_22316, actual_type_22345, f_22323], null);
                var canonical_f_22348 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_22315), keys_22347);
                dommy.core.update_event_listeners_BANG_.call(null, elem_22315, dommy.utils.dissoc_in, keys_22347);
                if (cljs.core.truth_(elem_22315.removeEventListener)) {
                  elem_22315.removeEventListener(cljs.core.name.call(null, actual_type_22345), canonical_f_22348);
                } else {
                  elem_22315.detachEvent(cljs.core.name.call(null, actual_type_22345), canonical_f_22348);
                }
                var G__22349 = cljs.core.next.call(null, seq__22302_22338__$1);
                var G__22350 = null;
                var G__22351 = 0;
                var G__22352 = 0;
                seq__22302_22324 = G__22349;
                chunk__22304_22325 = G__22350;
                count__22305_22326 = G__22351;
                i__22306_22327 = G__22352;
                continue;
              }
            } else {
            }
          }
          break;
        }
        var G__22353 = seq__22292_22317;
        var G__22354 = chunk__22299_22318;
        var G__22355 = count__22300_22319;
        var G__22356 = i__22301_22320 + 1;
        seq__22292_22317 = G__22353;
        chunk__22299_22318 = G__22354;
        count__22300_22319 = G__22355;
        i__22301_22320 = G__22356;
        continue;
      } else {
        var temp__4126__auto___22357 = cljs.core.seq.call(null, seq__22292_22317);
        if (temp__4126__auto___22357) {
          var seq__22292_22358__$1 = temp__4126__auto___22357;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22292_22358__$1)) {
            var c__4333__auto___22359 = cljs.core.chunk_first.call(null, seq__22292_22358__$1);
            var G__22360 = cljs.core.chunk_rest.call(null, seq__22292_22358__$1);
            var G__22361 = c__4333__auto___22359;
            var G__22362 = cljs.core.count.call(null, c__4333__auto___22359);
            var G__22363 = 0;
            seq__22292_22317 = G__22360;
            chunk__22299_22318 = G__22361;
            count__22300_22319 = G__22362;
            i__22301_22320 = G__22363;
            continue;
          } else {
            var vec__22311_22364 = cljs.core.first.call(null, seq__22292_22358__$1);
            var orig_type_22365 = cljs.core.nth.call(null, vec__22311_22364, 0, null);
            var f_22366 = cljs.core.nth.call(null, vec__22311_22364, 1, null);
            var seq__22293_22367 = cljs.core.seq.call(null, cljs.core.get.call(null, dommy.core.special_listener_makers, orig_type_22365, new cljs.core.PersistentArrayMap.fromArray([orig_type_22365, cljs.core.identity], true, false)));
            var chunk__22295_22368 = null;
            var count__22296_22369 = 0;
            var i__22297_22370 = 0;
            while (true) {
              if (i__22297_22370 < count__22296_22369) {
                var vec__22312_22371 = cljs.core._nth.call(null, chunk__22295_22368, i__22297_22370);
                var actual_type_22372 = cljs.core.nth.call(null, vec__22312_22371, 0, null);
                var __22373 = cljs.core.nth.call(null, vec__22312_22371, 1, null);
                var keys_22374 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_22316, actual_type_22372, f_22366], null);
                var canonical_f_22375 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_22315), keys_22374);
                dommy.core.update_event_listeners_BANG_.call(null, elem_22315, dommy.utils.dissoc_in, keys_22374);
                if (cljs.core.truth_(elem_22315.removeEventListener)) {
                  elem_22315.removeEventListener(cljs.core.name.call(null, actual_type_22372), canonical_f_22375);
                } else {
                  elem_22315.detachEvent(cljs.core.name.call(null, actual_type_22372), canonical_f_22375);
                }
                var G__22376 = seq__22293_22367;
                var G__22377 = chunk__22295_22368;
                var G__22378 = count__22296_22369;
                var G__22379 = i__22297_22370 + 1;
                seq__22293_22367 = G__22376;
                chunk__22295_22368 = G__22377;
                count__22296_22369 = G__22378;
                i__22297_22370 = G__22379;
                continue;
              } else {
                var temp__4126__auto___22380__$1 = cljs.core.seq.call(null, seq__22293_22367);
                if (temp__4126__auto___22380__$1) {
                  var seq__22293_22381__$1 = temp__4126__auto___22380__$1;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__22293_22381__$1)) {
                    var c__4333__auto___22382 = cljs.core.chunk_first.call(null, seq__22293_22381__$1);
                    var G__22383 = cljs.core.chunk_rest.call(null, seq__22293_22381__$1);
                    var G__22384 = c__4333__auto___22382;
                    var G__22385 = cljs.core.count.call(null, c__4333__auto___22382);
                    var G__22386 = 0;
                    seq__22293_22367 = G__22383;
                    chunk__22295_22368 = G__22384;
                    count__22296_22369 = G__22385;
                    i__22297_22370 = G__22386;
                    continue;
                  } else {
                    var vec__22313_22387 = cljs.core.first.call(null, seq__22293_22381__$1);
                    var actual_type_22388 = cljs.core.nth.call(null, vec__22313_22387, 0, null);
                    var __22389 = cljs.core.nth.call(null, vec__22313_22387, 1, null);
                    var keys_22390 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector_22316, actual_type_22388, f_22366], null);
                    var canonical_f_22391 = cljs.core.get_in.call(null, dommy.core.event_listeners.call(null, elem_22315), keys_22390);
                    dommy.core.update_event_listeners_BANG_.call(null, elem_22315, dommy.utils.dissoc_in, keys_22390);
                    if (cljs.core.truth_(elem_22315.removeEventListener)) {
                      elem_22315.removeEventListener(cljs.core.name.call(null, actual_type_22388), canonical_f_22391);
                    } else {
                      elem_22315.detachEvent(cljs.core.name.call(null, actual_type_22388), canonical_f_22391);
                    }
                    var G__22392 = cljs.core.next.call(null, seq__22293_22381__$1);
                    var G__22393 = null;
                    var G__22394 = 0;
                    var G__22395 = 0;
                    seq__22293_22367 = G__22392;
                    chunk__22295_22368 = G__22393;
                    count__22296_22369 = G__22394;
                    i__22297_22370 = G__22395;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__22396 = cljs.core.next.call(null, seq__22292_22358__$1);
            var G__22397 = null;
            var G__22398 = 0;
            var G__22399 = 0;
            seq__22292_22317 = G__22396;
            chunk__22299_22318 = G__22397;
            count__22300_22319 = G__22398;
            i__22301_22320 = G__22399;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var unlisten_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return unlisten_BANG___delegate.call(this, elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$lang$maxFixedArity = 1;
  unlisten_BANG_.cljs$lang$applyTo = function(arglist__22400) {
    var elem_sel = cljs.core.first(arglist__22400);
    var type_fs = cljs.core.rest(arglist__22400);
    return unlisten_BANG___delegate(elem_sel, type_fs);
  };
  unlisten_BANG_.cljs$core$IFn$_invoke$arity$variadic = unlisten_BANG___delegate;
  return unlisten_BANG_;
}();
dommy.core.listen_once_BANG_ = function() {
  var listen_once_BANG___delegate = function(elem_sel, type_fs) {
    if (cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, type_fs))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), cljs.core.list(new cljs.core.Symbol(null, "count", "count", -1545680184, null), new cljs.core.Symbol(null, "type-fs", "type-fs", 1801297401, null))))));
    }
    var vec__22408_22415 = dommy.core.elem_and_selector.call(null, elem_sel);
    var elem_22416 = cljs.core.nth.call(null, vec__22408_22415, 0, null);
    var selector_22417 = cljs.core.nth.call(null, vec__22408_22415, 1, null);
    var seq__22409_22418 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, type_fs));
    var chunk__22410_22419 = null;
    var count__22411_22420 = 0;
    var i__22412_22421 = 0;
    while (true) {
      if (i__22412_22421 < count__22411_22420) {
        var vec__22413_22422 = cljs.core._nth.call(null, chunk__22410_22419, i__22412_22421);
        var type_22423 = cljs.core.nth.call(null, vec__22413_22422, 0, null);
        var f_22424 = cljs.core.nth.call(null, vec__22413_22422, 1, null);
        dommy.core.listen_BANG_.call(null, elem_sel, type_22423, function(seq__22409_22418, chunk__22410_22419, count__22411_22420, i__22412_22421, vec__22413_22422, type_22423, f_22424, vec__22408_22415, elem_22416, selector_22417) {
          return function this_fn(e) {
            dommy.core.unlisten_BANG_.call(null, elem_sel, type_22423, this_fn);
            return f_22424.call(null, e);
          };
        }(seq__22409_22418, chunk__22410_22419, count__22411_22420, i__22412_22421, vec__22413_22422, type_22423, f_22424, vec__22408_22415, elem_22416, selector_22417));
        var G__22425 = seq__22409_22418;
        var G__22426 = chunk__22410_22419;
        var G__22427 = count__22411_22420;
        var G__22428 = i__22412_22421 + 1;
        seq__22409_22418 = G__22425;
        chunk__22410_22419 = G__22426;
        count__22411_22420 = G__22427;
        i__22412_22421 = G__22428;
        continue;
      } else {
        var temp__4126__auto___22429 = cljs.core.seq.call(null, seq__22409_22418);
        if (temp__4126__auto___22429) {
          var seq__22409_22430__$1 = temp__4126__auto___22429;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22409_22430__$1)) {
            var c__4333__auto___22431 = cljs.core.chunk_first.call(null, seq__22409_22430__$1);
            var G__22432 = cljs.core.chunk_rest.call(null, seq__22409_22430__$1);
            var G__22433 = c__4333__auto___22431;
            var G__22434 = cljs.core.count.call(null, c__4333__auto___22431);
            var G__22435 = 0;
            seq__22409_22418 = G__22432;
            chunk__22410_22419 = G__22433;
            count__22411_22420 = G__22434;
            i__22412_22421 = G__22435;
            continue;
          } else {
            var vec__22414_22436 = cljs.core.first.call(null, seq__22409_22430__$1);
            var type_22437 = cljs.core.nth.call(null, vec__22414_22436, 0, null);
            var f_22438 = cljs.core.nth.call(null, vec__22414_22436, 1, null);
            dommy.core.listen_BANG_.call(null, elem_sel, type_22437, function(seq__22409_22418, chunk__22410_22419, count__22411_22420, i__22412_22421, vec__22414_22436, type_22437, f_22438, seq__22409_22430__$1, temp__4126__auto___22429, vec__22408_22415, elem_22416, selector_22417) {
              return function this_fn(e) {
                dommy.core.unlisten_BANG_.call(null, elem_sel, type_22437, this_fn);
                return f_22438.call(null, e);
              };
            }(seq__22409_22418, chunk__22410_22419, count__22411_22420, i__22412_22421, vec__22414_22436, type_22437, f_22438, seq__22409_22430__$1, temp__4126__auto___22429, vec__22408_22415, elem_22416, selector_22417));
            var G__22439 = cljs.core.next.call(null, seq__22409_22430__$1);
            var G__22440 = null;
            var G__22441 = 0;
            var G__22442 = 0;
            seq__22409_22418 = G__22439;
            chunk__22410_22419 = G__22440;
            count__22411_22420 = G__22441;
            i__22412_22421 = G__22442;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return elem_sel;
  };
  var listen_once_BANG_ = function(elem_sel, var_args) {
    var type_fs = null;
    if (arguments.length > 1) {
      type_fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return listen_once_BANG___delegate.call(this, elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$lang$maxFixedArity = 1;
  listen_once_BANG_.cljs$lang$applyTo = function(arglist__22443) {
    var elem_sel = cljs.core.first(arglist__22443);
    var type_fs = cljs.core.rest(arglist__22443);
    return listen_once_BANG___delegate(elem_sel, type_fs);
  };
  listen_once_BANG_.cljs$core$IFn$_invoke$arity$variadic = listen_once_BANG___delegate;
  return listen_once_BANG_;
}();
dommy.core.fire_BANG_ = function() {
  var fire_BANG___delegate = function(node, event_type, p__22444) {
    var vec__22446 = p__22444;
    var update_event_BANG_ = cljs.core.nth.call(null, vec__22446, 0, null);
    if (dommy.core.descendant_QMARK_.call(null, node, document.documentElement)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "descendant?", "descendant?", -1886221157, null), new cljs.core.Symbol(null, "node", "node", -1637144645, null), new cljs.core.Symbol("js", "document.documentElement", "js/document.documentElement", -1449696112, null)))));
    }
    var update_event_BANG___$1 = function() {
      var or__3577__auto__ = update_event_BANG_;
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return cljs.core.identity;
      }
    }();
    if (cljs.core.truth_(document.createEvent)) {
      var event = document.createEvent("Event");
      event.initEvent(cljs.core.name.call(null, event_type), true, true);
      return node.dispatchEvent(update_event_BANG___$1.call(null, event));
    } else {
      return node.fireEvent("on" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, event_type)), update_event_BANG___$1.call(null, document.createEventObject()));
    }
  };
  var fire_BANG_ = function(node, event_type, var_args) {
    var p__22444 = null;
    if (arguments.length > 2) {
      p__22444 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return fire_BANG___delegate.call(this, node, event_type, p__22444);
  };
  fire_BANG_.cljs$lang$maxFixedArity = 2;
  fire_BANG_.cljs$lang$applyTo = function(arglist__22447) {
    var node = cljs.core.first(arglist__22447);
    arglist__22447 = cljs.core.next(arglist__22447);
    var event_type = cljs.core.first(arglist__22447);
    var p__22444 = cljs.core.rest(arglist__22447);
    return fire_BANG___delegate(node, event_type, p__22444);
  };
  fire_BANG_.cljs$core$IFn$_invoke$arity$variadic = fire_BANG___delegate;
  return fire_BANG_;
}();
goog.provide("color.ral_picker");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
goog.require("util.map");
goog.require("dommy.core");
goog.require("dommy.core");
goog.require("html.canvas");
goog.require("html.canvas");
goog.require("monet.canvas");
goog.require("monet.canvas");
color.ral_picker.defaults = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "outer-band", "outer-band", 2711359417), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "color-fn", "color-fn", 4679998180), new cljs.core.Keyword(null, "average", "average", 4677423503), new cljs.core.Keyword(null, "force-full-saturation", "force-full-saturation", 3371675232), false, new cljs.core.Keyword(null, "force-midrange-brightness", "force-midrange-brightness", 2125973177), 
false], null), new cljs.core.Keyword(null, "band", "band", 1016920487), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "margin", "margin", 4227561760), 0], null), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "min-width", "min-width", 4418917885), 25, new cljs.core.Keyword(null, "border-width", "border-width", 1324275799), 0], null), new cljs.core.Keyword(null, "palette", "palette", 4509960685), 
new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "sort", "sort", 1017440528), false], null), new cljs.core.Keyword(null, "inner-band", "inner-band", 1790792382), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "sort", "sort", 1017440528), false], null), new cljs.core.Keyword(null, "focus-bar-width", "focus-bar-width", 2384076873), 2], null);
color.ral_picker.bucketize = function bucketize(items, num_buckets) {
  var bucket_size = cljs.core.count.call(null, items) / num_buckets;
  return cljs.core.map.call(null, function(bucket_size) {
    return function(p1__17938_SHARP_) {
      return cljs.core.map.call(null, cljs.core.second, p1__17938_SHARP_);
    };
  }(bucket_size), cljs.core.partition_by.call(null, function(bucket_size) {
    return function(p__17941) {
      var vec__17942 = p__17941;
      var idx = cljs.core.nth.call(null, vec__17942, 0, null);
      var elm = cljs.core.nth.call(null, vec__17942, 1, null);
      return Math.floor.call(null, idx / bucket_size);
    };
  }(bucket_size), cljs.core.map.call(null, cljs.core.vector, cljs.core.range.call(null), items)));
};
color.ral_picker.max_swatches = function max_swatches(radius) {
  return Math.floor.call(null, radius * 2 * Math.PI / cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "min-width", "min-width", 4418917885)], null)));
};
color.ral_picker.make_simple_swatch = function make_simple_swatch(color__$1) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "color", "color", 1108746965), color__$1], null);
};
color.ral_picker.swatch_color = function swatch_color(palette) {
  var color_fn = cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "outer-band", "outer-band", 2711359417), new cljs.core.Keyword(null, "color-fn", "color-fn", 4679998180)], null));
  var G__17944 = color_fn instanceof cljs.core.Keyword ? color_fn.fqn : null;
  switch(G__17944) {
    case "default":
      throw "bad color-fn: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(color_fn);break;
    case "average":
      return color.average.call(null, palette);
      break;
    case "median":
      return cljs.core.nth.call(null, palette, Math.floor.call(null, cljs.core.count.call(null, palette) / 2));
      break;
    case "first":
      return cljs.core.first.call(null, palette);
      break;
    default:
      throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(color_fn));;
  }
};
color.ral_picker.sort_by_saturation_and_brightness = function sort_by_saturation_and_brightness(palette) {
  var f = function(p1__17946_SHARP_) {
    var vec__17948 = color.hsl.call(null, (new cljs.core.Keyword(null, "rgb", "rgb", 1014017087)).cljs$core$IFn$_invoke$arity$1(p1__17946_SHARP_));
    var _ = cljs.core.nth.call(null, vec__17948, 0, null);
    var s = cljs.core.nth.call(null, vec__17948, 1, null);
    var l = cljs.core.nth.call(null, vec__17948, 2, null);
    return Math.atan2.call(null, l - 0.5, s - 0.5);
  };
  return cljs.core.sort_by.call(null, f, palette);
};
color.ral_picker.make_complex_swatch = function make_complex_swatch(palette, parent_band) {
  var color__$1 = color.ral_picker.swatch_color.call(null, palette);
  var hsl = color.hsl.call(null, color__$1);
  var hsl__$1 = cljs.core.truth_(cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "outer-band", "outer-band", 2711359417), new cljs.core.Keyword(null, "force-full-saturation", "force-full-saturation", 3371675232)], null))) ? cljs.core.assoc.call(null, hsl, 1, 1) : hsl;
  var hsl__$2 = cljs.core.truth_(cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "outer-band", "outer-band", 2711359417), new cljs.core.Keyword(null, "force-midrange-brightness", "force-midrange-brightness", 2125973177)], null))) ? cljs.core.assoc.call(null, hsl__$1, 2, 0.5) : hsl__$1;
  var color__$2 = cljs.core.assoc.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), color.pack_rgb.call(null, color.hsl_to_rgb.call(null, hsl__$2)));
  var palette__$1 = cljs.core.truth_(cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "inner-band", "inner-band", 1790792382), new cljs.core.Keyword(null, "sort", "sort", 1017440528)], null))) ? color.ral_picker.sort_by_saturation_and_brightness.call(null, palette) : palette;
  var margin = cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "band", "band", 1016920487), new cljs.core.Keyword(null, "margin", "margin", 4227561760)], null));
  var width = (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(parent_band);
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(parent_band) - width - margin;
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "color", "color", 1108746965), color__$2, new cljs.core.Keyword(null, "band", "band", 1016920487), color.ral_picker.make_band.call(null, radius, width, palette__$1)], null);
};
color.ral_picker.make_band = function make_band(radius, width, palette) {
  var len = cljs.core.count.call(null, palette);
  var max_swatches = color.ral_picker.max_swatches.call(null, radius);
  var band = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "band", "band", 1016920487), new cljs.core.Keyword(null, "radius", "radius", 4370292740), radius, new cljs.core.Keyword(null, "width", "width", 1127031096), width], null);
  var swatch = len <= max_swatches ? cljs.core.map.call(null, color.ral_picker.make_simple_swatch, palette) : cljs.core.map.call(null, function(len, max_swatches, band) {
    return function(p1__17949_SHARP_) {
      return color.ral_picker.make_complex_swatch.call(null, p1__17949_SHARP_, band);
    };
  }(len, max_swatches, band), color.ral_picker.bucketize.call(null, palette, max_swatches));
  return cljs.core.assoc.call(null, band, new cljs.core.Keyword(null, "swatches", "swatches", 699594076), swatch);
};
color.ral_picker.draw_color_band = function draw_color_band(band) {
  var map__17956 = color.ral_picker.wheel;
  var map__17956__$1 = cljs.core.seq_QMARK_.call(null, map__17956) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17956) : map__17956;
  var center = cljs.core.get.call(null, map__17956__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__17956__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var inner_radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band) - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band);
  var palette = cljs.core.map.call(null, new cljs.core.Keyword(null, "color", "color", 1108746965), (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band));
  var len = cljs.core.count.call(null, palette);
  var angle_fn = function(map__17956, map__17956__$1, center, ctx, inner_radius, palette, len) {
    return function(p1__17950_SHARP_) {
      return p1__17950_SHARP_ / len * 2 * Math.PI;
    };
  }(map__17956, map__17956__$1, center, ctx, inner_radius, palette, len);
  var seq__17957 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
  var chunk__17958 = null;
  var count__17959 = 0;
  var i__17960 = 0;
  while (true) {
    if (i__17960 < count__17959) {
      var i = cljs.core._nth.call(null, chunk__17958, i__17960);
      var start_angle_17961 = angle_fn.call(null, i);
      var end_angle_17962 = angle_fn.call(null, i + 1);
      var start_17963 = html.canvas.point.call(null, inner_radius * Math.cos.call(null, start_angle_17961) + (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(center), inner_radius * Math.sin.call(null, start_angle_17961) + (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(center));
      monet.canvas.fill.call(null, monet.canvas.fill_style.call(null, html.canvas.line_to.call(null, html.canvas.arc.call(null, html.canvas.arc.call(null, html.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), start_17963), center, inner_radius, start_angle_17961, end_angle_17962, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), center, (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band), end_angle_17962, start_angle_17961, new cljs.core.Keyword(null, 
      "ccw", "ccw", 1014002569)), start_17963), (new cljs.core.Keyword(null, "rgb", "rgb", 1014017087)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, palette, i))));
      var bw_17964 = cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "border-width", "border-width", 1324275799)], null));
      if (bw_17964 > 0) {
        monet.canvas.stroke.call(null, monet.canvas.stroke_width.call(null, ctx, bw_17964));
      } else {
      }
      var G__17965 = seq__17957;
      var G__17966 = chunk__17958;
      var G__17967 = count__17959;
      var G__17968 = i__17960 + 1;
      seq__17957 = G__17965;
      chunk__17958 = G__17966;
      count__17959 = G__17967;
      i__17960 = G__17968;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__17957);
      if (temp__4126__auto__) {
        var seq__17957__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17957__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__17957__$1);
          var G__17969 = cljs.core.chunk_rest.call(null, seq__17957__$1);
          var G__17970 = c__4333__auto__;
          var G__17971 = cljs.core.count.call(null, c__4333__auto__);
          var G__17972 = 0;
          seq__17957 = G__17969;
          chunk__17958 = G__17970;
          count__17959 = G__17971;
          i__17960 = G__17972;
          continue;
        } else {
          var i = cljs.core.first.call(null, seq__17957__$1);
          var start_angle_17973 = angle_fn.call(null, i);
          var end_angle_17974 = angle_fn.call(null, i + 1);
          var start_17975 = html.canvas.point.call(null, inner_radius * Math.cos.call(null, start_angle_17973) + (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(center), inner_radius * Math.sin.call(null, start_angle_17973) + (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(center));
          monet.canvas.fill.call(null, monet.canvas.fill_style.call(null, html.canvas.line_to.call(null, html.canvas.arc.call(null, html.canvas.arc.call(null, html.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), start_17975), center, inner_radius, start_angle_17973, end_angle_17974, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), center, (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band), end_angle_17974, start_angle_17973, new cljs.core.Keyword(null, 
          "ccw", "ccw", 1014002569)), start_17975), (new cljs.core.Keyword(null, "rgb", "rgb", 1014017087)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, palette, i))));
          var bw_17976 = cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "swatch", "swatch", 4419159982), new cljs.core.Keyword(null, "border-width", "border-width", 1324275799)], null));
          if (bw_17976 > 0) {
            monet.canvas.stroke.call(null, monet.canvas.stroke_width.call(null, ctx, bw_17976));
          } else {
          }
          var G__17977 = cljs.core.next.call(null, seq__17957__$1);
          var G__17978 = null;
          var G__17979 = 0;
          var G__17980 = 0;
          seq__17957 = G__17977;
          chunk__17958 = G__17978;
          count__17959 = G__17979;
          i__17960 = G__17980;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
color.ral_picker.in_inner_band_QMARK_ = function in_inner_band_QMARK_(e) {
  var map__17982 = color.ral_picker.wheel;
  var map__17982__$1 = cljs.core.seq_QMARK_.call(null, map__17982) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17982) : map__17982;
  var center = cljs.core.get.call(null, map__17982__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var band = cljs.core.get.call(null, map__17982__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var offset = html.canvas.offset.call(null, e);
  var distance = html.canvas.distance.call(null, center, offset);
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band) - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band) - cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, "band", "band", 1016920487), new cljs.core.Keyword(null, "margin", "margin", 
  4227561760)], null));
  return distance <= radius && distance >= radius - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band);
};
color.ral_picker.bucket_index = function bucket_index(e, band) {
  var offset = html.canvas.offset.call(null, e);
  var center = html.canvas.center.call(null, e);
  var p = html.canvas.point_diff.call(null, offset, center);
  var theta = Math.atan2.call(null, (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(p), (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(p));
  var arc_length = theta >= 0 ? theta : theta + 2 * Math.PI;
  var bucket_arc = Math.PI * 2 / cljs.core.count.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band));
  return Math.floor.call(null, arc_length / bucket_arc);
};
color.ral_picker.cursor = function cursor() {
  return(new cljs.core.Keyword(null, "cursor", "cursor", 3959752392)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel)));
};
color.ral_picker.inner_index = function inner_index() {
  return(new cljs.core.Keyword(null, "inner", "inner", 1114259912)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.cursor.call(null));
};
color.ral_picker.outer_index = function outer_index() {
  return(new cljs.core.Keyword(null, "outer", "outer", 1120015341)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.cursor.call(null));
};
color.ral_picker.set_cursor_BANG_ = function set_cursor_BANG_(k, v) {
  return cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "state", "state", 1123661827)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel), function(p1__17983_SHARP_) {
    return cljs.core.assoc_in.call(null, p1__17983_SHARP_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), k], null), v);
  });
};
color.ral_picker.focus_swatch = function focus_swatch(band, index, focus_QMARK_, inner_QMARK_) {
  var map__17985 = color.ral_picker.wheel;
  var map__17985__$1 = cljs.core.seq_QMARK_.call(null, map__17985) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17985) : map__17985;
  var center = cljs.core.get.call(null, map__17985__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__17985__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band);
  var radius__$1 = cljs.core.truth_(inner_QMARK_) ? radius - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band) - 2 : radius + 2;
  var palette_length = cljs.core.count.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band));
  var start_angle = Math.PI * 2 * index / palette_length;
  var end_angle = Math.PI * 2 * (index + 1) / palette_length;
  var start_angle__$1 = start_angle - (cljs.core.truth_(focus_QMARK_) ? 0 : 0.02);
  var end_angle__$1 = end_angle + (cljs.core.truth_(focus_QMARK_) ? 0 : 0.02);
  return monet.canvas.stroke.call(null, monet.canvas.stroke_style.call(null, monet.canvas.stroke_width.call(null, html.canvas.arc.call(null, monet.canvas.begin_path.call(null, ctx), center, radius__$1, start_angle__$1, end_angle__$1, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), cljs.core.get_in.call(null, color.ral_picker.wheel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, 
  "focus-bar-width", "focus-bar-width", 2384076873)], null)) + (cljs.core.truth_(focus_QMARK_) ? 0 : 1)), cljs.core.truth_(focus_QMARK_) ? "#fff" : "#000"));
};
color.ral_picker.get_color = function get_color(e) {
  if (color.ral_picker.in_inner_band_QMARK_.call(null, e)) {
    var band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel);
    var oi = color.ral_picker.outer_index.call(null);
    var ii = color.ral_picker.inner_index.call(null);
    if (cljs.core.truth_(function() {
      var and__3565__auto__ = oi;
      if (cljs.core.truth_(and__3565__auto__)) {
        return ii;
      } else {
        return and__3565__auto__;
      }
    }())) {
      return(new cljs.core.Keyword(null, "color", "color", 1108746965)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), oi))), ii));
    } else {
      return null;
    }
  } else {
    return null;
  }
};
color.ral_picker.set_color_label_BANG_ = function() {
  var set_color_label_BANG___delegate = function(state, p__17986) {
    var vec__17989 = p__17986;
    var color__$1 = cljs.core.nth.call(null, vec__17989, 0, null);
    var text = function() {
      var G__17990 = state instanceof cljs.core.Keyword ? state.fqn : null;
      switch(G__17990) {
        case "color":
          return(new cljs.core.Keyword(null, "code", "code", 1016963423)).cljs$core$IFn$_invoke$arity$1(color__$1);
          break;
        case "palette":
          return "RAL";
          break;
        case "empty":
          return "";
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(state));;
      }
    }();
    return dommy.core.set_text_BANG_.call(null, (new cljs.core.Keyword(null, "color-label", "color-label", 900292476)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel), text);
  };
  var set_color_label_BANG_ = function(state, var_args) {
    var p__17986 = null;
    if (arguments.length > 1) {
      p__17986 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_color_label_BANG___delegate.call(this, state, p__17986);
  };
  set_color_label_BANG_.cljs$lang$maxFixedArity = 1;
  set_color_label_BANG_.cljs$lang$applyTo = function(arglist__17992) {
    var state = cljs.core.first(arglist__17992);
    var p__17986 = cljs.core.rest(arglist__17992);
    return set_color_label_BANG___delegate(state, p__17986);
  };
  set_color_label_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_color_label_BANG___delegate;
  return set_color_label_BANG_;
}();
color.ral_picker.clear_outer_focus = function clear_outer_focus() {
  var temp__4126__auto__ = color.ral_picker.outer_index.call(null);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var outer_index = temp__4126__auto__;
    var map__17994_17995 = color.ral_picker.wheel;
    var map__17994_17996__$1 = cljs.core.seq_QMARK_.call(null, map__17994_17995) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17994_17995) : map__17994_17995;
    var band_17997 = cljs.core.get.call(null, map__17994_17996__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
    var center_17998 = cljs.core.get.call(null, map__17994_17996__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
    var ctx_17999 = cljs.core.get.call(null, map__17994_17996__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
    color.ral_picker.focus_swatch.call(null, band_17997, outer_index, false, false);
    return color.ral_picker.set_cursor_BANG_.call(null, new cljs.core.Keyword(null, "outer", "outer", 1120015341), null);
  } else {
    return null;
  }
};
color.ral_picker.set_outer_focus = function set_outer_focus(e) {
  color.ral_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
  var map__18001 = color.ral_picker.wheel;
  var map__18001__$1 = cljs.core.seq_QMARK_.call(null, map__18001) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18001) : map__18001;
  var band = cljs.core.get.call(null, map__18001__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var center = cljs.core.get.call(null, map__18001__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__18001__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var outer_bucket_index = color.ral_picker.bucket_index.call(null, e, band);
  color.ral_picker.focus_swatch.call(null, band, outer_bucket_index, true, false);
  return color.ral_picker.set_cursor_BANG_.call(null, new cljs.core.Keyword(null, "outer", "outer", 1120015341), outer_bucket_index);
};
color.ral_picker.clear_inner_focus = function clear_inner_focus() {
  var temp__4126__auto__ = color.ral_picker.outer_index.call(null);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var outer_index = temp__4126__auto__;
    var temp__4126__auto____$1 = color.ral_picker.inner_index.call(null);
    if (cljs.core.truth_(temp__4126__auto____$1)) {
      var inner_index = temp__4126__auto____$1;
      var map__18003 = color.ral_picker.wheel;
      var map__18003__$1 = cljs.core.seq_QMARK_.call(null, map__18003) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18003) : map__18003;
      var center = cljs.core.get.call(null, map__18003__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
      var ctx = cljs.core.get.call(null, map__18003__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
      var band = cljs.core.get.call(null, map__18003__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
      var inner_band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), outer_index));
      color.ral_picker.focus_swatch.call(null, inner_band, inner_index, false, true);
      color.ral_picker.set_cursor_BANG_.call(null, new cljs.core.Keyword(null, "inner", "inner", 1114259912), null);
      return color.ral_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
    } else {
      return null;
    }
  } else {
    return null;
  }
};
color.ral_picker.set_inner_focus = function set_inner_focus(e) {
  var map__18005 = color.ral_picker.wheel;
  var map__18005__$1 = cljs.core.seq_QMARK_.call(null, map__18005) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18005) : map__18005;
  var center = cljs.core.get.call(null, map__18005__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__18005__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var band = cljs.core.get.call(null, map__18005__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var temp__4126__auto__ = color.ral_picker.outer_index.call(null);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var outer_index = temp__4126__auto__;
    var inner_band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), outer_index));
    var inner_index = color.ral_picker.bucket_index.call(null, e, inner_band);
    color.ral_picker.focus_swatch.call(null, inner_band, inner_index, true, true);
    color.ral_picker.set_cursor_BANG_.call(null, new cljs.core.Keyword(null, "inner", "inner", 1114259912), inner_index);
    return color.ral_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "color", "color", 1108746965), color.ral_picker.get_color.call(null, e));
  } else {
    return null;
  }
};
color.ral_picker.redraw = function redraw() {
  var map__18007 = color.ral_picker.wheel;
  var map__18007__$1 = cljs.core.seq_QMARK_.call(null, map__18007) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18007) : map__18007;
  var center = cljs.core.get.call(null, map__18007__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var band = cljs.core.get.call(null, map__18007__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var ctx = cljs.core.get.call(null, map__18007__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var canvas = cljs.core.get.call(null, map__18007__$1, new cljs.core.Keyword(null, "canvas", "canvas", 3941165258));
  html.canvas.clear.call(null, ctx);
  color.ral_picker.draw_color_band.call(null, (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel));
  return color.ral_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "palette", "palette", 4509960685));
};
color.ral_picker.on_mousemove = function on_mousemove(e) {
  var map__18009 = color.ral_picker.wheel;
  var map__18009__$1 = cljs.core.seq_QMARK_.call(null, map__18009) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18009) : map__18009;
  var center = cljs.core.get.call(null, map__18009__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var band = cljs.core.get.call(null, map__18009__$1, new cljs.core.Keyword(null, "band", "band", 1016920487));
  var offset = html.canvas.offset.call(null, e);
  var distance = html.canvas.distance.call(null, center, offset);
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(band);
  var inner_index = color.ral_picker.inner_index.call(null);
  var outer_index = color.ral_picker.outer_index.call(null);
  if (distance <= radius && distance >= radius - (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(band)) {
    var outer_bucket_index = color.ral_picker.bucket_index.call(null, e, band);
    if (cljs.core.truth_(inner_index)) {
      color.ral_picker.clear_inner_focus.call(null);
    } else {
    }
    if (cljs.core.not_EQ_.call(null, outer_bucket_index, outer_index)) {
      color.ral_picker.clear_outer_focus.call(null);
      color.ral_picker.set_outer_focus.call(null, e);
      var inner_band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), outer_bucket_index));
      return color.ral_picker.draw_color_band.call(null, inner_band);
    } else {
      return null;
    }
  } else {
    if (color.ral_picker.in_inner_band_QMARK_.call(null, e)) {
      if (cljs.core.truth_(outer_index)) {
        var inner_band = (new cljs.core.Keyword(null, "band", "band", 1016920487)).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, (new cljs.core.Keyword(null, "swatches", "swatches", 699594076)).cljs$core$IFn$_invoke$arity$1(band), outer_index));
        var inner_bucket_index = color.ral_picker.bucket_index.call(null, e, inner_band);
        if (cljs.core.not_EQ_.call(null, inner_index, inner_bucket_index)) {
          color.ral_picker.clear_inner_focus.call(null);
          return color.ral_picker.set_inner_focus.call(null, e);
        } else {
          return null;
        }
      } else {
        return null;
      }
    } else {
      if (distance > radius) {
        if (cljs.core.truth_(outer_index)) {
          color.ral_picker.clear_inner_focus.call(null);
          color.ral_picker.clear_outer_focus.call(null);
          return color.ral_picker.redraw.call(null);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return color.ral_picker.clear_inner_focus.call(null);
        } else {
          return null;
        }
      }
    }
  }
};
color.ral_picker.on_mousedown = function on_mousedown(e) {
  var temp__4126__auto__ = color.ral_picker.get_color.call(null, e);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var color__$1 = temp__4126__auto__;
    return(new cljs.core.Keyword(null, "callback", "callback", 841683895)).cljs$core$IFn$_invoke$arity$1(color.ral_picker.wheel).call(null, cljs.core.clj__GT_js.call(null, color__$1));
  } else {
    return null;
  }
};
color.ral_picker.on_touchstart = function on_touchstart(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault();
    return color.ral_picker.on_mousemove.call(null, e);
  } else {
    return null;
  }
};
color.ral_picker.on_touchmove = function on_touchmove(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault();
    return color.ral_picker.on_mousemove.call(null, e);
  } else {
    return null;
  }
};
color.ral_picker.on_touchend = function on_touchend(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault();
    return color.ral_picker.on_mousedown.call(null, e);
  } else {
    return null;
  }
};
color.ral_picker.on_mouseout = function on_mouseout(e) {
  color.ral_picker.clear_inner_focus.call(null);
  color.ral_picker.clear_outer_focus.call(null);
  return color.ral_picker.redraw.call(null);
};
color.ral_picker.wheel_fn = function wheel_fn(w, f) {
  return function() {
    var G__18012__delegate = function(args) {
      var wheel18011 = color.ral_picker.wheel;
      try {
        color.ral_picker.wheel = w;
        return cljs.core.apply.call(null, f, args);
      } finally {
        color.ral_picker.wheel = wheel18011;
      }
    };
    var G__18012 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__18012__delegate.call(this, args);
    };
    G__18012.cljs$lang$maxFixedArity = 0;
    G__18012.cljs$lang$applyTo = function(arglist__18013) {
      var args = cljs.core.seq(arglist__18013);
      return G__18012__delegate(args);
    };
    G__18012.cljs$core$IFn$_invoke$arity$variadic = G__18012__delegate;
    return G__18012;
  }();
};
color.ral_picker.init = function init(container, palette, callback) {
  jayq.util.log.call(null, "initializing ral color wheel");
  var options = util.map.deep_merge_with.call(null, cljs.core.identity, color.ral_picker.defaults, cljs.core.PersistentArrayMap.EMPTY);
  var canvas = function() {
    var dom18017 = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    if (195) {
      dom18017.setAttribute("width", 195);
    } else {
    }
    if (195) {
      dom18017.setAttribute("height", 195);
    } else {
    }
    return dom18017;
  }();
  var color_label = function() {
    var dom18018 = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
    if (cljs.core.truth_(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "display", "display", 2685668404), "table-cell", new cljs.core.Keyword(null, "vertical-align", "vertical-align", 3748992352), "middle", new cljs.core.Keyword(null, "max-width", "max-width", 3646439311), "90px"], null))) {
      dom18018.setAttribute("style", dommy.core.style_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "display", "display", 2685668404), "table-cell", new cljs.core.Keyword(null, "vertical-align", "vertical-align", 3748992352), "middle", new cljs.core.Keyword(null, "max-width", "max-width", 3646439311), "90px"], null)));
    } else {
    }
    return dom18018;
  }();
  var wheel18019 = color.ral_picker.wheel;
  try {
    color.ral_picker.wheel = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), options], null);
    var margin = (new cljs.core.Keyword(null, "focus-bar-width", "focus-bar-width", 2384076873)).cljs$core$IFn$_invoke$arity$1(options) + 1;
    var radius = canvas.height / 2 - margin;
    var width = radius / 3;
    var palette__$1 = cljs.core.truth_(cljs.core.get_in.call(null, options, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "palette", "palette", 4509960685), new cljs.core.Keyword(null, "sort", "sort", 1017440528)], null))) ? cljs.core.sort_by.call(null, color.hue, palette) : palette;
    var band = color.ral_picker.make_band.call(null, radius, width, palette__$1);
    color.ral_picker.wheel = cljs.core.assoc.call(null, color.ral_picker.wheel, new cljs.core.Keyword(null, "band", "band", 1016920487), band, new cljs.core.Keyword(null, "callback", "callback", 841683895), callback, new cljs.core.Keyword(null, "canvas", "canvas", 3941165258), canvas, new cljs.core.Keyword(null, "color-label", "color-label", 900292476), color_label, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097), monet.canvas.get_context.call(null, canvas, "2d"), new cljs.core.Keyword(null, 
    "center", "center", 3944857543), html.canvas.center.call(null, canvas), new cljs.core.Keyword(null, "state", "state", 1123661827), cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "outer", "outer", 1120015341), null, new cljs.core.Keyword(null, "inner", "inner", 1114259912), null], null)], null)));
    var wrapper_18020 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", 1123684643), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "position", "position", 1761709211), "relative", new cljs.core.Keyword(null, "height", "height", 4087841945), "195px", new cljs.core.Keyword(null, "width", "width", 1127031096), 
    "195px"], null)], null), canvas, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", 1123684643), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "color", "color", 1108746965), new cljs.core.Keyword(null, "text-align", "text-align", 1760136663), new cljs.core.Keyword(null, "font-size", "font-size", 3722789425), 
    new cljs.core.Keyword(null, "top", "top", 1014019271), new cljs.core.Keyword(null, "overflow", "overflow", 1543546740), new cljs.core.Keyword(null, "width", "width", 1127031096), new cljs.core.Keyword(null, "z-index", "z-index", 3303828785), new cljs.core.Keyword(null, "display", "display", 2685668404), new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.Keyword(null, "height", "height", 4087841945), new cljs.core.Keyword(null, "left", "left", 1017222009)], ["#AAA", 
    "center", "12px", "72px", "hidden", "90px", "-1", "table", "absolute", "50px", "53px"])], null), color_label], null)], null);
    dommy.core.append_BANG_.call(null, document.querySelector(dommy.core.selector.call(null, cljs.core.keyword.call(null, container))), wrapper_18020);
    color.ral_picker.redraw.call(null);
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mousemove", "mousemove", 1601016168), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_mousemove));
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mousedown", "mousedown", 1600748089), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_mousedown));
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchstart", "touchstart", 3730278389), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_touchstart));
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchmove", "touchmove", 1378440962), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_touchmove));
    dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchend", "touchend", 4489339054), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_touchend));
    return dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mouseout", "mouseout", 894298107), color.ral_picker.wheel_fn.call(null, color.ral_picker.wheel, color.ral_picker.on_mouseout));
  } finally {
    color.ral_picker.wheel = wheel18019;
  }
};
goog.exportSymbol("color.ral_picker.init", color.ral_picker.init);
goog.provide("color");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
color.pack_rgb = function pack_rgb(rgb) {
  return cljs.core.apply.call(null, cljs.core.str, "#", cljs.core.map.call(null, function(p1__15023_SHARP_) {
    if (cljs.core.count.call(null, p1__15023_SHARP_) < 2) {
      return "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__15023_SHARP_);
    } else {
      return p1__15023_SHARP_;
    }
  }, cljs.core.map.call(null, function(p1__15022_SHARP_) {
    return p1__15022_SHARP_.toString(16);
  }, cljs.core.map.call(null, function(p1__15021_SHARP_) {
    return Math.round.call(null, p1__15021_SHARP_ * 255);
  }, rgb))));
};
color.unpack_rgb = function unpack_rgb(rgb) {
  return cljs.core.map.call(null, function(p1__15024_SHARP_) {
    return parseInt(cljs.core.apply.call(null, cljs.core.str, "0x", p1__15024_SHARP_)) / 255;
  }, cljs.core.partition.call(null, 2, cljs.core.rest.call(null, rgb)));
};
color.rgb_to_hsl = function rgb_to_hsl(rgb) {
  var vec__15026 = color.unpack_rgb.call(null, rgb);
  var r = cljs.core.nth.call(null, vec__15026, 0, null);
  var g = cljs.core.nth.call(null, vec__15026, 1, null);
  var b = cljs.core.nth.call(null, vec__15026, 2, null);
  var min = function() {
    var x__3891__auto__ = function() {
      var x__3891__auto__ = r;
      var y__3892__auto__ = g;
      return x__3891__auto__ < y__3892__auto__ ? x__3891__auto__ : y__3892__auto__;
    }();
    var y__3892__auto__ = b;
    return x__3891__auto__ < y__3892__auto__ ? x__3891__auto__ : y__3892__auto__;
  }();
  var max = function() {
    var x__3884__auto__ = function() {
      var x__3884__auto__ = r;
      var y__3885__auto__ = g;
      return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
    }();
    var y__3885__auto__ = b;
    return x__3884__auto__ > y__3885__auto__ ? x__3884__auto__ : y__3885__auto__;
  }();
  var delta = max - min;
  var l = (min + max) / 2;
  var s = l > 0 && l < 1 ? delta / (l < 0.5 ? 2 * l : 2 - 2 * l) : 0;
  var h = delta > 0 ? ((cljs.core._EQ_.call(null, max, r) && cljs.core.not_EQ_.call(null, max, g) ? (g - b) / delta : 0) + (cljs.core._EQ_.call(null, max, g) && cljs.core.not_EQ_.call(null, max, b) ? 2 + (b - r) / delta : 0) + (cljs.core._EQ_.call(null, max, b) && cljs.core.not_EQ_.call(null, max, r) ? 4 + (r - g) / delta : 0)) / 6 : 0;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l], null);
};
color.hue_to_rgb = function hue_to_rgb(m1, m2, h) {
  var h__$1 = h < 0 ? h + 1 : h > 1 ? h - 1 : new cljs.core.Keyword(null, "default", "default", 2558708147) ? h : null;
  if (h__$1 * 6 < 1) {
    return m1 + (m2 - m1) * h__$1 * 6;
  } else {
    if (h__$1 * 2 < 1) {
      return m2;
    } else {
      if (h__$1 * 3 < 2) {
        return m1 + (m2 - m1) * (0.66666 - h__$1) * 6;
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return m1;
        } else {
          return null;
        }
      }
    }
  }
};
color.hsl_to_rgb = function hsl_to_rgb(p__15028) {
  var vec__15030 = p__15028;
  var h = cljs.core.nth.call(null, vec__15030, 0, null);
  var s = cljs.core.nth.call(null, vec__15030, 1, null);
  var l = cljs.core.nth.call(null, vec__15030, 2, null);
  var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
  var m1 = l * 2 - m2;
  var f = function(m2, m1, vec__15030, h, s, l) {
    return function(p1__15027_SHARP_) {
      return color.hue_to_rgb.call(null, m1, m2, h + p1__15027_SHARP_);
    };
  }(m2, m1, vec__15030, h, s, l);
  return cljs.core.map.call(null, f, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0.33333, 0, -0.33333], null));
};
color.hsl = function hsl(color__$1) {
  return color.rgb_to_hsl.call(null, (new cljs.core.Keyword(null, "rgb", "rgb", 1014017087)).cljs$core$IFn$_invoke$arity$1(color__$1));
};
color.hue = function hue(color__$1) {
  return cljs.core.first.call(null, color.hsl.call(null, color__$1));
};
color.average = function average(colors) {
  var len = cljs.core.count.call(null, colors);
  return cljs.core.assoc.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), color.pack_rgb.call(null, cljs.core.map.call(null, function(len) {
    return function(p1__15033_SHARP_) {
      return p1__15033_SHARP_ / len;
    };
  }(len), cljs.core.reduce.call(null, function(len) {
    return function(p1__15031_SHARP_, p2__15032_SHARP_) {
      return cljs.core.map.call(null, cljs.core._PLUS_, p1__15031_SHARP_, p2__15032_SHARP_);
    };
  }(len), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, 0, 0], null), cljs.core.map.call(null, color.unpack_rgb, cljs.core.map.call(null, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), colors))))));
};
color.format_name = function() {
  var method_table__4443__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4444__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4445__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4446__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4447__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("format-name", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__4447__auto__, method_table__4443__auto__, prefer_table__4444__auto__, method_cache__4445__auto__, cached_hierarchy__4446__auto__);
}();
color.formatName = function formatName(color__$1) {
  return color.format_name.call(null, edn.convert.call(null, color__$1));
};
goog.exportSymbol("color.formatName", color.formatName);
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj22903 = {};
  return obj22903;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3565__auto__ = reader;
    if (and__3565__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4204__auto__ = reader == null ? null : reader;
    return function() {
      var or__3577__auto__ = cljs.reader.read_char[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.reader.read_char["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3565__auto__ = reader;
    if (and__3565__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4204__auto__ = reader == null ? null : reader;
    return function() {
      var or__3577__auto__ = cljs.reader.unread[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.reader.unread["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3577__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__22904) {
    var rdr = cljs.core.first(arglist__22904);
    var msg = cljs.core.rest(arglist__22904);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3565__auto__ = !(ch === "#");
  if (and__3565__auto__) {
    var and__3565__auto____$1 = !(ch === "'");
    if (and__3565__auto____$1) {
      var and__3565__auto____$2 = !(ch === ":");
      if (and__3565__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3565__auto____$2;
      }
    } else {
      return and__3565__auto____$1;
    }
  } else {
    return and__3565__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__22905 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__22906 = cljs.reader.read_char.call(null, rdr);
      sb = G__22905;
      ch = G__22906;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var zero = groups[2];
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : new cljs.core.Keyword(null, "else", "else", 1017020587) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__22907 = cljs.reader.read_char.call(null, rdr);
      ch = G__22907;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__22908 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__22908;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__22909 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__22909;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3577__auto__ = ch == null;
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3577__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__22910 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__22911 = cljs.reader.read_char.call(null, reader);
      buffer = G__22910;
      ch = G__22911;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__22912 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__22913 = cljs.reader.read_char.call(null, reader);
        buffer = G__22912;
        ch = G__22913;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__22914 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__22915 = cljs.reader.read_char.call(null, reader);
            buffer = G__22914;
            ch = G__22915;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__22917 = o;
    if (G__22917) {
      var bit__4227__auto__ = G__22917.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4227__auto__ || G__22917.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__22917.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__22917);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__22917);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__22918 = reader;
        var G__22919 = eof_is_error;
        var G__22920 = sentinel;
        var G__22921 = is_recursive;
        reader = G__22918;
        eof_is_error = G__22919;
        sentinel = G__22920;
        is_recursive = G__22921;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__22922 = cljs.reader.read_comment.call(null, reader, ch);
          var G__22923 = eof_is_error;
          var G__22924 = sentinel;
          var G__22925 = is_recursive;
          reader = G__22922;
          eof_is_error = G__22923;
          sentinel = G__22924;
          is_recursive = G__22925;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__22926 = reader;
              var G__22927 = eof_is_error;
              var G__22928 = sentinel;
              var G__22929 = is_recursive;
              reader = G__22926;
              eof_is_error = G__22927;
              sentinel = G__22928;
              is_recursive = G__22929;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__22930 = b.append("0");
            b = G__22930;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__22932 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__22932, 0, null);
  var years = cljs.core.nth.call(null, vec__22932, 1, null);
  var months = cljs.core.nth.call(null, vec__22932, 2, null);
  var days = cljs.core.nth.call(null, vec__22932, 3, null);
  var hours = cljs.core.nth.call(null, vec__22932, 4, null);
  var minutes = cljs.core.nth.call(null, vec__22932, 5, null);
  var seconds = cljs.core.nth.call(null, vec__22932, 6, null);
  var fraction = cljs.core.nth.call(null, vec__22932, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__22932, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__22932, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__22932, 10, null);
  var v = vec__22932;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3577__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__22934 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__22934, 0, null);
    var months = cljs.core.nth.call(null, vec__22934, 1, null);
    var days = cljs.core.nth.call(null, vec__22934, 2, null);
    var hours = cljs.core.nth.call(null, vec__22934, 3, null);
    var minutes = cljs.core.nth.call(null, vec__22934, 4, null);
    var seconds = cljs.core.nth.call(null, vec__22934, 5, null);
    var ms = cljs.core.nth.call(null, vec__22934, 6, null);
    var offset = cljs.core.nth.call(null, vec__22934, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__22947_22959 = cljs.core.seq.call(null, form);
    var chunk__22948_22960 = null;
    var count__22949_22961 = 0;
    var i__22950_22962 = 0;
    while (true) {
      if (i__22950_22962 < count__22949_22961) {
        var x_22963 = cljs.core._nth.call(null, chunk__22948_22960, i__22950_22962);
        arr.push(x_22963);
        var G__22964 = seq__22947_22959;
        var G__22965 = chunk__22948_22960;
        var G__22966 = count__22949_22961;
        var G__22967 = i__22950_22962 + 1;
        seq__22947_22959 = G__22964;
        chunk__22948_22960 = G__22965;
        count__22949_22961 = G__22966;
        i__22950_22962 = G__22967;
        continue;
      } else {
        var temp__4126__auto___22968 = cljs.core.seq.call(null, seq__22947_22959);
        if (temp__4126__auto___22968) {
          var seq__22947_22969__$1 = temp__4126__auto___22968;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__22947_22969__$1)) {
            var c__4333__auto___22970 = cljs.core.chunk_first.call(null, seq__22947_22969__$1);
            var G__22971 = cljs.core.chunk_rest.call(null, seq__22947_22969__$1);
            var G__22972 = c__4333__auto___22970;
            var G__22973 = cljs.core.count.call(null, c__4333__auto___22970);
            var G__22974 = 0;
            seq__22947_22959 = G__22971;
            chunk__22948_22960 = G__22972;
            count__22949_22961 = G__22973;
            i__22950_22962 = G__22974;
            continue;
          } else {
            var x_22975 = cljs.core.first.call(null, seq__22947_22969__$1);
            arr.push(x_22975);
            var G__22976 = cljs.core.next.call(null, seq__22947_22969__$1);
            var G__22977 = null;
            var G__22978 = 0;
            var G__22979 = 0;
            seq__22947_22959 = G__22976;
            chunk__22948_22960 = G__22977;
            count__22949_22961 = G__22978;
            i__22950_22962 = G__22979;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj22952 = {};
        return obj22952;
      }();
      var seq__22953_22980 = cljs.core.seq.call(null, form);
      var chunk__22954_22981 = null;
      var count__22955_22982 = 0;
      var i__22956_22983 = 0;
      while (true) {
        if (i__22956_22983 < count__22955_22982) {
          var vec__22957_22984 = cljs.core._nth.call(null, chunk__22954_22981, i__22956_22983);
          var k_22985 = cljs.core.nth.call(null, vec__22957_22984, 0, null);
          var v_22986 = cljs.core.nth.call(null, vec__22957_22984, 1, null);
          obj[cljs.core.name.call(null, k_22985)] = v_22986;
          var G__22987 = seq__22953_22980;
          var G__22988 = chunk__22954_22981;
          var G__22989 = count__22955_22982;
          var G__22990 = i__22956_22983 + 1;
          seq__22953_22980 = G__22987;
          chunk__22954_22981 = G__22988;
          count__22955_22982 = G__22989;
          i__22956_22983 = G__22990;
          continue;
        } else {
          var temp__4126__auto___22991 = cljs.core.seq.call(null, seq__22953_22980);
          if (temp__4126__auto___22991) {
            var seq__22953_22992__$1 = temp__4126__auto___22991;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__22953_22992__$1)) {
              var c__4333__auto___22993 = cljs.core.chunk_first.call(null, seq__22953_22992__$1);
              var G__22994 = cljs.core.chunk_rest.call(null, seq__22953_22992__$1);
              var G__22995 = c__4333__auto___22993;
              var G__22996 = cljs.core.count.call(null, c__4333__auto___22993);
              var G__22997 = 0;
              seq__22953_22980 = G__22994;
              chunk__22954_22981 = G__22995;
              count__22955_22982 = G__22996;
              i__22956_22983 = G__22997;
              continue;
            } else {
              var vec__22958_22998 = cljs.core.first.call(null, seq__22953_22992__$1);
              var k_22999 = cljs.core.nth.call(null, vec__22958_22998, 0, null);
              var v_23000 = cljs.core.nth.call(null, vec__22958_22998, 1, null);
              obj[cljs.core.name.call(null, k_22999)] = v_23000;
              var G__23001 = cljs.core.next.call(null, seq__22953_22992__$1);
              var G__23002 = null;
              var G__23003 = 0;
              var G__23004 = 0;
              seq__22953_22980 = G__23001;
              chunk__22954_22981 = G__23002;
              count__22955_22982 = G__23003;
              i__22956_22983 = G__23004;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__23007) {
    var vec__23008 = p__23007;
    var k = cljs.core.nth.call(null, vec__23008, 0, null);
    var v = cljs.core.nth.call(null, vec__23008, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__23011) {
    var vec__23012 = p__23011;
    var k = cljs.core.nth.call(null, vec__23012, 0, null);
    var v = cljs.core.nth.call(null, vec__23012, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(f) {
    return function(x) {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
      } else {
        return x;
      }
    };
  }(f), m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("edn");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("cljs.reader");
edn.keywordize_vals = function() {
  var method_table__4443__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__4444__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__4445__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__4446__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__4447__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("keywordize-vals", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__4447__auto__, method_table__4443__auto__, prefer_table__4444__auto__, method_cache__4445__auto__, cached_hierarchy__4446__auto__);
}();
cljs.core._add_method.call(null, edn.keywordize_vals, new cljs.core.Keyword(null, "default", "default", 2558708147), function(m) {
  return m;
});
edn.convert = function convert(object) {
  return edn.keywordize_vals.call(null, function(p1__18125_SHARP_) {
    return cljs.core.assoc.call(null, p1__18125_SHARP_, new cljs.core.Keyword(null, "type", "type", 1017479852), cljs.core.keyword.call(null, (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(p1__18125_SHARP_)));
  }.call(null, clojure.walk.keywordize_keys.call(null, cljs.core.js__GT_clj.call(null, object))));
};
edn.stringify = function stringify(object) {
  return cljs.core.pr_str.call(null, edn.convert.call(null, object));
};
goog.exportSymbol("edn.stringify", edn.stringify);
edn.objectify = function objectify(s) {
  return cljs.core.clj__GT_js.call(null, cljs.reader.read_string.call(null, s));
};
goog.exportSymbol("edn.objectify", edn.objectify);
goog.provide("color.valchromat");
goog.require("cljs.core");
goog.require("translate");
goog.require("translate");
goog.require("edn");
goog.require("color");
var raw_18119 = cljs.core.map.call(null, function(p1__18117_SHARP_) {
  return cljs.core.assoc.call(null, p1__18117_SHARP_, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783));
}, new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "light-grey", "light-grey", 758786216), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SLG", "SLG", 1013986432), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8F8F8F"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
"name", "name", 1017277949), new cljs.core.Keyword(null, "grey", "grey", 1017085521), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SCZ", "SCZ", 1013986172), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5A5A5A"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "black", "black", 1107723121), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, 
"SBL", "SBL", 1013986127), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#595853"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "chocolate-brown", "chocolate-brown", 842747351), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SCB", "SCB", 1013986148), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5C4136"], null), new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "brown", "brown", 1107915944), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SBR", "SBR", 1013986133), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9F7769"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "red", "red", 1014017027), new cljs.core.Keyword(null, "code", "code", 
1016963423), new cljs.core.Keyword(null, "SSC", "SSC", 1013986645), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CF4E61"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "orange", "orange", 4300020128), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SOR", "SOR", 1013986536), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#DF784D"], null), new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "yellow", "yellow", 4574631910), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SYW", "SYW", 1013986851), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CBA047"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "code", 
"code", 1016963423), new cljs.core.Keyword(null, "SGR", "SGR", 1013986288), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#549185"], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "blue", "blue", 1016931276), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SRB", "SRB", 1013986613), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4E657E"], null), new cljs.core.PersistentArrayMap(null, 
3, [new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "violet", "violet", 4492527601), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "SVI", "SVI", 1013986744), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#654E6A"], null)], null));
var rgb_oiled_18120 = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "orange", "orange", 4300020128), new cljs.core.Keyword(null, "yellow", "yellow", 4574631910), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "violet", "violet", 4492527601), new cljs.core.Keyword(null, "light-grey", "light-grey", 758786216), new cljs.core.Keyword(null, "red", "red", 1014017027), new cljs.core.Keyword(null, "blue", "blue", 1016931276), new cljs.core.Keyword(null, 
"grey", "grey", 1017085521), new cljs.core.Keyword(null, "brown", "brown", 1107915944), new cljs.core.Keyword(null, "chocolate-brown", "chocolate-brown", 842747351), new cljs.core.Keyword(null, "black", "black", 1107723121)], ["#AB522D", "#A7742F", "#192C28", "#47344A", "#656565", "#A02E3E", "#1A232B", "#2C2C2C", "#694133", "#2D201A", "#151516"]);
var oiled_18121 = cljs.core.map.call(null, function(raw_18119, rgb_oiled_18120) {
  return function(p1__18118_SHARP_) {
    return cljs.core.assoc.call(null, p1__18118_SHARP_, new cljs.core.Keyword(null, "finish", "finish", 4034428933), new cljs.core.Keyword(null, "oiled", "oiled", 1119650147), new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), rgb_oiled_18120.call(null, p1__18118_SHARP_.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949))));
  };
}(raw_18119, rgb_oiled_18120), raw_18119);
color.valchromat.palettes = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "raw", "raw", 1014016922), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colors", "colors", 3954028770), raw_18119, new cljs.core.Keyword(null, "textures-src", "textures-src", 3821787329), "/pie-picker/valchromat-raw-palette-64.jpg", new cljs.core.Keyword(null, "label", "label", 1116631654), new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783)], null), new cljs.core.Keyword(null, 
"oiled", "oiled", 1119650147), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "colors", "colors", 3954028770), oiled_18121, new cljs.core.Keyword(null, "textures-src", "textures-src", 3821787329), "/pie-picker/valchromat-oiled-palette-64.jpg", new cljs.core.Keyword(null, "label", "label", 1116631654), new cljs.core.Keyword(null, "valchromat-oiled", "valchromat-oiled", 3938820627)], null)], null);
color.valchromat.palette_strings = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "en", "en", 1013907483), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783), "Valchromat", new cljs.core.Keyword(null, "valchromat-oiled", "valchromat-oiled", 3938820627), "Oiled Valchromat"], null), new cljs.core.Keyword(null, "fr", "fr", 1013907518), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "valchromat", 
"valchromat", 4365324783), "Valchromat", new cljs.core.Keyword(null, "valchromat-oiled", "valchromat-oiled", 3938820627), "Valchromat Huil\u00e9"], null)], null);
color.valchromat.get_by_name = function get_by_name(palette, name) {
  return cljs.core.first.call(null, cljs.core.filter.call(null, function(p1__18122_SHARP_) {
    return cljs.core._EQ_.call(null, name, (new cljs.core.Keyword(null, "name", "name", 1017277949)).cljs$core$IFn$_invoke$arity$1(p1__18122_SHARP_));
  }, (new cljs.core.Keyword(null, "colors", "colors", 3954028770)).cljs$core$IFn$_invoke$arity$1(palette)));
};
color.valchromat.get_by_name_js = function get_by_name_js(palette, name) {
  return cljs.core.clj__GT_js.call(null, color.valchromat.get_by_name.call(null, color.valchromat.palettes.call(null, cljs.core.keyword.call(null, palette)), cljs.core.keyword.call(null, name)));
};
goog.exportSymbol("color.valchromat.get_by_name_js", color.valchromat.get_by_name_js);
color.valchromat.default_raw_color = cljs.core.clj__GT_js.call(null, color.valchromat.get_by_name.call(null, (new cljs.core.Keyword(null, "raw", "raw", 1014016922)).cljs$core$IFn$_invoke$arity$1(color.valchromat.palettes), new cljs.core.Keyword(null, "red", "red", 1014017027)));
goog.exportSymbol("color.valchromat.default_raw_color", color.valchromat.default_raw_color);
color.valchromat.default_oiled_color = cljs.core.clj__GT_js.call(null, color.valchromat.get_by_name.call(null, (new cljs.core.Keyword(null, "oiled", "oiled", 1119650147)).cljs$core$IFn$_invoke$arity$1(color.valchromat.palettes), new cljs.core.Keyword(null, "red", "red", 1014017027)));
goog.exportSymbol("color.valchromat.default_oiled_color", color.valchromat.default_oiled_color);
cljs.core._add_method.call(null, edn.keywordize_vals, new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783), function(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var temp__4124__auto__ = m__$1.call(null, k);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var v = temp__4124__auto__;
      return cljs.core.assoc.call(null, m__$1, k, cljs.core.keyword.call(null, v));
    } else {
      return m__$1;
    }
  }, m, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finish", "finish", 4034428933), new cljs.core.Keyword(null, "code", "code", 1016963423), new cljs.core.Keyword(null, "name", "name", 1017277949)], null));
});
color.valchromat.color_strings = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "en", "en", 1013907483), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "orange", "orange", 4300020128), new cljs.core.Keyword(null, "yellow", "yellow", 4574631910), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "violet", "violet", 4492527601), new cljs.core.Keyword(null, "light-grey", "light-grey", 758786216), new cljs.core.Keyword(null, 
"red", "red", 1014017027), new cljs.core.Keyword(null, "blue", "blue", 1016931276), new cljs.core.Keyword(null, "grey", "grey", 1017085521), new cljs.core.Keyword(null, "brown", "brown", 1107915944), new cljs.core.Keyword(null, "chocolate-brown", "chocolate-brown", 842747351), new cljs.core.Keyword(null, "black", "black", 1107723121)], ["orange", "yellow", "green", "violet", "light grey", "red", "blue", "grey", "brown", "chocolate brown", "black"]), new cljs.core.Keyword(null, "fr", "fr", 1013907518), 
cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "orange", "orange", 4300020128), new cljs.core.Keyword(null, "yellow", "yellow", 4574631910), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "violet", "violet", 4492527601), new cljs.core.Keyword(null, "light-grey", "light-grey", 758786216), new cljs.core.Keyword(null, "red", "red", 1014017027), new cljs.core.Keyword(null, "blue", "blue", 1016931276), new cljs.core.Keyword(null, "grey", "grey", 
1017085521), new cljs.core.Keyword(null, "brown", "brown", 1107915944), new cljs.core.Keyword(null, "chocolate-brown", "chocolate-brown", 842747351), new cljs.core.Keyword(null, "black", "black", 1107723121)], ["orange", "jaune", "vert", "violet", "gris clair", "rouge", "bleu", "gris", "marron", "marron chocolat", "noir"])], null);
cljs.core._add_method.call(null, color.format_name, new cljs.core.Keyword(null, "valchromat", "valchromat", 4365324783), function(p__18123) {
  var map__18124 = p__18123;
  var map__18124__$1 = cljs.core.seq_QMARK_.call(null, map__18124) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18124) : map__18124;
  var name = cljs.core.get.call(null, map__18124__$1, new cljs.core.Keyword(null, "name", "name", 1017277949));
  return translate.translate.call(null, color.valchromat.color_strings, name);
});
goog.provide("image");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("jayq.util");
goog.require("monet.canvas");
goog.require("monet.canvas");
image.onload = function onload(m, f) {
  if (cljs.core.empty_QMARK_.call(null, m)) {
    return null;
  } else {
    var len = cljs.core.count.call(null, m);
    var a = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var m__$1 = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
      var iter__4302__auto__ = function(len, a) {
        return function iter__15049(s__15050) {
          return new cljs.core.LazySeq(null, function(len, a) {
            return function() {
              var s__15050__$1 = s__15050;
              while (true) {
                var temp__4126__auto__ = cljs.core.seq.call(null, s__15050__$1);
                if (temp__4126__auto__) {
                  var s__15050__$2 = temp__4126__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, s__15050__$2)) {
                    var c__4300__auto__ = cljs.core.chunk_first.call(null, s__15050__$2);
                    var size__4301__auto__ = cljs.core.count.call(null, c__4300__auto__);
                    var b__15052 = cljs.core.chunk_buffer.call(null, size__4301__auto__);
                    if (function() {
                      var i__15051 = 0;
                      while (true) {
                        if (i__15051 < size__4301__auto__) {
                          var vec__15055 = cljs.core._nth.call(null, c__4300__auto__, i__15051);
                          var k = cljs.core.nth.call(null, vec__15055, 0, null);
                          var src = cljs.core.nth.call(null, vec__15055, 1, null);
                          cljs.core.chunk_append.call(null, b__15052, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [src, function() {
                            var img = new Image;
                            var f__$1 = function(i__15051, img, vec__15055, k, src, c__4300__auto__, size__4301__auto__, b__15052, s__15050__$2, temp__4126__auto__, len, a) {
                              return function() {
                                return cljs.core.swap_BANG_.call(null, a, function(i__15051, img, vec__15055, k, src, c__4300__auto__, size__4301__auto__, b__15052, s__15050__$2, temp__4126__auto__, len, a) {
                                  return function(p1__15034_SHARP_) {
                                    return cljs.core.assoc.call(null, p1__15034_SHARP_, k, img);
                                  };
                                }(i__15051, img, vec__15055, k, src, c__4300__auto__, size__4301__auto__, b__15052, s__15050__$2, temp__4126__auto__, len, a));
                              };
                            }(i__15051, img, vec__15055, k, src, c__4300__auto__, size__4301__auto__, b__15052, s__15050__$2, temp__4126__auto__, len, a);
                            img.onabort = f__$1;
                            img.onerror = f__$1;
                            img.onload = f__$1;
                            return img;
                          }()], null));
                          var G__15063 = i__15051 + 1;
                          i__15051 = G__15063;
                          continue;
                        } else {
                          return true;
                        }
                        break;
                      }
                    }()) {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15052), iter__15049.call(null, cljs.core.chunk_rest.call(null, s__15050__$2)));
                    } else {
                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__15052), null);
                    }
                  } else {
                    var vec__15056 = cljs.core.first.call(null, s__15050__$2);
                    var k = cljs.core.nth.call(null, vec__15056, 0, null);
                    var src = cljs.core.nth.call(null, vec__15056, 1, null);
                    return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [src, function() {
                      var img = new Image;
                      var f__$1 = function(img, vec__15056, k, src, s__15050__$2, temp__4126__auto__, len, a) {
                        return function() {
                          return cljs.core.swap_BANG_.call(null, a, function(img, vec__15056, k, src, s__15050__$2, temp__4126__auto__, len, a) {
                            return function(p1__15034_SHARP_) {
                              return cljs.core.assoc.call(null, p1__15034_SHARP_, k, img);
                            };
                          }(img, vec__15056, k, src, s__15050__$2, temp__4126__auto__, len, a));
                        };
                      }(img, vec__15056, k, src, s__15050__$2, temp__4126__auto__, len, a);
                      img.onabort = f__$1;
                      img.onerror = f__$1;
                      img.onload = f__$1;
                      return img;
                    }()], null), iter__15049.call(null, cljs.core.rest.call(null, s__15050__$2)));
                  }
                } else {
                  return null;
                }
                break;
              }
            };
          }(len, a), null, null);
        };
      }(len, a);
      return iter__4302__auto__.call(null, m);
    }());
    cljs.core.add_watch.call(null, a, new cljs.core.Keyword(null, "onload", "onload", 4296654519), function(len, a, m__$1) {
      return function(k, a__$1, old_val, new_val) {
        if (cljs.core._EQ_.call(null, len, cljs.core.count.call(null, new_val))) {
          return f.call(null, new_val);
        } else {
          return null;
        }
      };
    }(len, a, m__$1));
    var seq__15057_15064 = cljs.core.seq.call(null, m__$1);
    var chunk__15058_15065 = null;
    var count__15059_15066 = 0;
    var i__15060_15067 = 0;
    while (true) {
      if (i__15060_15067 < count__15059_15066) {
        var vec__15061_15068 = cljs.core._nth.call(null, chunk__15058_15065, i__15060_15067);
        var src_15069 = cljs.core.nth.call(null, vec__15061_15068, 0, null);
        var img_15070 = cljs.core.nth.call(null, vec__15061_15068, 1, null);
        img_15070.src = src_15069;
        var G__15071 = seq__15057_15064;
        var G__15072 = chunk__15058_15065;
        var G__15073 = count__15059_15066;
        var G__15074 = i__15060_15067 + 1;
        seq__15057_15064 = G__15071;
        chunk__15058_15065 = G__15072;
        count__15059_15066 = G__15073;
        i__15060_15067 = G__15074;
        continue;
      } else {
        var temp__4126__auto___15075 = cljs.core.seq.call(null, seq__15057_15064);
        if (temp__4126__auto___15075) {
          var seq__15057_15076__$1 = temp__4126__auto___15075;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15057_15076__$1)) {
            var c__4333__auto___15077 = cljs.core.chunk_first.call(null, seq__15057_15076__$1);
            var G__15078 = cljs.core.chunk_rest.call(null, seq__15057_15076__$1);
            var G__15079 = c__4333__auto___15077;
            var G__15080 = cljs.core.count.call(null, c__4333__auto___15077);
            var G__15081 = 0;
            seq__15057_15064 = G__15078;
            chunk__15058_15065 = G__15079;
            count__15059_15066 = G__15080;
            i__15060_15067 = G__15081;
            continue;
          } else {
            var vec__15062_15082 = cljs.core.first.call(null, seq__15057_15076__$1);
            var src_15083 = cljs.core.nth.call(null, vec__15062_15082, 0, null);
            var img_15084 = cljs.core.nth.call(null, vec__15062_15082, 1, null);
            img_15084.src = src_15083;
            var G__15085 = cljs.core.next.call(null, seq__15057_15076__$1);
            var G__15086 = null;
            var G__15087 = 0;
            var G__15088 = 0;
            seq__15057_15064 = G__15085;
            chunk__15058_15065 = G__15086;
            count__15059_15066 = G__15087;
            i__15060_15067 = G__15088;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return true;
  }
};
image.get_img = function get_img(src_img, size, index) {
  var width = src_img.width;
  var num_columns = width / size;
  var row = cljs.core.quot.call(null, index, num_columns);
  var col = cljs.core.rem.call(null, index, num_columns);
  var canvas = document.createElement("CANVAS");
  canvas.width = size;
  canvas.height = size;
  monet.canvas.get_context.call(null, canvas, "2d").drawImage(src_img, col * size, row * size, size, size, 0, 0, size, size);
  return canvas;
};
goog.provide("color.ral");
goog.require("cljs.core");
color.ral.palette = cljs.core.map.call(null, function(p1__18113_SHARP_) {
  return cljs.core.assoc.call(null, p1__18113_SHARP_, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "ral", "ral", 1014016911));
}, cljs.core.PersistentVector.fromArray([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#BEBD7F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C2B078"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1002, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C6A664"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E5BE01"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CDA434"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 1005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A98307"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1006, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E4A010"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#DC9D00"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8A6642"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C7B446"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#EAE6CA"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E1CC4F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E6D690"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1016, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#EDFF21"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F5D033"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1018, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F8F32B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1019, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9E9764"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1020, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#999950"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1021, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F3DA0B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 1023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FAD201"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1024, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#AEA04B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FFFF00"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1027, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9D9101"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1028, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F4A900"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1032, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D6AE01"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1033, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F3A505"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1034, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#EFA94A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1035, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#6A5D4D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1036, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#705335"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 1037, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F39F18"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2E3, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#ED760E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C93C20"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CB2821"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 2003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FF7514"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F44611"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FF2301"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FFA420"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F75E25"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F54021"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D84B20"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#EC7C26"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2012, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#E55137"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 2013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C35831"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#AF2B1E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3001, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A52019"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A2231D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9B111E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 3004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#75151E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5E2129"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#412227"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#642424"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#781F19"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C1876B"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A12312"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D36E70"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3015, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#EA899A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3016, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B32821"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E63244"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3018, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D53032"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3020, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CC0605"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D95030"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 3024, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F80000"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FE0000"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3027, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#C51D34"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3028, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CB3234"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3031, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B32428"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3032, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#721422"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 3033, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B44C43"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6D3F5B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4002, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#922B3E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#DE4C8A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#641C34"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4005, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C4675"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4006, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A03472"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4A192C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 4008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#924E7D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A18594"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CF3476"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8673A1"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 4012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C6874"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#354D73"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1F3438"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#20214F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1D1E33"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#18171C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1E2460"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5007, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#3E5F8A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#26252D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#025669"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5010, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#0E294B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#231A24"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3B83BD"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 5013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1E213D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#606E8C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2271B3"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#063971"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5018, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3F888F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5019, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1B5583"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5020, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1D334A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5021, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#256D7B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5022, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#252850"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#49678D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5024, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5D9B9B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5025, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2A6478"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 5026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#102C54"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#316650"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 6001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#287233"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2D572C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#424632"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1F3A3D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2F4538"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6006, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3E3B32"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#343B29"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#39352A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6009, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#31372B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#35682D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#587246"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6012, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#343E40"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C7156"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#47402E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 6015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3B3C36"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6016, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1E5945"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4C9141"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6018, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#57A639"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6019, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#BDECB6"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6020, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2E3A23"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6021, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#89AC76"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#25221B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6024, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#308446"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6025, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#3D642D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#015D52"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6027, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#84C3BE"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6028, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2C5545"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6029, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#20603D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 6032, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#317F43"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6033, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#497E76"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6034, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7FB5B5"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6035, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1C542D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6036, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#193737"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6037, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#008F39"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 6038, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#00BB2D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#78858B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7001, new cljs.core.Keyword(null, "rgb", "rgb", 
1014017087), "#8A9597"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7E7B52"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C7059"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7004, new cljs.core.Keyword(null, 
"rgb", "rgb", 1014017087), "#969992"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#646B63"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7006, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6D6552"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 
7008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6A5F31"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7009, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4D5645"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4C514A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 7011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#434B4D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7012, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4E5754"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7013, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#464531"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#434750"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7016, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#293133"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7021, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#23282B"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#332F2C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#686C5E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7024, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#474A51"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7026, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#2F353B"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7030, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8B8C7A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7031, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#474B4E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7032, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B8B799"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7033, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7D8471"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 7034, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8F8B66"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7035, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D7D7D7"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7036, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7F7679"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7037, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#7D7F7D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7038, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#B5B8B1"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7039, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C6960"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7040, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9DA1AA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7042, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8D948D"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7043, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#4E5452"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7044, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#CAC4B0"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7045, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#909090"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7046, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#82898F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7047, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D0D0D0"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 7048, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#898176"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 8E3, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#826C34"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#955F20"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6C3B2A"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8003, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#734222"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8E402A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#59351F"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8008, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#6F4F28"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#5B3A29"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8012, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#592321"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8014, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#382C1E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8015, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#633A34"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8016, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4C2F27"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#45322E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8019, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#403A3A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 8022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#212121"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A65E2E"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8024, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#79553D"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8025, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#755C48"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8028, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#4E3B31"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 8029, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#763C28"], null), 
new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9001, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FDF4E3"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9002, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#E7EBDA"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9003, new cljs.core.Keyword(null, "rgb", 
"rgb", 1014017087), "#F4F4F4"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9004, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#282828"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9005, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#0A0A0A"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9006, 
new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#A5A5A5"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9007, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#8F8F8F"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9010, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#FFFFFF"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"code", "code", 1016963423), 9011, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1C1C1C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9016, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#F6F6F6"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9017, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#1E1E1E"], null), new cljs.core.PersistentArrayMap(null, 
2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9018, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#D7D7D7"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9022, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#9C9C9C"], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "code", "code", 1016963423), 9023, new cljs.core.Keyword(null, "rgb", "rgb", 1014017087), "#828282"], null)], 
true));
goog.exportSymbol("color.ral.palette", color.ral.palette);
color.ral.get_color = function get_color(ral) {
  return cljs.core.first.call(null, cljs.core.filter.call(null, function(p1__18114_SHARP_) {
    return cljs.core._EQ_.call(null, ral, (new cljs.core.Keyword(null, "code", "code", 1016963423)).cljs$core$IFn$_invoke$arity$1(p1__18114_SHARP_));
  }, color.ral.palette));
};
color.ral.default_color = cljs.core.clj__GT_js.call(null, color.ral.get_color.call(null, 3027));
goog.exportSymbol("color.ral.default_color", color.ral.default_color);
cljs.core._add_method.call(null, color.format_name, new cljs.core.Keyword(null, "ral", "ral", 1014016911), function(p__18115) {
  var map__18116 = p__18115;
  var map__18116__$1 = cljs.core.seq_QMARK_.call(null, map__18116) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18116) : map__18116;
  var code = cljs.core.get.call(null, map__18116__$1, new cljs.core.Keyword(null, "code", "code", 1016963423));
  return "RAL " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(code);
});
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__21919 = level + 1;
        level = G__21919;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_21920 = 0;
    while (true) {
      if (i_21920 < arr.length) {
        arr[i_21920] = null;
        var G__21921 = i_21920 + 1;
        i_21920 = G__21921;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__21922 = x_SINGLEQUOTE_;
                x__$1 = G__21922;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__21923 = x__$1;
        var G__21924 = k;
        var G__21925 = level - 1;
        var G__21926 = update;
        x = G__21923;
        k = G__21924;
        level = G__21925;
        update = G__21926;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
  return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_21927 = self__.level + 1;
      while (true) {
        if (i_21927 <= new_level + 1) {
          update[i_21927] = self__.header;
          var G__21928 = i_21927 + 1;
          i_21927 = G__21928;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_21929 = 0;
    while (true) {
      if (i_21929 <= self__.level) {
        var links_21930 = update[i_21929].forward;
        if (links_21930[i_21929] === x__$1) {
          links_21930[i_21929] = x__$1.forward[i_21929];
          var G__21931 = i_21929 + 1;
          i_21929 = G__21931;
          continue;
        } else {
          var G__21932 = i_21929 + 1;
          i_21929 = G__21932;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__21933 = x_SINGLEQUOTE_;
              x__$1 = G__21933;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__21934 = nx;
        var G__21935 = level__$1 - 1;
        x = G__21934;
        level__$1 = G__21935;
        continue;
      } else {
        var G__21936 = x;
        var G__21937 = level__$1 - 1;
        x = G__21936;
        level__$1 = G__21937;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__21938 = x_SINGLEQUOTE_;
              x__$1 = G__21938;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__21939 = nx;
        var G__21940 = level__$1 - 1;
        x = G__21939;
        level__$1 = G__21940;
        continue;
      } else {
        var G__21941 = x;
        var G__21942 = level__$1 - 1;
        x = G__21941;
        level__$1 = G__21942;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3577__auto__ = cljs.core.truth_(function() {
    var and__3565__auto__ = me;
    if (cljs.core.truth_(and__3565__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3565__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3577__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3577__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("color.val_picker");
goog.require("cljs.core");
goog.require("jayq.util");
goog.require("image");
goog.require("util.map");
goog.require("color.valchromat");
goog.require("translate");
goog.require("html.canvas");
goog.require("color.valchromat");
goog.require("html.canvas");
goog.require("dommy.core");
goog.require("monet.canvas");
goog.require("jayq.util");
goog.require("translate");
goog.require("monet.canvas");
goog.require("image");
goog.require("dommy.core");
color.val_picker.defaults = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "radius", "radius", 4370292740), 94, new cljs.core.Keyword(null, "width", "width", 1127031096), 43, new cljs.core.Keyword(null, "focus-bar-width", "focus-bar-width", 2384076873), 2], null);
color.val_picker.draw_static_wheel = function draw_static_wheel(ctx) {
  var map__18028 = color.val_picker.wheel;
  var map__18028__$1 = cljs.core.seq_QMARK_.call(null, map__18028) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18028) : map__18028;
  var center = cljs.core.get.call(null, map__18028__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var background = cljs.core.get.call(null, map__18028__$1, new cljs.core.Keyword(null, "background", "background", 3976677536));
  var map__18029 = cljs.core.get.call(null, map__18028__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
  var map__18029__$1 = cljs.core.seq_QMARK_.call(null, map__18029) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18029) : map__18029;
  var radius = cljs.core.get.call(null, map__18029__$1, new cljs.core.Keyword(null, "radius", "radius", 4370292740));
  return monet.canvas.stroke.call(null, monet.canvas.stroke_style.call(null, monet.canvas.stroke_width.call(null, html.canvas.arc.call(null, monet.canvas.begin_path.call(null, html.canvas.image.call(null, ctx, (new cljs.core.Keyword(null, "background", "background", 3976677536)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "x", "x", 1013904362), 0, new cljs.core.Keyword(null, "y", "y", 1013904363), 0], null))), center, 
  radius - 0, 0, 2 * Math.PI, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), 4), "#000"));
};
color.val_picker.draw_wheel = function draw_wheel(ctx) {
  var map__18037 = color.val_picker.wheel;
  var map__18037__$1 = cljs.core.seq_QMARK_.call(null, map__18037) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18037) : map__18037;
  var textures = cljs.core.get.call(null, map__18037__$1, new cljs.core.Keyword(null, "textures", "textures", 4306223658));
  var center = cljs.core.get.call(null, map__18037__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var map__18038 = cljs.core.get.call(null, map__18037__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
  var map__18038__$1 = cljs.core.seq_QMARK_.call(null, map__18038) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18038) : map__18038;
  var width = cljs.core.get.call(null, map__18038__$1, new cljs.core.Keyword(null, "width", "width", 1127031096));
  var radius = cljs.core.get.call(null, map__18038__$1, new cljs.core.Keyword(null, "radius", "radius", 4370292740));
  var inner_radius = radius - width;
  var len = cljs.core.count.call(null, textures);
  var angle_fn = function(map__18037, map__18037__$1, textures, center, map__18038, map__18038__$1, width, radius, inner_radius, len) {
    return function(p1__18030_SHARP_) {
      return p1__18030_SHARP_ / len * 2 * Math.PI;
    };
  }(map__18037, map__18037__$1, textures, center, map__18038, map__18038__$1, width, radius, inner_radius, len);
  var seq__18039 = cljs.core.seq.call(null, cljs.core.range.call(null, len));
  var chunk__18040 = null;
  var count__18041 = 0;
  var i__18042 = 0;
  while (true) {
    if (i__18042 < count__18041) {
      var i = cljs.core._nth.call(null, chunk__18040, i__18042);
      var start_angle_18043 = angle_fn.call(null, i);
      var end_angle_18044 = angle_fn.call(null, i + 1);
      var start_18045 = html.canvas.point.call(null, inner_radius * Math.cos.call(null, start_angle_18043) + (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(center), inner_radius * Math.sin.call(null, start_angle_18043) + (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(center));
      var texture_18046 = cljs.core.nth.call(null, textures, i);
      var pattern_18047 = ctx.createPattern(cljs.core.nth.call(null, textures, i), "repeat");
      ctx.fillStyle = pattern_18047;
      monet.canvas.fill.call(null, html.canvas.line_to.call(null, html.canvas.arc.call(null, html.canvas.arc.call(null, html.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), start_18045), center, inner_radius, start_angle_18043, end_angle_18044, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), center, radius, end_angle_18044, start_angle_18043, new cljs.core.Keyword(null, "ccw", "ccw", 1014002569)), start_18045));
      var G__18048 = seq__18039;
      var G__18049 = chunk__18040;
      var G__18050 = count__18041;
      var G__18051 = i__18042 + 1;
      seq__18039 = G__18048;
      chunk__18040 = G__18049;
      count__18041 = G__18050;
      i__18042 = G__18051;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__18039);
      if (temp__4126__auto__) {
        var seq__18039__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__18039__$1)) {
          var c__4333__auto__ = cljs.core.chunk_first.call(null, seq__18039__$1);
          var G__18052 = cljs.core.chunk_rest.call(null, seq__18039__$1);
          var G__18053 = c__4333__auto__;
          var G__18054 = cljs.core.count.call(null, c__4333__auto__);
          var G__18055 = 0;
          seq__18039 = G__18052;
          chunk__18040 = G__18053;
          count__18041 = G__18054;
          i__18042 = G__18055;
          continue;
        } else {
          var i = cljs.core.first.call(null, seq__18039__$1);
          var start_angle_18056 = angle_fn.call(null, i);
          var end_angle_18057 = angle_fn.call(null, i + 1);
          var start_18058 = html.canvas.point.call(null, inner_radius * Math.cos.call(null, start_angle_18056) + (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(center), inner_radius * Math.sin.call(null, start_angle_18056) + (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(center));
          var texture_18059 = cljs.core.nth.call(null, textures, i);
          var pattern_18060 = ctx.createPattern(cljs.core.nth.call(null, textures, i), "repeat");
          ctx.fillStyle = pattern_18060;
          monet.canvas.fill.call(null, html.canvas.line_to.call(null, html.canvas.arc.call(null, html.canvas.arc.call(null, html.canvas.move_to.call(null, monet.canvas.begin_path.call(null, ctx), start_18058), center, inner_radius, start_angle_18056, end_angle_18057, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), center, radius, end_angle_18057, start_angle_18056, new cljs.core.Keyword(null, "ccw", "ccw", 1014002569)), start_18058));
          var G__18061 = cljs.core.next.call(null, seq__18039__$1);
          var G__18062 = null;
          var G__18063 = 0;
          var G__18064 = 0;
          seq__18039 = G__18061;
          chunk__18040 = G__18062;
          count__18041 = G__18063;
          i__18042 = G__18064;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
color.val_picker.set_color_label_BANG_ = function() {
  var set_color_label_BANG___delegate = function(state, p__18065) {
    var vec__18068 = p__18065;
    var index = cljs.core.nth.call(null, vec__18068, 0, null);
    var text = function() {
      var G__18069 = state instanceof cljs.core.Keyword ? state.fqn : null;
      switch(G__18069) {
        case "color":
          return color.format_name.call(null, cljs.core.nth.call(null, (new cljs.core.Keyword(null, "palette", "palette", 4509960685)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel), index));
          break;
        case "palette":
          return translate.translate.call(null, color.valchromat.palette_strings, (new cljs.core.Keyword(null, "label", "label", 1116631654)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel));
          break;
        case "empty":
          return "";
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(state));;
      }
    }();
    return dommy.core.set_text_BANG_.call(null, (new cljs.core.Keyword(null, "color-label", "color-label", 900292476)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel), text);
  };
  var set_color_label_BANG_ = function(state, var_args) {
    var p__18065 = null;
    if (arguments.length > 1) {
      p__18065 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_color_label_BANG___delegate.call(this, state, p__18065);
  };
  set_color_label_BANG_.cljs$lang$maxFixedArity = 1;
  set_color_label_BANG_.cljs$lang$applyTo = function(arglist__18071) {
    var state = cljs.core.first(arglist__18071);
    var p__18065 = cljs.core.rest(arglist__18071);
    return set_color_label_BANG___delegate(state, p__18065);
  };
  set_color_label_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_color_label_BANG___delegate;
  return set_color_label_BANG_;
}();
color.val_picker.redraw = function redraw() {
  var map__18073 = color.val_picker.wheel;
  var map__18073__$1 = cljs.core.seq_QMARK_.call(null, map__18073) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18073) : map__18073;
  var ctx = cljs.core.get.call(null, map__18073__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  color.val_picker.draw_wheel.call(null, monet.canvas.text_align.call(null, monet.canvas.font_style.call(null, monet.canvas.fill_style.call(null, html.canvas.clear.call(null, ctx), new cljs.core.Keyword(null, "#777", "#777", 1015001542)), "bold 12px Arial"), new cljs.core.Keyword(null, "left", "left", 1017222009)));
  return color.val_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "palette", "palette", 4509960685));
};
color.val_picker.normalize_angle = function normalize_angle(angle) {
  if (angle >= 0) {
    return angle;
  } else {
    return angle + 2 * Math.PI;
  }
};
color.val_picker.bucket_index = function bucket_index(e) {
  var offset = html.canvas.offset.call(null, e);
  var center = html.canvas.center.call(null, e);
  var p = html.canvas.point_diff.call(null, offset, center);
  var theta = color.val_picker.normalize_angle.call(null, Math.atan2.call(null, (new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(p), (new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(p)));
  var bucket_arc = Math.PI * 2 / cljs.core.count.call(null, (new cljs.core.Keyword(null, "palette", "palette", 4509960685)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel));
  return Math.floor.call(null, theta / bucket_arc);
};
color.val_picker.focus_swatch = function focus_swatch(index, focus_QMARK_) {
  var map__18076 = color.val_picker.wheel;
  var map__18076__$1 = cljs.core.seq_QMARK_.call(null, map__18076) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18076) : map__18076;
  var palette = cljs.core.get.call(null, map__18076__$1, new cljs.core.Keyword(null, "palette", "palette", 4509960685));
  var center = cljs.core.get.call(null, map__18076__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__18076__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var map__18077 = cljs.core.get.call(null, map__18076__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
  var map__18077__$1 = cljs.core.seq_QMARK_.call(null, map__18077) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18077) : map__18077;
  var radius = cljs.core.get.call(null, map__18077__$1, new cljs.core.Keyword(null, "radius", "radius", 4370292740));
  var radius__$1 = radius + 2;
  var palette_length = cljs.core.count.call(null, palette);
  var start_angle = Math.PI * 2 * index / palette_length;
  var end_angle = Math.PI * 2 * (index + 1) / palette_length;
  var start_angle__$1 = start_angle - (cljs.core.truth_(focus_QMARK_) ? 0 : 0.02);
  var end_angle__$1 = end_angle + (cljs.core.truth_(focus_QMARK_) ? 0 : 0.02);
  var start_angle__$2 = color.val_picker.normalize_angle.call(null, start_angle__$1);
  var end_angle__$2 = color.val_picker.normalize_angle.call(null, end_angle__$1);
  return monet.canvas.stroke.call(null, monet.canvas.stroke_style.call(null, monet.canvas.stroke_width.call(null, html.canvas.arc.call(null, monet.canvas.begin_path.call(null, ctx), center, radius__$1, start_angle__$2, end_angle__$2, new cljs.core.Keyword(null, "cw", "cw", 1013907430)), cljs.core.get_in.call(null, color.val_picker.wheel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "opts", "opts", 1017322386), new cljs.core.Keyword(null, 
  "focus-bar-width", "focus-bar-width", 2384076873)], null)) + (cljs.core.truth_(focus_QMARK_) ? 0 : 1)), cljs.core.truth_(focus_QMARK_) ? "#fff" : "#000"));
};
color.val_picker.clear_focus = function clear_focus() {
  var temp__4126__auto__ = color.val_picker.wheel;
  if (cljs.core.truth_(temp__4126__auto__)) {
    var map__18080 = temp__4126__auto__;
    var map__18080__$1 = cljs.core.seq_QMARK_.call(null, map__18080) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18080) : map__18080;
    var cursor = cljs.core.get.call(null, map__18080__$1, new cljs.core.Keyword(null, "cursor", "cursor", 3959752392));
    var map__18081_18082 = color.val_picker.wheel;
    var map__18081_18083__$1 = cljs.core.seq_QMARK_.call(null, map__18081_18082) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18081_18082) : map__18081_18082;
    var center_18084 = cljs.core.get.call(null, map__18081_18083__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
    var ctx_18085 = cljs.core.get.call(null, map__18081_18083__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
    color.val_picker.focus_swatch.call(null, cljs.core.deref.call(null, cursor), false);
    return cljs.core.swap_BANG_.call(null, cursor, cljs.core.constantly.call(null, null));
  } else {
    return null;
  }
};
color.val_picker.set_focus = function set_focus(e) {
  var map__18087 = color.val_picker.wheel;
  var map__18087__$1 = cljs.core.seq_QMARK_.call(null, map__18087) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18087) : map__18087;
  var cursor = cljs.core.get.call(null, map__18087__$1, new cljs.core.Keyword(null, "cursor", "cursor", 3959752392));
  var center = cljs.core.get.call(null, map__18087__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var ctx = cljs.core.get.call(null, map__18087__$1, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097));
  var index = color.val_picker.bucket_index.call(null, e);
  color.val_picker.focus_swatch.call(null, index, true);
  color.val_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "color", "color", 1108746965), index);
  return cljs.core.swap_BANG_.call(null, cursor, cljs.core.constantly.call(null, index));
};
color.val_picker.on_mousemove = function on_mousemove(e) {
  var map__18089 = color.val_picker.wheel;
  var map__18089__$1 = cljs.core.seq_QMARK_.call(null, map__18089) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18089) : map__18089;
  var cursor = cljs.core.get.call(null, map__18089__$1, new cljs.core.Keyword(null, "cursor", "cursor", 3959752392));
  var opts = cljs.core.get.call(null, map__18089__$1, new cljs.core.Keyword(null, "opts", "opts", 1017322386));
  var center = cljs.core.get.call(null, map__18089__$1, new cljs.core.Keyword(null, "center", "center", 3944857543));
  var offset = html.canvas.offset.call(null, e);
  var distance = html.canvas.distance.call(null, center, offset);
  var radius = (new cljs.core.Keyword(null, "radius", "radius", 4370292740)).cljs$core$IFn$_invoke$arity$1(opts);
  var width = (new cljs.core.Keyword(null, "width", "width", 1127031096)).cljs$core$IFn$_invoke$arity$1(opts);
  if (distance <= radius && distance >= radius - width) {
    var index = color.val_picker.bucket_index.call(null, e);
    if (cljs.core.not_EQ_.call(null, cljs.core.deref.call(null, cursor), index)) {
      color.val_picker.clear_focus.call(null);
      return color.val_picker.set_focus.call(null, e);
    } else {
      return null;
    }
  } else {
    if (distance > radius) {
      if (cljs.core.truth_(cljs.core.deref.call(null, cursor))) {
        color.val_picker.clear_focus.call(null);
        return color.val_picker.redraw.call(null);
      } else {
        return null;
      }
    } else {
      if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
        if (cljs.core.truth_(cljs.core.deref.call(null, cursor))) {
          color.val_picker.set_color_label_BANG_.call(null, new cljs.core.Keyword(null, "empty", "empty", 1110538431));
          return color.val_picker.clear_focus.call(null);
        } else {
          return null;
        }
      } else {
        return null;
      }
    }
  }
};
color.val_picker.on_mousedown = function on_mousedown(e) {
  jayq.util.log.call(null, "mousedown");
  var temp__4126__auto__ = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "cursor", "cursor", 3959752392)).cljs$core$IFn$_invoke$arity$1(color.val_picker.wheel));
  if (cljs.core.truth_(temp__4126__auto__)) {
    var index = temp__4126__auto__;
    var map__18091 = color.val_picker.wheel;
    var map__18091__$1 = cljs.core.seq_QMARK_.call(null, map__18091) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18091) : map__18091;
    var palette = cljs.core.get.call(null, map__18091__$1, new cljs.core.Keyword(null, "palette", "palette", 4509960685));
    var callback = cljs.core.get.call(null, map__18091__$1, new cljs.core.Keyword(null, "callback", "callback", 841683895));
    var color__$1 = cljs.core.nth.call(null, palette, index);
    return callback.call(null, cljs.core.clj__GT_js.call(null, color__$1));
  } else {
    return null;
  }
};
color.val_picker.on_touchstart = function on_touchstart(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault();
    return color.val_picker.on_mousemove.call(null, e);
  } else {
    return null;
  }
};
color.val_picker.on_touchmove = function on_touchmove(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault;
    return color.val_picker.on_mousemove.call(null, e);
  } else {
    return null;
  }
};
color.val_picker.on_touchend = function on_touchend(e) {
  if (cljs.core._EQ_.call(null, 1, e.touches.length)) {
    e.preventDefault;
    return color.val_picker.on_mousedown.call(null, e);
  } else {
    return null;
  }
};
color.val_picker.on_mouseout = function on_mouseout(e) {
  color.val_picker.clear_focus.call(null);
  return color.val_picker.redraw.call(null);
};
color.val_picker.wheel_fn = function wheel_fn(w, f) {
  return function() {
    var G__18094__delegate = function(args) {
      var wheel18093 = color.val_picker.wheel;
      try {
        color.val_picker.wheel = w;
        return cljs.core.apply.call(null, f, args);
      } finally {
        color.val_picker.wheel = wheel18093;
      }
    };
    var G__18094 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__18094__delegate.call(this, args);
    };
    G__18094.cljs$lang$maxFixedArity = 0;
    G__18094.cljs$lang$applyTo = function(arglist__18095) {
      var args = cljs.core.seq(arglist__18095);
      return G__18094__delegate(args);
    };
    G__18094.cljs$core$IFn$_invoke$arity$variadic = G__18094__delegate;
    return G__18094;
  }();
};
color.val_picker.init = function init(container, palette_name, callback) {
  jayq.util.log.call(null, "initializing valchromat wheel ", palette_name);
  var canvas = function() {
    var dom18105 = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
    if (195) {
      dom18105.setAttribute("width", 195);
    } else {
    }
    if (195) {
      dom18105.setAttribute("height", 195);
    } else {
    }
    return dom18105;
  }();
  var color_label = function() {
    var dom18106 = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
    if (cljs.core.truth_(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "display", "display", 2685668404), "table-cell", new cljs.core.Keyword(null, "vertical-align", "vertical-align", 3748992352), "middle", new cljs.core.Keyword(null, "max-width", "max-width", 3646439311), "90px"], null))) {
      dom18106.setAttribute("style", dommy.core.style_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "display", "display", 2685668404), "table-cell", new cljs.core.Keyword(null, "vertical-align", "vertical-align", 3748992352), "middle", new cljs.core.Keyword(null, "max-width", "max-width", 3646439311), "90px"], null)));
    } else {
    }
    return dom18106;
  }();
  var map__18104 = cljs.core.keyword.call(null, palette_name).call(null, color.valchromat.palettes);
  var map__18104__$1 = cljs.core.seq_QMARK_.call(null, map__18104) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18104) : map__18104;
  var label = cljs.core.get.call(null, map__18104__$1, new cljs.core.Keyword(null, "label", "label", 1116631654));
  var textures_src = cljs.core.get.call(null, map__18104__$1, new cljs.core.Keyword(null, "textures-src", "textures-src", 3821787329));
  var colors = cljs.core.get.call(null, map__18104__$1, new cljs.core.Keyword(null, "colors", "colors", 3954028770));
  return image.onload.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "textures", "textures", 4306223658), textures_src], null), function(canvas, color_label, map__18104, map__18104__$1, label, textures_src, colors) {
    return function(images18107) {
      var textures = (new cljs.core.Keyword(null, "textures", "textures", 4306223658)).cljs$core$IFn$_invoke$arity$1(images18107);
      color.val_picker.wheel = cljs.core.assoc.call(null, color.val_picker.wheel, new cljs.core.Keyword(null, "opts", "opts", 1017322386), color.val_picker.defaults, new cljs.core.Keyword(null, "palette", "palette", 4509960685), colors, new cljs.core.Keyword(null, "textures", "textures", 4306223658), function() {
        var iter__4302__auto__ = function(textures, canvas, color_label, map__18104, map__18104__$1, label, textures_src, colors) {
          return function iter__18108(s__18109) {
            return new cljs.core.LazySeq(null, function(textures, canvas, color_label, map__18104, map__18104__$1, label, textures_src, colors) {
              return function() {
                var s__18109__$1 = s__18109;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__18109__$1);
                  if (temp__4126__auto__) {
                    var s__18109__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__18109__$2)) {
                      var c__4300__auto__ = cljs.core.chunk_first.call(null, s__18109__$2);
                      var size__4301__auto__ = cljs.core.count.call(null, c__4300__auto__);
                      var b__18111 = cljs.core.chunk_buffer.call(null, size__4301__auto__);
                      if (function() {
                        var i__18110 = 0;
                        while (true) {
                          if (i__18110 < size__4301__auto__) {
                            var i = cljs.core._nth.call(null, c__4300__auto__, i__18110);
                            cljs.core.chunk_append.call(null, b__18111, image.get_img.call(null, textures, 64, i));
                            var G__18112 = i__18110 + 1;
                            i__18110 = G__18112;
                            continue;
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18111), iter__18108.call(null, cljs.core.chunk_rest.call(null, s__18109__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__18111), null);
                      }
                    } else {
                      var i = cljs.core.first.call(null, s__18109__$2);
                      return cljs.core.cons.call(null, image.get_img.call(null, textures, 64, i), iter__18108.call(null, cljs.core.rest.call(null, s__18109__$2)));
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(textures, canvas, color_label, map__18104, map__18104__$1, label, textures_src, colors), null, null);
          };
        }(textures, canvas, color_label, map__18104, map__18104__$1, label, textures_src, colors);
        return iter__4302__auto__.call(null, cljs.core.range.call(null, 11));
      }(), new cljs.core.Keyword(null, "canvas", "canvas", 3941165258), canvas, new cljs.core.Keyword(null, "color-label", "color-label", 900292476), color_label, new cljs.core.Keyword(null, "label", "label", 1116631654), label, new cljs.core.Keyword(null, "callback", "callback", 841683895), callback, new cljs.core.Keyword(null, "ctx", "ctx", 1014003097), monet.canvas.get_context.call(null, canvas, "2d"), new cljs.core.Keyword(null, "center", "center", 3944857543), html.canvas.center.call(null, canvas), 
      new cljs.core.Keyword(null, "cursor", "cursor", 3959752392), cljs.core.atom.call(null, null));
      var wrapper = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", 1123684643), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "position", "position", 1761709211), "relative"], null)], null), canvas, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
      "div", "div", 1014003715), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", 1123684643), cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "color", "color", 1108746965), new cljs.core.Keyword(null, "text-align", "text-align", 1760136663), new cljs.core.Keyword(null, "font-size", "font-size", 3722789425), new cljs.core.Keyword(null, "top", "top", 1014019271), new cljs.core.Keyword(null, "overflow", "overflow", 1543546740), new cljs.core.Keyword(null, 
      "width", "width", 1127031096), new cljs.core.Keyword(null, "z-index", "z-index", 3303828785), new cljs.core.Keyword(null, "display", "display", 2685668404), new cljs.core.Keyword(null, "position", "position", 1761709211), new cljs.core.Keyword(null, "height", "height", 4087841945), new cljs.core.Keyword(null, "left", "left", 1017222009)], ["#AAA", "center", "12px", "72px", "hidden", "90px", "-1", "table", "absolute", "50px", "53px"])], null), color_label], null)], null);
      dommy.core.append_BANG_.call(null, document.querySelector(dommy.core.selector.call(null, cljs.core.keyword.call(null, container))), wrapper);
      color.val_picker.redraw.call(null);
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mousemove", "mousemove", 1601016168), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_mousemove));
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mousedown", "mousedown", 1600748089), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_mousedown));
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchstart", "touchstart", 3730278389), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_touchstart));
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchmove", "touchmove", 1378440962), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_touchmove));
      dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "touchend", "touchend", 4489339054), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_touchend));
      return dommy.core.listen_BANG_.call(null, canvas, new cljs.core.Keyword(null, "mouseout", "mouseout", 894298107), color.val_picker.wheel_fn.call(null, color.val_picker.wheel, color.val_picker.on_mouseout));
    };
  }(canvas, color_label, map__18104, map__18104__$1, label, textures_src, colors));
};
goog.exportSymbol("color.val_picker.init", color.val_picker.init);
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t19270 !== "undefined") {
  } else {
    cljs.core.async.t19270 = function(f, fn_handler, meta19271) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta19271 = meta19271;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t19270.cljs$lang$type = true;
    cljs.core.async.t19270.cljs$lang$ctorStr = "cljs.core.async/t19270";
    cljs.core.async.t19270.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
      return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t19270");
    };
    cljs.core.async.t19270.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t19270.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t19270.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t19270.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19272) {
      var self__ = this;
      var _19272__$1 = this;
      return self__.meta19271;
    };
    cljs.core.async.t19270.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19272, meta19271__$1) {
      var self__ = this;
      var _19272__$1 = this;
      return new cljs.core.async.t19270(self__.f, self__.fn_handler, meta19271__$1);
    };
    cljs.core.async.__GT_t19270 = function __GT_t19270(f__$1, fn_handler__$1, meta19271) {
      return new cljs.core.async.t19270(f__$1, fn_handler__$1, meta19271);
    };
  }
  return new cljs.core.async.t19270(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__19274 = buff;
  if (G__19274) {
    var bit__4227__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3577__auto__ = bit__4227__auto__;
      if (cljs.core.truth_(or__3577__auto__)) {
        return or__3577__auto__;
      } else {
        return G__19274.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__19274.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__19274);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__19274);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_19275 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_19275);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_19275, ret) {
          return function() {
            return fn1.call(null, val_19275);
          };
        }(val_19275, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4433__auto___19276 = n;
  var x_19277 = 0;
  while (true) {
    if (x_19277 < n__4433__auto___19276) {
      a[x_19277] = 0;
      var G__19278 = x_19277 + 1;
      x_19277 = G__19278;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__19279 = i + 1;
      i = G__19279;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t19283 !== "undefined") {
  } else {
    cljs.core.async.t19283 = function(flag, alt_flag, meta19284) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta19284 = meta19284;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t19283.cljs$lang$type = true;
    cljs.core.async.t19283.cljs$lang$ctorStr = "cljs.core.async/t19283";
    cljs.core.async.t19283.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
        return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t19283");
      };
    }(flag);
    cljs.core.async.t19283.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t19283.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t19283.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t19283.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_19285) {
        var self__ = this;
        var _19285__$1 = this;
        return self__.meta19284;
      };
    }(flag);
    cljs.core.async.t19283.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_19285, meta19284__$1) {
        var self__ = this;
        var _19285__$1 = this;
        return new cljs.core.async.t19283(self__.flag, self__.alt_flag, meta19284__$1);
      };
    }(flag);
    cljs.core.async.__GT_t19283 = function(flag) {
      return function __GT_t19283(flag__$1, alt_flag__$1, meta19284) {
        return new cljs.core.async.t19283(flag__$1, alt_flag__$1, meta19284);
      };
    }(flag);
  }
  return new cljs.core.async.t19283(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t19289 !== "undefined") {
  } else {
    cljs.core.async.t19289 = function(cb, flag, alt_handler, meta19290) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta19290 = meta19290;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t19289.cljs$lang$type = true;
    cljs.core.async.t19289.cljs$lang$ctorStr = "cljs.core.async/t19289";
    cljs.core.async.t19289.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
      return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t19289");
    };
    cljs.core.async.t19289.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t19289.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t19289.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t19289.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19291) {
      var self__ = this;
      var _19291__$1 = this;
      return self__.meta19290;
    };
    cljs.core.async.t19289.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19291, meta19290__$1) {
      var self__ = this;
      var _19291__$1 = this;
      return new cljs.core.async.t19289(self__.cb, self__.flag, self__.alt_handler, meta19290__$1);
    };
    cljs.core.async.__GT_t19289 = function __GT_t19289(cb__$1, flag__$1, alt_handler__$1, meta19290) {
      return new cljs.core.async.t19289(cb__$1, flag__$1, alt_handler__$1, meta19290);
    };
  }
  return new cljs.core.async.t19289(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__19292_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__19292_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__19293_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__19293_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3577__auto__ = wport;
            if (cljs.core.truth_(or__3577__auto__)) {
              return or__3577__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__19294 = i + 1;
          i = G__19294;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3577__auto__ = ret;
  if (cljs.core.truth_(or__3577__auto__)) {
    return or__3577__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4126__auto__ = function() {
        var and__3565__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3565__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3565__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__19295) {
    var map__19297 = p__19295;
    var map__19297__$1 = cljs.core.seq_QMARK_.call(null, map__19297) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19297) : map__19297;
    var opts = map__19297__$1;
    if (null) {
      return null;
    } else {
      throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__19295 = null;
    if (arguments.length > 1) {
      p__19295 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__19295);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__19298) {
    var ports = cljs.core.first(arglist__19298);
    var p__19295 = cljs.core.rest(arglist__19298);
    return alts_BANG___delegate(ports, p__19295);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t19306 !== "undefined") {
  } else {
    cljs.core.async.t19306 = function(ch, f, map_LT_, meta19307) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta19307 = meta19307;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t19306.cljs$lang$type = true;
    cljs.core.async.t19306.cljs$lang$ctorStr = "cljs.core.async/t19306";
    cljs.core.async.t19306.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
      return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t19306");
    };
    cljs.core.async.t19306.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t19306.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t19306.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t19306.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t19309 !== "undefined") {
        } else {
          cljs.core.async.t19309 = function(fn1, _, meta19307, ch, f, map_LT_, meta19310) {
            this.fn1 = fn1;
            this._ = _;
            this.meta19307 = meta19307;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta19310 = meta19310;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t19309.cljs$lang$type = true;
          cljs.core.async.t19309.cljs$lang$ctorStr = "cljs.core.async/t19309";
          cljs.core.async.t19309.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
              return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t19309");
            };
          }(___$1);
          cljs.core.async.t19309.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t19309.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t19309.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t19309.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__19299_SHARP_) {
                  return f1.call(null, p1__19299_SHARP_ == null ? null : self__.f.call(null, p1__19299_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t19309.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_19311) {
              var self__ = this;
              var _19311__$1 = this;
              return self__.meta19310;
            };
          }(___$1);
          cljs.core.async.t19309.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_19311, meta19310__$1) {
              var self__ = this;
              var _19311__$1 = this;
              return new cljs.core.async.t19309(self__.fn1, self__._, self__.meta19307, self__.ch, self__.f, self__.map_LT_, meta19310__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t19309 = function(___$1) {
            return function __GT_t19309(fn1__$1, ___$2, meta19307__$1, ch__$2, f__$2, map_LT___$2, meta19310) {
              return new cljs.core.async.t19309(fn1__$1, ___$2, meta19307__$1, ch__$2, f__$2, map_LT___$2, meta19310);
            };
          }(___$1);
        }
        return new cljs.core.async.t19309(fn1, ___$1, self__.meta19307, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3565__auto__ = ret;
        if (cljs.core.truth_(and__3565__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3565__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t19306.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t19306.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t19306.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t19306.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19308) {
      var self__ = this;
      var _19308__$1 = this;
      return self__.meta19307;
    };
    cljs.core.async.t19306.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19308, meta19307__$1) {
      var self__ = this;
      var _19308__$1 = this;
      return new cljs.core.async.t19306(self__.ch, self__.f, self__.map_LT_, meta19307__$1);
    };
    cljs.core.async.__GT_t19306 = function __GT_t19306(ch__$1, f__$1, map_LT___$1, meta19307) {
      return new cljs.core.async.t19306(ch__$1, f__$1, map_LT___$1, meta19307);
    };
  }
  return new cljs.core.async.t19306(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t19315 !== "undefined") {
  } else {
    cljs.core.async.t19315 = function(ch, f, map_GT_, meta19316) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta19316 = meta19316;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t19315.cljs$lang$type = true;
    cljs.core.async.t19315.cljs$lang$ctorStr = "cljs.core.async/t19315";
    cljs.core.async.t19315.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
      return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t19315");
    };
    cljs.core.async.t19315.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t19315.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t19315.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t19315.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t19315.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t19315.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t19315.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19317) {
      var self__ = this;
      var _19317__$1 = this;
      return self__.meta19316;
    };
    cljs.core.async.t19315.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19317, meta19316__$1) {
      var self__ = this;
      var _19317__$1 = this;
      return new cljs.core.async.t19315(self__.ch, self__.f, self__.map_GT_, meta19316__$1);
    };
    cljs.core.async.__GT_t19315 = function __GT_t19315(ch__$1, f__$1, map_GT___$1, meta19316) {
      return new cljs.core.async.t19315(ch__$1, f__$1, map_GT___$1, meta19316);
    };
  }
  return new cljs.core.async.t19315(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t19321 !== "undefined") {
  } else {
    cljs.core.async.t19321 = function(ch, p, filter_GT_, meta19322) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta19322 = meta19322;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t19321.cljs$lang$type = true;
    cljs.core.async.t19321.cljs$lang$ctorStr = "cljs.core.async/t19321";
    cljs.core.async.t19321.cljs$lang$ctorPrWriter = function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
      return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t19321");
    };
    cljs.core.async.t19321.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t19321.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t19321.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t19321.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t19321.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t19321.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t19321.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t19321.prototype.cljs$core$IMeta$_meta$arity$1 = function(_19323) {
      var self__ = this;
      var _19323__$1 = this;
      return self__.meta19322;
    };
    cljs.core.async.t19321.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_19323, meta19322__$1) {
      var self__ = this;
      var _19323__$1 = this;
      return new cljs.core.async.t19321(self__.ch, self__.p, self__.filter_GT_, meta19322__$1);
    };
    cljs.core.async.__GT_t19321 = function __GT_t19321(ch__$1, p__$1, filter_GT___$1, meta19322) {
      return new cljs.core.async.t19321(ch__$1, p__$1, filter_GT___$1, meta19322);
    };
  }
  return new cljs.core.async.t19321(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6478__auto___19406 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___19406, out) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___19406, out) {
            return function(state_19385) {
              var state_val_19386 = state_19385[1];
              if (state_val_19386 === 7) {
                var inst_19381 = state_19385[2];
                var state_19385__$1 = state_19385;
                var statearr_19387_19407 = state_19385__$1;
                statearr_19387_19407[2] = inst_19381;
                statearr_19387_19407[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19386 === 1) {
                  var state_19385__$1 = state_19385;
                  var statearr_19388_19408 = state_19385__$1;
                  statearr_19388_19408[2] = null;
                  statearr_19388_19408[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_19386 === 4) {
                    var inst_19367 = state_19385[7];
                    var inst_19367__$1 = state_19385[2];
                    var inst_19368 = inst_19367__$1 == null;
                    var state_19385__$1 = function() {
                      var statearr_19389 = state_19385;
                      statearr_19389[7] = inst_19367__$1;
                      return statearr_19389;
                    }();
                    if (cljs.core.truth_(inst_19368)) {
                      var statearr_19390_19409 = state_19385__$1;
                      statearr_19390_19409[1] = 5;
                    } else {
                      var statearr_19391_19410 = state_19385__$1;
                      statearr_19391_19410[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_19386 === 6) {
                      var inst_19367 = state_19385[7];
                      var inst_19372 = p.call(null, inst_19367);
                      var state_19385__$1 = state_19385;
                      if (cljs.core.truth_(inst_19372)) {
                        var statearr_19392_19411 = state_19385__$1;
                        statearr_19392_19411[1] = 8;
                      } else {
                        var statearr_19393_19412 = state_19385__$1;
                        statearr_19393_19412[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_19386 === 3) {
                        var inst_19383 = state_19385[2];
                        var state_19385__$1 = state_19385;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19385__$1, inst_19383);
                      } else {
                        if (state_val_19386 === 2) {
                          var state_19385__$1 = state_19385;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19385__$1, 4, ch);
                        } else {
                          if (state_val_19386 === 11) {
                            var inst_19375 = state_19385[2];
                            var state_19385__$1 = state_19385;
                            var statearr_19394_19413 = state_19385__$1;
                            statearr_19394_19413[2] = inst_19375;
                            statearr_19394_19413[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19386 === 9) {
                              var state_19385__$1 = state_19385;
                              var statearr_19395_19414 = state_19385__$1;
                              statearr_19395_19414[2] = null;
                              statearr_19395_19414[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_19386 === 5) {
                                var inst_19370 = cljs.core.async.close_BANG_.call(null, out);
                                var state_19385__$1 = state_19385;
                                var statearr_19396_19415 = state_19385__$1;
                                statearr_19396_19415[2] = inst_19370;
                                statearr_19396_19415[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_19386 === 10) {
                                  var inst_19378 = state_19385[2];
                                  var state_19385__$1 = function() {
                                    var statearr_19397 = state_19385;
                                    statearr_19397[8] = inst_19378;
                                    return statearr_19397;
                                  }();
                                  var statearr_19398_19416 = state_19385__$1;
                                  statearr_19398_19416[2] = null;
                                  statearr_19398_19416[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19386 === 8) {
                                    var inst_19367 = state_19385[7];
                                    var state_19385__$1 = state_19385;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19385__$1, 11, out, inst_19367);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___19406, out);
          return function(switch__6463__auto__, c__6478__auto___19406, out) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_19402 = [null, null, null, null, null, null, null, null, null];
                statearr_19402[0] = state_machine__6464__auto__;
                statearr_19402[1] = 1;
                return statearr_19402;
              };
              var state_machine__6464__auto____1 = function(state_19385) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_19385);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e19403) {
                      if (e19403 instanceof Object) {
                        var ex__6467__auto__ = e19403;
                        var statearr_19404_19417 = state_19385;
                        statearr_19404_19417[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19385);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19403;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19418 = state_19385;
                    state_19385 = G__19418;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_19385) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_19385);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___19406, out);
        }();
        var state__6480__auto__ = function() {
          var statearr_19405 = f__6479__auto__.call(null);
          statearr_19405[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___19406;
          return statearr_19405;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___19406, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__6478__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto__) {
    return function() {
      var f__6479__auto__ = function() {
        var switch__6463__auto__ = function(c__6478__auto__) {
          return function(state_19584) {
            var state_val_19585 = state_19584[1];
            if (state_val_19585 === 7) {
              var inst_19580 = state_19584[2];
              var state_19584__$1 = state_19584;
              var statearr_19586_19627 = state_19584__$1;
              statearr_19586_19627[2] = inst_19580;
              statearr_19586_19627[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_19585 === 20) {
                var inst_19550 = state_19584[7];
                var inst_19561 = state_19584[2];
                var inst_19562 = cljs.core.next.call(null, inst_19550);
                var inst_19536 = inst_19562;
                var inst_19537 = null;
                var inst_19538 = 0;
                var inst_19539 = 0;
                var state_19584__$1 = function() {
                  var statearr_19587 = state_19584;
                  statearr_19587[8] = inst_19561;
                  statearr_19587[9] = inst_19539;
                  statearr_19587[10] = inst_19537;
                  statearr_19587[11] = inst_19538;
                  statearr_19587[12] = inst_19536;
                  return statearr_19587;
                }();
                var statearr_19588_19628 = state_19584__$1;
                statearr_19588_19628[2] = null;
                statearr_19588_19628[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19585 === 1) {
                  var state_19584__$1 = state_19584;
                  var statearr_19589_19629 = state_19584__$1;
                  statearr_19589_19629[2] = null;
                  statearr_19589_19629[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_19585 === 4) {
                    var inst_19525 = state_19584[13];
                    var inst_19525__$1 = state_19584[2];
                    var inst_19526 = inst_19525__$1 == null;
                    var state_19584__$1 = function() {
                      var statearr_19590 = state_19584;
                      statearr_19590[13] = inst_19525__$1;
                      return statearr_19590;
                    }();
                    if (cljs.core.truth_(inst_19526)) {
                      var statearr_19591_19630 = state_19584__$1;
                      statearr_19591_19630[1] = 5;
                    } else {
                      var statearr_19592_19631 = state_19584__$1;
                      statearr_19592_19631[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_19585 === 15) {
                      var state_19584__$1 = state_19584;
                      var statearr_19596_19632 = state_19584__$1;
                      statearr_19596_19632[2] = null;
                      statearr_19596_19632[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_19585 === 21) {
                        var state_19584__$1 = state_19584;
                        var statearr_19597_19633 = state_19584__$1;
                        statearr_19597_19633[2] = null;
                        statearr_19597_19633[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_19585 === 13) {
                          var inst_19539 = state_19584[9];
                          var inst_19537 = state_19584[10];
                          var inst_19538 = state_19584[11];
                          var inst_19536 = state_19584[12];
                          var inst_19546 = state_19584[2];
                          var inst_19547 = inst_19539 + 1;
                          var tmp19593 = inst_19537;
                          var tmp19594 = inst_19538;
                          var tmp19595 = inst_19536;
                          var inst_19536__$1 = tmp19595;
                          var inst_19537__$1 = tmp19593;
                          var inst_19538__$1 = tmp19594;
                          var inst_19539__$1 = inst_19547;
                          var state_19584__$1 = function() {
                            var statearr_19598 = state_19584;
                            statearr_19598[9] = inst_19539__$1;
                            statearr_19598[10] = inst_19537__$1;
                            statearr_19598[11] = inst_19538__$1;
                            statearr_19598[12] = inst_19536__$1;
                            statearr_19598[14] = inst_19546;
                            return statearr_19598;
                          }();
                          var statearr_19599_19634 = state_19584__$1;
                          statearr_19599_19634[2] = null;
                          statearr_19599_19634[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_19585 === 22) {
                            var state_19584__$1 = state_19584;
                            var statearr_19600_19635 = state_19584__$1;
                            statearr_19600_19635[2] = null;
                            statearr_19600_19635[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19585 === 6) {
                              var inst_19525 = state_19584[13];
                              var inst_19534 = f.call(null, inst_19525);
                              var inst_19535 = cljs.core.seq.call(null, inst_19534);
                              var inst_19536 = inst_19535;
                              var inst_19537 = null;
                              var inst_19538 = 0;
                              var inst_19539 = 0;
                              var state_19584__$1 = function() {
                                var statearr_19601 = state_19584;
                                statearr_19601[9] = inst_19539;
                                statearr_19601[10] = inst_19537;
                                statearr_19601[11] = inst_19538;
                                statearr_19601[12] = inst_19536;
                                return statearr_19601;
                              }();
                              var statearr_19602_19636 = state_19584__$1;
                              statearr_19602_19636[2] = null;
                              statearr_19602_19636[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_19585 === 17) {
                                var inst_19550 = state_19584[7];
                                var inst_19554 = cljs.core.chunk_first.call(null, inst_19550);
                                var inst_19555 = cljs.core.chunk_rest.call(null, inst_19550);
                                var inst_19556 = cljs.core.count.call(null, inst_19554);
                                var inst_19536 = inst_19555;
                                var inst_19537 = inst_19554;
                                var inst_19538 = inst_19556;
                                var inst_19539 = 0;
                                var state_19584__$1 = function() {
                                  var statearr_19603 = state_19584;
                                  statearr_19603[9] = inst_19539;
                                  statearr_19603[10] = inst_19537;
                                  statearr_19603[11] = inst_19538;
                                  statearr_19603[12] = inst_19536;
                                  return statearr_19603;
                                }();
                                var statearr_19604_19637 = state_19584__$1;
                                statearr_19604_19637[2] = null;
                                statearr_19604_19637[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_19585 === 3) {
                                  var inst_19582 = state_19584[2];
                                  var state_19584__$1 = state_19584;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19584__$1, inst_19582);
                                } else {
                                  if (state_val_19585 === 12) {
                                    var inst_19570 = state_19584[2];
                                    var state_19584__$1 = state_19584;
                                    var statearr_19605_19638 = state_19584__$1;
                                    statearr_19605_19638[2] = inst_19570;
                                    statearr_19605_19638[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_19585 === 2) {
                                      var state_19584__$1 = state_19584;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19584__$1, 4, in$);
                                    } else {
                                      if (state_val_19585 === 23) {
                                        var inst_19578 = state_19584[2];
                                        var state_19584__$1 = state_19584;
                                        var statearr_19606_19639 = state_19584__$1;
                                        statearr_19606_19639[2] = inst_19578;
                                        statearr_19606_19639[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_19585 === 19) {
                                          var inst_19565 = state_19584[2];
                                          var state_19584__$1 = state_19584;
                                          var statearr_19607_19640 = state_19584__$1;
                                          statearr_19607_19640[2] = inst_19565;
                                          statearr_19607_19640[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_19585 === 11) {
                                            var inst_19550 = state_19584[7];
                                            var inst_19536 = state_19584[12];
                                            var inst_19550__$1 = cljs.core.seq.call(null, inst_19536);
                                            var state_19584__$1 = function() {
                                              var statearr_19608 = state_19584;
                                              statearr_19608[7] = inst_19550__$1;
                                              return statearr_19608;
                                            }();
                                            if (inst_19550__$1) {
                                              var statearr_19609_19641 = state_19584__$1;
                                              statearr_19609_19641[1] = 14;
                                            } else {
                                              var statearr_19610_19642 = state_19584__$1;
                                              statearr_19610_19642[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_19585 === 9) {
                                              var inst_19572 = state_19584[2];
                                              var inst_19573 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_19584__$1 = function() {
                                                var statearr_19611 = state_19584;
                                                statearr_19611[15] = inst_19572;
                                                return statearr_19611;
                                              }();
                                              if (cljs.core.truth_(inst_19573)) {
                                                var statearr_19612_19643 = state_19584__$1;
                                                statearr_19612_19643[1] = 21;
                                              } else {
                                                var statearr_19613_19644 = state_19584__$1;
                                                statearr_19613_19644[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_19585 === 5) {
                                                var inst_19528 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_19584__$1 = state_19584;
                                                var statearr_19614_19645 = state_19584__$1;
                                                statearr_19614_19645[2] = inst_19528;
                                                statearr_19614_19645[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_19585 === 14) {
                                                  var inst_19550 = state_19584[7];
                                                  var inst_19552 = cljs.core.chunked_seq_QMARK_.call(null, inst_19550);
                                                  var state_19584__$1 = state_19584;
                                                  if (inst_19552) {
                                                    var statearr_19615_19646 = state_19584__$1;
                                                    statearr_19615_19646[1] = 17;
                                                  } else {
                                                    var statearr_19616_19647 = state_19584__$1;
                                                    statearr_19616_19647[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_19585 === 16) {
                                                    var inst_19568 = state_19584[2];
                                                    var state_19584__$1 = state_19584;
                                                    var statearr_19617_19648 = state_19584__$1;
                                                    statearr_19617_19648[2] = inst_19568;
                                                    statearr_19617_19648[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_19585 === 10) {
                                                      var inst_19539 = state_19584[9];
                                                      var inst_19537 = state_19584[10];
                                                      var inst_19544 = cljs.core._nth.call(null, inst_19537, inst_19539);
                                                      var state_19584__$1 = state_19584;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19584__$1, 13, out, inst_19544);
                                                    } else {
                                                      if (state_val_19585 === 18) {
                                                        var inst_19550 = state_19584[7];
                                                        var inst_19559 = cljs.core.first.call(null, inst_19550);
                                                        var state_19584__$1 = state_19584;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19584__$1, 20, out, inst_19559);
                                                      } else {
                                                        if (state_val_19585 === 8) {
                                                          var inst_19539 = state_19584[9];
                                                          var inst_19538 = state_19584[11];
                                                          var inst_19541 = inst_19539 < inst_19538;
                                                          var inst_19542 = inst_19541;
                                                          var state_19584__$1 = state_19584;
                                                          if (cljs.core.truth_(inst_19542)) {
                                                            var statearr_19618_19649 = state_19584__$1;
                                                            statearr_19618_19649[1] = 10;
                                                          } else {
                                                            var statearr_19619_19650 = state_19584__$1;
                                                            statearr_19619_19650[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6478__auto__);
        return function(switch__6463__auto__, c__6478__auto__) {
          return function() {
            var state_machine__6464__auto__ = null;
            var state_machine__6464__auto____0 = function() {
              var statearr_19623 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_19623[0] = state_machine__6464__auto__;
              statearr_19623[1] = 1;
              return statearr_19623;
            };
            var state_machine__6464__auto____1 = function(state_19584) {
              while (true) {
                var ret_value__6465__auto__ = function() {
                  try {
                    while (true) {
                      var result__6466__auto__ = switch__6463__auto__.call(null, state_19584);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6466__auto__;
                      }
                      break;
                    }
                  } catch (e19624) {
                    if (e19624 instanceof Object) {
                      var ex__6467__auto__ = e19624;
                      var statearr_19625_19651 = state_19584;
                      statearr_19625_19651[5] = ex__6467__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19584);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e19624;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__19652 = state_19584;
                  state_19584 = G__19652;
                  continue;
                } else {
                  return ret_value__6465__auto__;
                }
                break;
              }
            };
            state_machine__6464__auto__ = function(state_19584) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6464__auto____0.call(this);
                case 1:
                  return state_machine__6464__auto____1.call(this, state_19584);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
            return state_machine__6464__auto__;
          }();
        }(switch__6463__auto__, c__6478__auto__);
      }();
      var state__6480__auto__ = function() {
        var statearr_19626 = f__6479__auto__.call(null);
        statearr_19626[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto__;
        return statearr_19626;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
    };
  }(c__6478__auto__));
  return c__6478__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__6478__auto___19747 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___19747) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___19747) {
            return function(state_19723) {
              var state_val_19724 = state_19723[1];
              if (state_val_19724 === 7) {
                var inst_19719 = state_19723[2];
                var state_19723__$1 = state_19723;
                var statearr_19725_19748 = state_19723__$1;
                statearr_19725_19748[2] = inst_19719;
                statearr_19725_19748[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19724 === 1) {
                  var state_19723__$1 = state_19723;
                  var statearr_19726_19749 = state_19723__$1;
                  statearr_19726_19749[2] = null;
                  statearr_19726_19749[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_19724 === 4) {
                    var inst_19702 = state_19723[7];
                    var inst_19702__$1 = state_19723[2];
                    var inst_19703 = inst_19702__$1 == null;
                    var state_19723__$1 = function() {
                      var statearr_19727 = state_19723;
                      statearr_19727[7] = inst_19702__$1;
                      return statearr_19727;
                    }();
                    if (cljs.core.truth_(inst_19703)) {
                      var statearr_19728_19750 = state_19723__$1;
                      statearr_19728_19750[1] = 5;
                    } else {
                      var statearr_19729_19751 = state_19723__$1;
                      statearr_19729_19751[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_19724 === 13) {
                      var state_19723__$1 = state_19723;
                      var statearr_19730_19752 = state_19723__$1;
                      statearr_19730_19752[2] = null;
                      statearr_19730_19752[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_19724 === 6) {
                        var inst_19702 = state_19723[7];
                        var state_19723__$1 = state_19723;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19723__$1, 11, to, inst_19702);
                      } else {
                        if (state_val_19724 === 3) {
                          var inst_19721 = state_19723[2];
                          var state_19723__$1 = state_19723;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19723__$1, inst_19721);
                        } else {
                          if (state_val_19724 === 12) {
                            var state_19723__$1 = state_19723;
                            var statearr_19731_19753 = state_19723__$1;
                            statearr_19731_19753[2] = null;
                            statearr_19731_19753[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19724 === 2) {
                              var state_19723__$1 = state_19723;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19723__$1, 4, from);
                            } else {
                              if (state_val_19724 === 11) {
                                var inst_19712 = state_19723[2];
                                var state_19723__$1 = state_19723;
                                if (cljs.core.truth_(inst_19712)) {
                                  var statearr_19732_19754 = state_19723__$1;
                                  statearr_19732_19754[1] = 12;
                                } else {
                                  var statearr_19733_19755 = state_19723__$1;
                                  statearr_19733_19755[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_19724 === 9) {
                                  var state_19723__$1 = state_19723;
                                  var statearr_19734_19756 = state_19723__$1;
                                  statearr_19734_19756[2] = null;
                                  statearr_19734_19756[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19724 === 5) {
                                    var state_19723__$1 = state_19723;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_19735_19757 = state_19723__$1;
                                      statearr_19735_19757[1] = 8;
                                    } else {
                                      var statearr_19736_19758 = state_19723__$1;
                                      statearr_19736_19758[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_19724 === 14) {
                                      var inst_19717 = state_19723[2];
                                      var state_19723__$1 = state_19723;
                                      var statearr_19737_19759 = state_19723__$1;
                                      statearr_19737_19759[2] = inst_19717;
                                      statearr_19737_19759[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_19724 === 10) {
                                        var inst_19709 = state_19723[2];
                                        var state_19723__$1 = state_19723;
                                        var statearr_19738_19760 = state_19723__$1;
                                        statearr_19738_19760[2] = inst_19709;
                                        statearr_19738_19760[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_19724 === 8) {
                                          var inst_19706 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_19723__$1 = state_19723;
                                          var statearr_19739_19761 = state_19723__$1;
                                          statearr_19739_19761[2] = inst_19706;
                                          statearr_19739_19761[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___19747);
          return function(switch__6463__auto__, c__6478__auto___19747) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_19743 = [null, null, null, null, null, null, null, null];
                statearr_19743[0] = state_machine__6464__auto__;
                statearr_19743[1] = 1;
                return statearr_19743;
              };
              var state_machine__6464__auto____1 = function(state_19723) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_19723);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e19744) {
                      if (e19744 instanceof Object) {
                        var ex__6467__auto__ = e19744;
                        var statearr_19745_19762 = state_19723;
                        statearr_19745_19762[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19723);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19744;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19763 = state_19723;
                    state_19723 = G__19763;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_19723) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_19723);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___19747);
        }();
        var state__6480__auto__ = function() {
          var statearr_19746 = f__6479__auto__.call(null);
          statearr_19746[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___19747;
          return statearr_19746;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___19747));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__6478__auto___19864 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___19864, tc, fc) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___19864, tc, fc) {
            return function(state_19839) {
              var state_val_19840 = state_19839[1];
              if (state_val_19840 === 7) {
                var inst_19835 = state_19839[2];
                var state_19839__$1 = state_19839;
                var statearr_19841_19865 = state_19839__$1;
                statearr_19841_19865[2] = inst_19835;
                statearr_19841_19865[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19840 === 1) {
                  var state_19839__$1 = state_19839;
                  var statearr_19842_19866 = state_19839__$1;
                  statearr_19842_19866[2] = null;
                  statearr_19842_19866[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_19840 === 4) {
                    var inst_19816 = state_19839[7];
                    var inst_19816__$1 = state_19839[2];
                    var inst_19817 = inst_19816__$1 == null;
                    var state_19839__$1 = function() {
                      var statearr_19843 = state_19839;
                      statearr_19843[7] = inst_19816__$1;
                      return statearr_19843;
                    }();
                    if (cljs.core.truth_(inst_19817)) {
                      var statearr_19844_19867 = state_19839__$1;
                      statearr_19844_19867[1] = 5;
                    } else {
                      var statearr_19845_19868 = state_19839__$1;
                      statearr_19845_19868[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_19840 === 13) {
                      var state_19839__$1 = state_19839;
                      var statearr_19846_19869 = state_19839__$1;
                      statearr_19846_19869[2] = null;
                      statearr_19846_19869[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_19840 === 6) {
                        var inst_19816 = state_19839[7];
                        var inst_19822 = p.call(null, inst_19816);
                        var state_19839__$1 = state_19839;
                        if (cljs.core.truth_(inst_19822)) {
                          var statearr_19847_19870 = state_19839__$1;
                          statearr_19847_19870[1] = 9;
                        } else {
                          var statearr_19848_19871 = state_19839__$1;
                          statearr_19848_19871[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_19840 === 3) {
                          var inst_19837 = state_19839[2];
                          var state_19839__$1 = state_19839;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19839__$1, inst_19837);
                        } else {
                          if (state_val_19840 === 12) {
                            var state_19839__$1 = state_19839;
                            var statearr_19849_19872 = state_19839__$1;
                            statearr_19849_19872[2] = null;
                            statearr_19849_19872[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_19840 === 2) {
                              var state_19839__$1 = state_19839;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19839__$1, 4, ch);
                            } else {
                              if (state_val_19840 === 11) {
                                var inst_19816 = state_19839[7];
                                var inst_19826 = state_19839[2];
                                var state_19839__$1 = state_19839;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19839__$1, 8, inst_19826, inst_19816);
                              } else {
                                if (state_val_19840 === 9) {
                                  var state_19839__$1 = state_19839;
                                  var statearr_19850_19873 = state_19839__$1;
                                  statearr_19850_19873[2] = tc;
                                  statearr_19850_19873[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_19840 === 5) {
                                    var inst_19819 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_19820 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_19839__$1 = function() {
                                      var statearr_19851 = state_19839;
                                      statearr_19851[8] = inst_19819;
                                      return statearr_19851;
                                    }();
                                    var statearr_19852_19874 = state_19839__$1;
                                    statearr_19852_19874[2] = inst_19820;
                                    statearr_19852_19874[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_19840 === 14) {
                                      var inst_19833 = state_19839[2];
                                      var state_19839__$1 = state_19839;
                                      var statearr_19853_19875 = state_19839__$1;
                                      statearr_19853_19875[2] = inst_19833;
                                      statearr_19853_19875[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_19840 === 10) {
                                        var state_19839__$1 = state_19839;
                                        var statearr_19854_19876 = state_19839__$1;
                                        statearr_19854_19876[2] = fc;
                                        statearr_19854_19876[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_19840 === 8) {
                                          var inst_19828 = state_19839[2];
                                          var state_19839__$1 = state_19839;
                                          if (cljs.core.truth_(inst_19828)) {
                                            var statearr_19855_19877 = state_19839__$1;
                                            statearr_19855_19877[1] = 12;
                                          } else {
                                            var statearr_19856_19878 = state_19839__$1;
                                            statearr_19856_19878[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___19864, tc, fc);
          return function(switch__6463__auto__, c__6478__auto___19864, tc, fc) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_19860 = [null, null, null, null, null, null, null, null, null];
                statearr_19860[0] = state_machine__6464__auto__;
                statearr_19860[1] = 1;
                return statearr_19860;
              };
              var state_machine__6464__auto____1 = function(state_19839) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_19839);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e19861) {
                      if (e19861 instanceof Object) {
                        var ex__6467__auto__ = e19861;
                        var statearr_19862_19879 = state_19839;
                        statearr_19862_19879[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19839);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e19861;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__19880 = state_19839;
                    state_19839 = G__19880;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_19839) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_19839);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___19864, tc, fc);
        }();
        var state__6480__auto__ = function() {
          var statearr_19863 = f__6479__auto__.call(null);
          statearr_19863[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___19864;
          return statearr_19863;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___19864, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__6478__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto__) {
    return function() {
      var f__6479__auto__ = function() {
        var switch__6463__auto__ = function(c__6478__auto__) {
          return function(state_19927) {
            var state_val_19928 = state_19927[1];
            if (state_val_19928 === 7) {
              var inst_19923 = state_19927[2];
              var state_19927__$1 = state_19927;
              var statearr_19929_19945 = state_19927__$1;
              statearr_19929_19945[2] = inst_19923;
              statearr_19929_19945[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_19928 === 6) {
                var inst_19916 = state_19927[7];
                var inst_19913 = state_19927[8];
                var inst_19920 = f.call(null, inst_19913, inst_19916);
                var inst_19913__$1 = inst_19920;
                var state_19927__$1 = function() {
                  var statearr_19930 = state_19927;
                  statearr_19930[8] = inst_19913__$1;
                  return statearr_19930;
                }();
                var statearr_19931_19946 = state_19927__$1;
                statearr_19931_19946[2] = null;
                statearr_19931_19946[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_19928 === 5) {
                  var inst_19913 = state_19927[8];
                  var state_19927__$1 = state_19927;
                  var statearr_19932_19947 = state_19927__$1;
                  statearr_19932_19947[2] = inst_19913;
                  statearr_19932_19947[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_19928 === 4) {
                    var inst_19916 = state_19927[7];
                    var inst_19916__$1 = state_19927[2];
                    var inst_19917 = inst_19916__$1 == null;
                    var state_19927__$1 = function() {
                      var statearr_19933 = state_19927;
                      statearr_19933[7] = inst_19916__$1;
                      return statearr_19933;
                    }();
                    if (cljs.core.truth_(inst_19917)) {
                      var statearr_19934_19948 = state_19927__$1;
                      statearr_19934_19948[1] = 5;
                    } else {
                      var statearr_19935_19949 = state_19927__$1;
                      statearr_19935_19949[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_19928 === 3) {
                      var inst_19925 = state_19927[2];
                      var state_19927__$1 = state_19927;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19927__$1, inst_19925);
                    } else {
                      if (state_val_19928 === 2) {
                        var state_19927__$1 = state_19927;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19927__$1, 4, ch);
                      } else {
                        if (state_val_19928 === 1) {
                          var inst_19913 = init;
                          var state_19927__$1 = function() {
                            var statearr_19936 = state_19927;
                            statearr_19936[8] = inst_19913;
                            return statearr_19936;
                          }();
                          var statearr_19937_19950 = state_19927__$1;
                          statearr_19937_19950[2] = null;
                          statearr_19937_19950[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6478__auto__);
        return function(switch__6463__auto__, c__6478__auto__) {
          return function() {
            var state_machine__6464__auto__ = null;
            var state_machine__6464__auto____0 = function() {
              var statearr_19941 = [null, null, null, null, null, null, null, null, null];
              statearr_19941[0] = state_machine__6464__auto__;
              statearr_19941[1] = 1;
              return statearr_19941;
            };
            var state_machine__6464__auto____1 = function(state_19927) {
              while (true) {
                var ret_value__6465__auto__ = function() {
                  try {
                    while (true) {
                      var result__6466__auto__ = switch__6463__auto__.call(null, state_19927);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6466__auto__;
                      }
                      break;
                    }
                  } catch (e19942) {
                    if (e19942 instanceof Object) {
                      var ex__6467__auto__ = e19942;
                      var statearr_19943_19951 = state_19927;
                      statearr_19943_19951[5] = ex__6467__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19927);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e19942;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__19952 = state_19927;
                  state_19927 = G__19952;
                  continue;
                } else {
                  return ret_value__6465__auto__;
                }
                break;
              }
            };
            state_machine__6464__auto__ = function(state_19927) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6464__auto____0.call(this);
                case 1:
                  return state_machine__6464__auto____1.call(this, state_19927);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
            return state_machine__6464__auto__;
          }();
        }(switch__6463__auto__, c__6478__auto__);
      }();
      var state__6480__auto__ = function() {
        var statearr_19944 = f__6479__auto__.call(null);
        statearr_19944[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto__;
        return statearr_19944;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
    };
  }(c__6478__auto__));
  return c__6478__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__6478__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto__) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto__) {
            return function(state_20026) {
              var state_val_20027 = state_20026[1];
              if (state_val_20027 === 7) {
                var inst_20008 = state_20026[2];
                var state_20026__$1 = state_20026;
                var statearr_20028_20051 = state_20026__$1;
                statearr_20028_20051[2] = inst_20008;
                statearr_20028_20051[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_20027 === 1) {
                  var inst_20002 = cljs.core.seq.call(null, coll);
                  var inst_20003 = inst_20002;
                  var state_20026__$1 = function() {
                    var statearr_20029 = state_20026;
                    statearr_20029[7] = inst_20003;
                    return statearr_20029;
                  }();
                  var statearr_20030_20052 = state_20026__$1;
                  statearr_20030_20052[2] = null;
                  statearr_20030_20052[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_20027 === 4) {
                    var inst_20003 = state_20026[7];
                    var inst_20006 = cljs.core.first.call(null, inst_20003);
                    var state_20026__$1 = state_20026;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20026__$1, 7, ch, inst_20006);
                  } else {
                    if (state_val_20027 === 13) {
                      var inst_20020 = state_20026[2];
                      var state_20026__$1 = state_20026;
                      var statearr_20031_20053 = state_20026__$1;
                      statearr_20031_20053[2] = inst_20020;
                      statearr_20031_20053[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_20027 === 6) {
                        var inst_20011 = state_20026[2];
                        var state_20026__$1 = state_20026;
                        if (cljs.core.truth_(inst_20011)) {
                          var statearr_20032_20054 = state_20026__$1;
                          statearr_20032_20054[1] = 8;
                        } else {
                          var statearr_20033_20055 = state_20026__$1;
                          statearr_20033_20055[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_20027 === 3) {
                          var inst_20024 = state_20026[2];
                          var state_20026__$1 = state_20026;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20026__$1, inst_20024);
                        } else {
                          if (state_val_20027 === 12) {
                            var state_20026__$1 = state_20026;
                            var statearr_20034_20056 = state_20026__$1;
                            statearr_20034_20056[2] = null;
                            statearr_20034_20056[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_20027 === 2) {
                              var inst_20003 = state_20026[7];
                              var state_20026__$1 = state_20026;
                              if (cljs.core.truth_(inst_20003)) {
                                var statearr_20035_20057 = state_20026__$1;
                                statearr_20035_20057[1] = 4;
                              } else {
                                var statearr_20036_20058 = state_20026__$1;
                                statearr_20036_20058[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_20027 === 11) {
                                var inst_20017 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_20026__$1 = state_20026;
                                var statearr_20037_20059 = state_20026__$1;
                                statearr_20037_20059[2] = inst_20017;
                                statearr_20037_20059[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_20027 === 9) {
                                  var state_20026__$1 = state_20026;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_20038_20060 = state_20026__$1;
                                    statearr_20038_20060[1] = 11;
                                  } else {
                                    var statearr_20039_20061 = state_20026__$1;
                                    statearr_20039_20061[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_20027 === 5) {
                                    var inst_20003 = state_20026[7];
                                    var state_20026__$1 = state_20026;
                                    var statearr_20040_20062 = state_20026__$1;
                                    statearr_20040_20062[2] = inst_20003;
                                    statearr_20040_20062[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_20027 === 10) {
                                      var inst_20022 = state_20026[2];
                                      var state_20026__$1 = state_20026;
                                      var statearr_20041_20063 = state_20026__$1;
                                      statearr_20041_20063[2] = inst_20022;
                                      statearr_20041_20063[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_20027 === 8) {
                                        var inst_20003 = state_20026[7];
                                        var inst_20013 = cljs.core.next.call(null, inst_20003);
                                        var inst_20003__$1 = inst_20013;
                                        var state_20026__$1 = function() {
                                          var statearr_20042 = state_20026;
                                          statearr_20042[7] = inst_20003__$1;
                                          return statearr_20042;
                                        }();
                                        var statearr_20043_20064 = state_20026__$1;
                                        statearr_20043_20064[2] = null;
                                        statearr_20043_20064[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto__);
          return function(switch__6463__auto__, c__6478__auto__) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_20047 = [null, null, null, null, null, null, null, null];
                statearr_20047[0] = state_machine__6464__auto__;
                statearr_20047[1] = 1;
                return statearr_20047;
              };
              var state_machine__6464__auto____1 = function(state_20026) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_20026);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e20048) {
                      if (e20048 instanceof Object) {
                        var ex__6467__auto__ = e20048;
                        var statearr_20049_20065 = state_20026;
                        statearr_20049_20065[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20026);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e20048;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__20066 = state_20026;
                    state_20026 = G__20066;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_20026) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_20026);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto__);
        }();
        var state__6480__auto__ = function() {
          var statearr_20050 = f__6479__auto__.call(null);
          statearr_20050[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto__;
          return statearr_20050;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto__));
    return c__6478__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj20068 = {};
  return obj20068;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3565__auto__ = _;
    if (and__3565__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4204__auto__ = _ == null ? null : _;
    return function() {
      var or__3577__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj20070 = {};
  return obj20070;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3565__auto__ = m;
    if (and__3565__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4204__auto__ = m == null ? null : m;
    return function() {
      var or__3577__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3565__auto__ = m;
    if (and__3565__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4204__auto__ = m == null ? null : m;
    return function() {
      var or__3577__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3565__auto__ = m;
    if (and__3565__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4204__auto__ = m == null ? null : m;
    return function() {
      var or__3577__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t20292 !== "undefined") {
    } else {
      cljs.core.async.t20292 = function(cs, ch, mult, meta20293) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta20293 = meta20293;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t20292.cljs$lang$type = true;
      cljs.core.async.t20292.cljs$lang$ctorStr = "cljs.core.async/t20292";
      cljs.core.async.t20292.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
          return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t20292");
        };
      }(cs);
      cljs.core.async.t20292.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t20292.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t20292.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t20292.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t20292.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t20292.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t20292.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_20294) {
          var self__ = this;
          var _20294__$1 = this;
          return self__.meta20293;
        };
      }(cs);
      cljs.core.async.t20292.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_20294, meta20293__$1) {
          var self__ = this;
          var _20294__$1 = this;
          return new cljs.core.async.t20292(self__.cs, self__.ch, self__.mult, meta20293__$1);
        };
      }(cs);
      cljs.core.async.__GT_t20292 = function(cs) {
        return function __GT_t20292(cs__$1, ch__$1, mult__$1, meta20293) {
          return new cljs.core.async.t20292(cs__$1, ch__$1, mult__$1, meta20293);
        };
      }(cs);
    }
    return new cljs.core.async.t20292(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__6478__auto___20513 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___20513, cs, m, dchan, dctr, done) {
    return function() {
      var f__6479__auto__ = function() {
        var switch__6463__auto__ = function(c__6478__auto___20513, cs, m, dchan, dctr, done) {
          return function(state_20425) {
            var state_val_20426 = state_20425[1];
            if (state_val_20426 === 7) {
              var inst_20421 = state_20425[2];
              var state_20425__$1 = state_20425;
              var statearr_20427_20514 = state_20425__$1;
              statearr_20427_20514[2] = inst_20421;
              statearr_20427_20514[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_20426 === 20) {
                var inst_20326 = state_20425[7];
                var inst_20336 = cljs.core.first.call(null, inst_20326);
                var inst_20337 = cljs.core.nth.call(null, inst_20336, 0, null);
                var inst_20338 = cljs.core.nth.call(null, inst_20336, 1, null);
                var state_20425__$1 = function() {
                  var statearr_20428 = state_20425;
                  statearr_20428[8] = inst_20337;
                  return statearr_20428;
                }();
                if (cljs.core.truth_(inst_20338)) {
                  var statearr_20429_20515 = state_20425__$1;
                  statearr_20429_20515[1] = 22;
                } else {
                  var statearr_20430_20516 = state_20425__$1;
                  statearr_20430_20516[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_20426 === 27) {
                  var inst_20366 = state_20425[9];
                  var inst_20373 = state_20425[10];
                  var inst_20297 = state_20425[11];
                  var inst_20368 = state_20425[12];
                  var inst_20373__$1 = cljs.core._nth.call(null, inst_20366, inst_20368);
                  var inst_20374 = cljs.core.async.put_BANG_.call(null, inst_20373__$1, inst_20297, done);
                  var state_20425__$1 = function() {
                    var statearr_20431 = state_20425;
                    statearr_20431[10] = inst_20373__$1;
                    return statearr_20431;
                  }();
                  if (cljs.core.truth_(inst_20374)) {
                    var statearr_20432_20517 = state_20425__$1;
                    statearr_20432_20517[1] = 30;
                  } else {
                    var statearr_20433_20518 = state_20425__$1;
                    statearr_20433_20518[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_20426 === 1) {
                    var state_20425__$1 = state_20425;
                    var statearr_20434_20519 = state_20425__$1;
                    statearr_20434_20519[2] = null;
                    statearr_20434_20519[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_20426 === 24) {
                      var inst_20326 = state_20425[7];
                      var inst_20343 = state_20425[2];
                      var inst_20344 = cljs.core.next.call(null, inst_20326);
                      var inst_20306 = inst_20344;
                      var inst_20307 = null;
                      var inst_20308 = 0;
                      var inst_20309 = 0;
                      var state_20425__$1 = function() {
                        var statearr_20435 = state_20425;
                        statearr_20435[13] = inst_20309;
                        statearr_20435[14] = inst_20308;
                        statearr_20435[15] = inst_20306;
                        statearr_20435[16] = inst_20343;
                        statearr_20435[17] = inst_20307;
                        return statearr_20435;
                      }();
                      var statearr_20436_20520 = state_20425__$1;
                      statearr_20436_20520[2] = null;
                      statearr_20436_20520[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_20426 === 39) {
                        var state_20425__$1 = state_20425;
                        var statearr_20440_20521 = state_20425__$1;
                        statearr_20440_20521[2] = null;
                        statearr_20440_20521[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_20426 === 4) {
                          var inst_20297 = state_20425[11];
                          var inst_20297__$1 = state_20425[2];
                          var inst_20298 = inst_20297__$1 == null;
                          var state_20425__$1 = function() {
                            var statearr_20441 = state_20425;
                            statearr_20441[11] = inst_20297__$1;
                            return statearr_20441;
                          }();
                          if (cljs.core.truth_(inst_20298)) {
                            var statearr_20442_20522 = state_20425__$1;
                            statearr_20442_20522[1] = 5;
                          } else {
                            var statearr_20443_20523 = state_20425__$1;
                            statearr_20443_20523[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_20426 === 15) {
                            var inst_20309 = state_20425[13];
                            var inst_20308 = state_20425[14];
                            var inst_20306 = state_20425[15];
                            var inst_20307 = state_20425[17];
                            var inst_20322 = state_20425[2];
                            var inst_20323 = inst_20309 + 1;
                            var tmp20437 = inst_20308;
                            var tmp20438 = inst_20306;
                            var tmp20439 = inst_20307;
                            var inst_20306__$1 = tmp20438;
                            var inst_20307__$1 = tmp20439;
                            var inst_20308__$1 = tmp20437;
                            var inst_20309__$1 = inst_20323;
                            var state_20425__$1 = function() {
                              var statearr_20444 = state_20425;
                              statearr_20444[13] = inst_20309__$1;
                              statearr_20444[14] = inst_20308__$1;
                              statearr_20444[18] = inst_20322;
                              statearr_20444[15] = inst_20306__$1;
                              statearr_20444[17] = inst_20307__$1;
                              return statearr_20444;
                            }();
                            var statearr_20445_20524 = state_20425__$1;
                            statearr_20445_20524[2] = null;
                            statearr_20445_20524[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_20426 === 21) {
                              var inst_20347 = state_20425[2];
                              var state_20425__$1 = state_20425;
                              var statearr_20449_20525 = state_20425__$1;
                              statearr_20449_20525[2] = inst_20347;
                              statearr_20449_20525[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_20426 === 31) {
                                var inst_20373 = state_20425[10];
                                var inst_20377 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_20378 = cljs.core.async.untap_STAR_.call(null, m, inst_20373);
                                var state_20425__$1 = function() {
                                  var statearr_20450 = state_20425;
                                  statearr_20450[19] = inst_20377;
                                  return statearr_20450;
                                }();
                                var statearr_20451_20526 = state_20425__$1;
                                statearr_20451_20526[2] = inst_20378;
                                statearr_20451_20526[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_20426 === 32) {
                                  var inst_20367 = state_20425[20];
                                  var inst_20366 = state_20425[9];
                                  var inst_20365 = state_20425[21];
                                  var inst_20368 = state_20425[12];
                                  var inst_20380 = state_20425[2];
                                  var inst_20381 = inst_20368 + 1;
                                  var tmp20446 = inst_20367;
                                  var tmp20447 = inst_20366;
                                  var tmp20448 = inst_20365;
                                  var inst_20365__$1 = tmp20448;
                                  var inst_20366__$1 = tmp20447;
                                  var inst_20367__$1 = tmp20446;
                                  var inst_20368__$1 = inst_20381;
                                  var state_20425__$1 = function() {
                                    var statearr_20452 = state_20425;
                                    statearr_20452[20] = inst_20367__$1;
                                    statearr_20452[9] = inst_20366__$1;
                                    statearr_20452[21] = inst_20365__$1;
                                    statearr_20452[12] = inst_20368__$1;
                                    statearr_20452[22] = inst_20380;
                                    return statearr_20452;
                                  }();
                                  var statearr_20453_20527 = state_20425__$1;
                                  statearr_20453_20527[2] = null;
                                  statearr_20453_20527[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_20426 === 40) {
                                    var inst_20393 = state_20425[23];
                                    var inst_20397 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_20398 = cljs.core.async.untap_STAR_.call(null, m, inst_20393);
                                    var state_20425__$1 = function() {
                                      var statearr_20454 = state_20425;
                                      statearr_20454[24] = inst_20397;
                                      return statearr_20454;
                                    }();
                                    var statearr_20455_20528 = state_20425__$1;
                                    statearr_20455_20528[2] = inst_20398;
                                    statearr_20455_20528[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_20426 === 33) {
                                      var inst_20384 = state_20425[25];
                                      var inst_20386 = cljs.core.chunked_seq_QMARK_.call(null, inst_20384);
                                      var state_20425__$1 = state_20425;
                                      if (inst_20386) {
                                        var statearr_20456_20529 = state_20425__$1;
                                        statearr_20456_20529[1] = 36;
                                      } else {
                                        var statearr_20457_20530 = state_20425__$1;
                                        statearr_20457_20530[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_20426 === 13) {
                                        var inst_20316 = state_20425[26];
                                        var inst_20319 = cljs.core.async.close_BANG_.call(null, inst_20316);
                                        var state_20425__$1 = state_20425;
                                        var statearr_20458_20531 = state_20425__$1;
                                        statearr_20458_20531[2] = inst_20319;
                                        statearr_20458_20531[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_20426 === 22) {
                                          var inst_20337 = state_20425[8];
                                          var inst_20340 = cljs.core.async.close_BANG_.call(null, inst_20337);
                                          var state_20425__$1 = state_20425;
                                          var statearr_20459_20532 = state_20425__$1;
                                          statearr_20459_20532[2] = inst_20340;
                                          statearr_20459_20532[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_20426 === 36) {
                                            var inst_20384 = state_20425[25];
                                            var inst_20388 = cljs.core.chunk_first.call(null, inst_20384);
                                            var inst_20389 = cljs.core.chunk_rest.call(null, inst_20384);
                                            var inst_20390 = cljs.core.count.call(null, inst_20388);
                                            var inst_20365 = inst_20389;
                                            var inst_20366 = inst_20388;
                                            var inst_20367 = inst_20390;
                                            var inst_20368 = 0;
                                            var state_20425__$1 = function() {
                                              var statearr_20460 = state_20425;
                                              statearr_20460[20] = inst_20367;
                                              statearr_20460[9] = inst_20366;
                                              statearr_20460[21] = inst_20365;
                                              statearr_20460[12] = inst_20368;
                                              return statearr_20460;
                                            }();
                                            var statearr_20461_20533 = state_20425__$1;
                                            statearr_20461_20533[2] = null;
                                            statearr_20461_20533[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_20426 === 41) {
                                              var inst_20384 = state_20425[25];
                                              var inst_20400 = state_20425[2];
                                              var inst_20401 = cljs.core.next.call(null, inst_20384);
                                              var inst_20365 = inst_20401;
                                              var inst_20366 = null;
                                              var inst_20367 = 0;
                                              var inst_20368 = 0;
                                              var state_20425__$1 = function() {
                                                var statearr_20462 = state_20425;
                                                statearr_20462[20] = inst_20367;
                                                statearr_20462[9] = inst_20366;
                                                statearr_20462[21] = inst_20365;
                                                statearr_20462[12] = inst_20368;
                                                statearr_20462[27] = inst_20400;
                                                return statearr_20462;
                                              }();
                                              var statearr_20463_20534 = state_20425__$1;
                                              statearr_20463_20534[2] = null;
                                              statearr_20463_20534[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_20426 === 43) {
                                                var state_20425__$1 = state_20425;
                                                var statearr_20464_20535 = state_20425__$1;
                                                statearr_20464_20535[2] = null;
                                                statearr_20464_20535[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_20426 === 29) {
                                                  var inst_20409 = state_20425[2];
                                                  var state_20425__$1 = state_20425;
                                                  var statearr_20465_20536 = state_20425__$1;
                                                  statearr_20465_20536[2] = inst_20409;
                                                  statearr_20465_20536[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_20426 === 44) {
                                                    var inst_20418 = state_20425[2];
                                                    var state_20425__$1 = function() {
                                                      var statearr_20466 = state_20425;
                                                      statearr_20466[28] = inst_20418;
                                                      return statearr_20466;
                                                    }();
                                                    var statearr_20467_20537 = state_20425__$1;
                                                    statearr_20467_20537[2] = null;
                                                    statearr_20467_20537[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_20426 === 6) {
                                                      var inst_20357 = state_20425[29];
                                                      var inst_20356 = cljs.core.deref.call(null, cs);
                                                      var inst_20357__$1 = cljs.core.keys.call(null, inst_20356);
                                                      var inst_20358 = cljs.core.count.call(null, inst_20357__$1);
                                                      var inst_20359 = cljs.core.reset_BANG_.call(null, dctr, inst_20358);
                                                      var inst_20364 = cljs.core.seq.call(null, inst_20357__$1);
                                                      var inst_20365 = inst_20364;
                                                      var inst_20366 = null;
                                                      var inst_20367 = 0;
                                                      var inst_20368 = 0;
                                                      var state_20425__$1 = function() {
                                                        var statearr_20468 = state_20425;
                                                        statearr_20468[20] = inst_20367;
                                                        statearr_20468[9] = inst_20366;
                                                        statearr_20468[21] = inst_20365;
                                                        statearr_20468[29] = inst_20357__$1;
                                                        statearr_20468[30] = inst_20359;
                                                        statearr_20468[12] = inst_20368;
                                                        return statearr_20468;
                                                      }();
                                                      var statearr_20469_20538 = state_20425__$1;
                                                      statearr_20469_20538[2] = null;
                                                      statearr_20469_20538[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_20426 === 28) {
                                                        var inst_20365 = state_20425[21];
                                                        var inst_20384 = state_20425[25];
                                                        var inst_20384__$1 = cljs.core.seq.call(null, inst_20365);
                                                        var state_20425__$1 = function() {
                                                          var statearr_20470 = state_20425;
                                                          statearr_20470[25] = inst_20384__$1;
                                                          return statearr_20470;
                                                        }();
                                                        if (inst_20384__$1) {
                                                          var statearr_20471_20539 = state_20425__$1;
                                                          statearr_20471_20539[1] = 33;
                                                        } else {
                                                          var statearr_20472_20540 = state_20425__$1;
                                                          statearr_20472_20540[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_20426 === 25) {
                                                          var inst_20367 = state_20425[20];
                                                          var inst_20368 = state_20425[12];
                                                          var inst_20370 = inst_20368 < inst_20367;
                                                          var inst_20371 = inst_20370;
                                                          var state_20425__$1 = state_20425;
                                                          if (cljs.core.truth_(inst_20371)) {
                                                            var statearr_20473_20541 = state_20425__$1;
                                                            statearr_20473_20541[1] = 27;
                                                          } else {
                                                            var statearr_20474_20542 = state_20425__$1;
                                                            statearr_20474_20542[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_20426 === 34) {
                                                            var state_20425__$1 = state_20425;
                                                            var statearr_20475_20543 = state_20425__$1;
                                                            statearr_20475_20543[2] = null;
                                                            statearr_20475_20543[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_20426 === 17) {
                                                              var state_20425__$1 = state_20425;
                                                              var statearr_20476_20544 = state_20425__$1;
                                                              statearr_20476_20544[2] = null;
                                                              statearr_20476_20544[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_20426 === 3) {
                                                                var inst_20423 = state_20425[2];
                                                                var state_20425__$1 = state_20425;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20425__$1, inst_20423);
                                                              } else {
                                                                if (state_val_20426 === 12) {
                                                                  var inst_20352 = state_20425[2];
                                                                  var state_20425__$1 = state_20425;
                                                                  var statearr_20477_20545 = state_20425__$1;
                                                                  statearr_20477_20545[2] = inst_20352;
                                                                  statearr_20477_20545[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_20426 === 2) {
                                                                    var state_20425__$1 = state_20425;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20425__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_20426 === 23) {
                                                                      var state_20425__$1 = state_20425;
                                                                      var statearr_20478_20546 = state_20425__$1;
                                                                      statearr_20478_20546[2] = null;
                                                                      statearr_20478_20546[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_20426 === 35) {
                                                                        var inst_20407 = state_20425[2];
                                                                        var state_20425__$1 = state_20425;
                                                                        var statearr_20479_20547 = state_20425__$1;
                                                                        statearr_20479_20547[2] = inst_20407;
                                                                        statearr_20479_20547[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_20426 === 19) {
                                                                          var inst_20326 = state_20425[7];
                                                                          var inst_20330 = cljs.core.chunk_first.call(null, inst_20326);
                                                                          var inst_20331 = cljs.core.chunk_rest.call(null, inst_20326);
                                                                          var inst_20332 = cljs.core.count.call(null, inst_20330);
                                                                          var inst_20306 = inst_20331;
                                                                          var inst_20307 = inst_20330;
                                                                          var inst_20308 = inst_20332;
                                                                          var inst_20309 = 0;
                                                                          var state_20425__$1 = function() {
                                                                            var statearr_20480 = state_20425;
                                                                            statearr_20480[13] = inst_20309;
                                                                            statearr_20480[14] = inst_20308;
                                                                            statearr_20480[15] = inst_20306;
                                                                            statearr_20480[17] = inst_20307;
                                                                            return statearr_20480;
                                                                          }();
                                                                          var statearr_20481_20548 = state_20425__$1;
                                                                          statearr_20481_20548[2] = null;
                                                                          statearr_20481_20548[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_20426 === 11) {
                                                                            var inst_20306 = state_20425[15];
                                                                            var inst_20326 = state_20425[7];
                                                                            var inst_20326__$1 = cljs.core.seq.call(null, inst_20306);
                                                                            var state_20425__$1 = function() {
                                                                              var statearr_20482 = state_20425;
                                                                              statearr_20482[7] = inst_20326__$1;
                                                                              return statearr_20482;
                                                                            }();
                                                                            if (inst_20326__$1) {
                                                                              var statearr_20483_20549 = state_20425__$1;
                                                                              statearr_20483_20549[1] = 16;
                                                                            } else {
                                                                              var statearr_20484_20550 = state_20425__$1;
                                                                              statearr_20484_20550[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_20426 === 9) {
                                                                              var inst_20354 = state_20425[2];
                                                                              var state_20425__$1 = state_20425;
                                                                              var statearr_20485_20551 = state_20425__$1;
                                                                              statearr_20485_20551[2] = inst_20354;
                                                                              statearr_20485_20551[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_20426 === 5) {
                                                                                var inst_20304 = cljs.core.deref.call(null, cs);
                                                                                var inst_20305 = cljs.core.seq.call(null, inst_20304);
                                                                                var inst_20306 = inst_20305;
                                                                                var inst_20307 = null;
                                                                                var inst_20308 = 0;
                                                                                var inst_20309 = 0;
                                                                                var state_20425__$1 = function() {
                                                                                  var statearr_20486 = state_20425;
                                                                                  statearr_20486[13] = inst_20309;
                                                                                  statearr_20486[14] = inst_20308;
                                                                                  statearr_20486[15] = inst_20306;
                                                                                  statearr_20486[17] = inst_20307;
                                                                                  return statearr_20486;
                                                                                }();
                                                                                var statearr_20487_20552 = state_20425__$1;
                                                                                statearr_20487_20552[2] = null;
                                                                                statearr_20487_20552[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_20426 === 14) {
                                                                                  var state_20425__$1 = state_20425;
                                                                                  var statearr_20488_20553 = state_20425__$1;
                                                                                  statearr_20488_20553[2] = null;
                                                                                  statearr_20488_20553[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                } else {
                                                                                  if (state_val_20426 === 45) {
                                                                                    var inst_20415 = state_20425[2];
                                                                                    var state_20425__$1 = state_20425;
                                                                                    var statearr_20489_20554 = state_20425__$1;
                                                                                    statearr_20489_20554[2] = inst_20415;
                                                                                    statearr_20489_20554[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_20426 === 26) {
                                                                                      var inst_20357 = state_20425[29];
                                                                                      var inst_20411 = state_20425[2];
                                                                                      var inst_20412 = cljs.core.seq.call(null, inst_20357);
                                                                                      var state_20425__$1 = function() {
                                                                                        var statearr_20490 = state_20425;
                                                                                        statearr_20490[31] = inst_20411;
                                                                                        return statearr_20490;
                                                                                      }();
                                                                                      if (inst_20412) {
                                                                                        var statearr_20491_20555 = state_20425__$1;
                                                                                        statearr_20491_20555[1] = 42;
                                                                                      } else {
                                                                                        var statearr_20492_20556 = state_20425__$1;
                                                                                        statearr_20492_20556[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_20426 === 16) {
                                                                                        var inst_20326 = state_20425[7];
                                                                                        var inst_20328 = cljs.core.chunked_seq_QMARK_.call(null, inst_20326);
                                                                                        var state_20425__$1 = state_20425;
                                                                                        if (inst_20328) {
                                                                                          var statearr_20493_20557 = state_20425__$1;
                                                                                          statearr_20493_20557[1] = 19;
                                                                                        } else {
                                                                                          var statearr_20494_20558 = state_20425__$1;
                                                                                          statearr_20494_20558[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_20426 === 38) {
                                                                                          var inst_20404 = state_20425[2];
                                                                                          var state_20425__$1 = state_20425;
                                                                                          var statearr_20495_20559 = state_20425__$1;
                                                                                          statearr_20495_20559[2] = inst_20404;
                                                                                          statearr_20495_20559[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_20426 === 30) {
                                                                                            var state_20425__$1 = state_20425;
                                                                                            var statearr_20496_20560 = state_20425__$1;
                                                                                            statearr_20496_20560[2] = null;
                                                                                            statearr_20496_20560[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            if (state_val_20426 === 10) {
                                                                                              var inst_20309 = state_20425[13];
                                                                                              var inst_20307 = state_20425[17];
                                                                                              var inst_20315 = cljs.core._nth.call(null, inst_20307, inst_20309);
                                                                                              var inst_20316 = cljs.core.nth.call(null, inst_20315, 0, null);
                                                                                              var inst_20317 = cljs.core.nth.call(null, inst_20315, 1, null);
                                                                                              var state_20425__$1 = function() {
                                                                                                var statearr_20497 = state_20425;
                                                                                                statearr_20497[26] = inst_20316;
                                                                                                return statearr_20497;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_20317)) {
                                                                                                var statearr_20498_20561 = state_20425__$1;
                                                                                                statearr_20498_20561[1] = 13;
                                                                                              } else {
                                                                                                var statearr_20499_20562 = state_20425__$1;
                                                                                                statearr_20499_20562[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                            } else {
                                                                                              if (state_val_20426 === 18) {
                                                                                                var inst_20350 = state_20425[2];
                                                                                                var state_20425__$1 = state_20425;
                                                                                                var statearr_20500_20563 = state_20425__$1;
                                                                                                statearr_20500_20563[2] = inst_20350;
                                                                                                statearr_20500_20563[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                              } else {
                                                                                                if (state_val_20426 === 42) {
                                                                                                  var state_20425__$1 = state_20425;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20425__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_20426 === 37) {
                                                                                                    var inst_20393 = state_20425[23];
                                                                                                    var inst_20297 = state_20425[11];
                                                                                                    var inst_20384 = state_20425[25];
                                                                                                    var inst_20393__$1 = cljs.core.first.call(null, inst_20384);
                                                                                                    var inst_20394 = cljs.core.async.put_BANG_.call(null, inst_20393__$1, inst_20297, done);
                                                                                                    var state_20425__$1 = function() {
                                                                                                      var statearr_20501 = state_20425;
                                                                                                      statearr_20501[23] = inst_20393__$1;
                                                                                                      return statearr_20501;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_20394)) {
                                                                                                      var statearr_20502_20564 = state_20425__$1;
                                                                                                      statearr_20502_20564[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_20503_20565 = state_20425__$1;
                                                                                                      statearr_20503_20565[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                  } else {
                                                                                                    if (state_val_20426 === 8) {
                                                                                                      var inst_20309 = state_20425[13];
                                                                                                      var inst_20308 = state_20425[14];
                                                                                                      var inst_20311 = inst_20309 < inst_20308;
                                                                                                      var inst_20312 = inst_20311;
                                                                                                      var state_20425__$1 = state_20425;
                                                                                                      if (cljs.core.truth_(inst_20312)) {
                                                                                                        var statearr_20504_20566 = state_20425__$1;
                                                                                                        statearr_20504_20566[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_20505_20567 = state_20425__$1;
                                                                                                        statearr_20505_20567[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6478__auto___20513, cs, m, dchan, dctr, done);
        return function(switch__6463__auto__, c__6478__auto___20513, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__6464__auto__ = null;
            var state_machine__6464__auto____0 = function() {
              var statearr_20509 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_20509[0] = state_machine__6464__auto__;
              statearr_20509[1] = 1;
              return statearr_20509;
            };
            var state_machine__6464__auto____1 = function(state_20425) {
              while (true) {
                var ret_value__6465__auto__ = function() {
                  try {
                    while (true) {
                      var result__6466__auto__ = switch__6463__auto__.call(null, state_20425);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6466__auto__;
                      }
                      break;
                    }
                  } catch (e20510) {
                    if (e20510 instanceof Object) {
                      var ex__6467__auto__ = e20510;
                      var statearr_20511_20568 = state_20425;
                      statearr_20511_20568[5] = ex__6467__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20425);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e20510;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__20569 = state_20425;
                  state_20425 = G__20569;
                  continue;
                } else {
                  return ret_value__6465__auto__;
                }
                break;
              }
            };
            state_machine__6464__auto__ = function(state_20425) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6464__auto____0.call(this);
                case 1:
                  return state_machine__6464__auto____1.call(this, state_20425);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
            return state_machine__6464__auto__;
          }();
        }(switch__6463__auto__, c__6478__auto___20513, cs, m, dchan, dctr, done);
      }();
      var state__6480__auto__ = function() {
        var statearr_20512 = f__6479__auto__.call(null);
        statearr_20512[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___20513;
        return statearr_20512;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
    };
  }(c__6478__auto___20513, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj20571 = {};
  return obj20571;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3565__auto__ = m;
    if (and__3565__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4204__auto__ = m == null ? null : m;
    return function() {
      var or__3577__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3565__auto__ = m;
    if (and__3565__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4204__auto__ = m == null ? null : m;
    return function() {
      var or__3577__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3565__auto__ = m;
    if (and__3565__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4204__auto__ = m == null ? null : m;
    return function() {
      var or__3577__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3565__auto__ = m;
    if (and__3565__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4204__auto__ = m == null ? null : m;
    return function() {
      var or__3577__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3565__auto__ = m;
    if (and__3565__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4204__auto__ = m == null ? null : m;
    return function() {
      var or__3577__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t20691 !== "undefined") {
    } else {
      cljs.core.async.t20691 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta20692) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta20692 = meta20692;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t20691.cljs$lang$type = true;
      cljs.core.async.t20691.cljs$lang$ctorStr = "cljs.core.async/t20691";
      cljs.core.async.t20691.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
          return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t20691");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20691.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t20691.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20691.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20691.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20691.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20691.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20691.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t20691.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20691.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_20693) {
          var self__ = this;
          var _20693__$1 = this;
          return self__.meta20692;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t20691.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_20693, meta20692__$1) {
          var self__ = this;
          var _20693__$1 = this;
          return new cljs.core.async.t20691(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta20692__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t20691 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t20691(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta20692) {
          return new cljs.core.async.t20691(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta20692);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t20691(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__6478__auto___20810 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___20810, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__6479__auto__ = function() {
        var switch__6463__auto__ = function(c__6478__auto___20810, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_20763) {
            var state_val_20764 = state_20763[1];
            if (state_val_20764 === 7) {
              var inst_20707 = state_20763[7];
              var inst_20712 = cljs.core.apply.call(null, cljs.core.hash_map, inst_20707);
              var state_20763__$1 = state_20763;
              var statearr_20765_20811 = state_20763__$1;
              statearr_20765_20811[2] = inst_20712;
              statearr_20765_20811[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_20764 === 20) {
                var inst_20722 = state_20763[8];
                var state_20763__$1 = state_20763;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20763__$1, 23, out, inst_20722);
              } else {
                if (state_val_20764 === 1) {
                  var inst_20697 = state_20763[9];
                  var inst_20697__$1 = calc_state.call(null);
                  var inst_20698 = cljs.core.seq_QMARK_.call(null, inst_20697__$1);
                  var state_20763__$1 = function() {
                    var statearr_20766 = state_20763;
                    statearr_20766[9] = inst_20697__$1;
                    return statearr_20766;
                  }();
                  if (inst_20698) {
                    var statearr_20767_20812 = state_20763__$1;
                    statearr_20767_20812[1] = 2;
                  } else {
                    var statearr_20768_20813 = state_20763__$1;
                    statearr_20768_20813[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_20764 === 24) {
                    var inst_20715 = state_20763[10];
                    var inst_20707 = inst_20715;
                    var state_20763__$1 = function() {
                      var statearr_20769 = state_20763;
                      statearr_20769[7] = inst_20707;
                      return statearr_20769;
                    }();
                    var statearr_20770_20814 = state_20763__$1;
                    statearr_20770_20814[2] = null;
                    statearr_20770_20814[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_20764 === 4) {
                      var inst_20697 = state_20763[9];
                      var inst_20703 = state_20763[2];
                      var inst_20704 = cljs.core.get.call(null, inst_20703, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                      var inst_20705 = cljs.core.get.call(null, inst_20703, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                      var inst_20706 = cljs.core.get.call(null, inst_20703, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                      var inst_20707 = inst_20697;
                      var state_20763__$1 = function() {
                        var statearr_20771 = state_20763;
                        statearr_20771[7] = inst_20707;
                        statearr_20771[11] = inst_20704;
                        statearr_20771[12] = inst_20705;
                        statearr_20771[13] = inst_20706;
                        return statearr_20771;
                      }();
                      var statearr_20772_20815 = state_20763__$1;
                      statearr_20772_20815[2] = null;
                      statearr_20772_20815[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_20764 === 15) {
                        var state_20763__$1 = state_20763;
                        var statearr_20773_20816 = state_20763__$1;
                        statearr_20773_20816[2] = null;
                        statearr_20773_20816[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_20764 === 21) {
                          var inst_20715 = state_20763[10];
                          var inst_20707 = inst_20715;
                          var state_20763__$1 = function() {
                            var statearr_20774 = state_20763;
                            statearr_20774[7] = inst_20707;
                            return statearr_20774;
                          }();
                          var statearr_20775_20817 = state_20763__$1;
                          statearr_20775_20817[2] = null;
                          statearr_20775_20817[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_20764 === 13) {
                            var inst_20759 = state_20763[2];
                            var state_20763__$1 = state_20763;
                            var statearr_20776_20818 = state_20763__$1;
                            statearr_20776_20818[2] = inst_20759;
                            statearr_20776_20818[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_20764 === 22) {
                              var inst_20757 = state_20763[2];
                              var state_20763__$1 = state_20763;
                              var statearr_20777_20819 = state_20763__$1;
                              statearr_20777_20819[2] = inst_20757;
                              statearr_20777_20819[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_20764 === 6) {
                                var inst_20761 = state_20763[2];
                                var state_20763__$1 = state_20763;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20763__$1, inst_20761);
                              } else {
                                if (state_val_20764 === 25) {
                                  var state_20763__$1 = state_20763;
                                  var statearr_20778_20820 = state_20763__$1;
                                  statearr_20778_20820[2] = null;
                                  statearr_20778_20820[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_20764 === 17) {
                                    var inst_20737 = state_20763[14];
                                    var state_20763__$1 = state_20763;
                                    var statearr_20779_20821 = state_20763__$1;
                                    statearr_20779_20821[2] = inst_20737;
                                    statearr_20779_20821[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_20764 === 3) {
                                      var inst_20697 = state_20763[9];
                                      var state_20763__$1 = state_20763;
                                      var statearr_20780_20822 = state_20763__$1;
                                      statearr_20780_20822[2] = inst_20697;
                                      statearr_20780_20822[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_20764 === 12) {
                                        var inst_20723 = state_20763[15];
                                        var inst_20718 = state_20763[16];
                                        var inst_20737 = state_20763[14];
                                        var inst_20737__$1 = inst_20718.call(null, inst_20723);
                                        var state_20763__$1 = function() {
                                          var statearr_20781 = state_20763;
                                          statearr_20781[14] = inst_20737__$1;
                                          return statearr_20781;
                                        }();
                                        if (cljs.core.truth_(inst_20737__$1)) {
                                          var statearr_20782_20823 = state_20763__$1;
                                          statearr_20782_20823[1] = 17;
                                        } else {
                                          var statearr_20783_20824 = state_20763__$1;
                                          statearr_20783_20824[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_20764 === 2) {
                                          var inst_20697 = state_20763[9];
                                          var inst_20700 = cljs.core.apply.call(null, cljs.core.hash_map, inst_20697);
                                          var state_20763__$1 = state_20763;
                                          var statearr_20784_20825 = state_20763__$1;
                                          statearr_20784_20825[2] = inst_20700;
                                          statearr_20784_20825[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_20764 === 23) {
                                            var inst_20748 = state_20763[2];
                                            var state_20763__$1 = state_20763;
                                            if (cljs.core.truth_(inst_20748)) {
                                              var statearr_20785_20826 = state_20763__$1;
                                              statearr_20785_20826[1] = 24;
                                            } else {
                                              var statearr_20786_20827 = state_20763__$1;
                                              statearr_20786_20827[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_20764 === 19) {
                                              var inst_20745 = state_20763[2];
                                              var state_20763__$1 = state_20763;
                                              if (cljs.core.truth_(inst_20745)) {
                                                var statearr_20787_20828 = state_20763__$1;
                                                statearr_20787_20828[1] = 20;
                                              } else {
                                                var statearr_20788_20829 = state_20763__$1;
                                                statearr_20788_20829[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_20764 === 11) {
                                                var inst_20722 = state_20763[8];
                                                var inst_20728 = inst_20722 == null;
                                                var state_20763__$1 = state_20763;
                                                if (cljs.core.truth_(inst_20728)) {
                                                  var statearr_20789_20830 = state_20763__$1;
                                                  statearr_20789_20830[1] = 14;
                                                } else {
                                                  var statearr_20790_20831 = state_20763__$1;
                                                  statearr_20790_20831[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_20764 === 9) {
                                                  var inst_20715 = state_20763[10];
                                                  var inst_20715__$1 = state_20763[2];
                                                  var inst_20716 = cljs.core.get.call(null, inst_20715__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                                                  var inst_20717 = cljs.core.get.call(null, inst_20715__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                                                  var inst_20718 = cljs.core.get.call(null, inst_20715__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                                                  var state_20763__$1 = function() {
                                                    var statearr_20791 = state_20763;
                                                    statearr_20791[17] = inst_20717;
                                                    statearr_20791[16] = inst_20718;
                                                    statearr_20791[10] = inst_20715__$1;
                                                    return statearr_20791;
                                                  }();
                                                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_20763__$1, 10, inst_20716);
                                                } else {
                                                  if (state_val_20764 === 5) {
                                                    var inst_20707 = state_20763[7];
                                                    var inst_20710 = cljs.core.seq_QMARK_.call(null, inst_20707);
                                                    var state_20763__$1 = state_20763;
                                                    if (inst_20710) {
                                                      var statearr_20792_20832 = state_20763__$1;
                                                      statearr_20792_20832[1] = 7;
                                                    } else {
                                                      var statearr_20793_20833 = state_20763__$1;
                                                      statearr_20793_20833[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_20764 === 14) {
                                                      var inst_20723 = state_20763[15];
                                                      var inst_20730 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_20723);
                                                      var state_20763__$1 = state_20763;
                                                      var statearr_20794_20834 = state_20763__$1;
                                                      statearr_20794_20834[2] = inst_20730;
                                                      statearr_20794_20834[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_20764 === 26) {
                                                        var inst_20753 = state_20763[2];
                                                        var state_20763__$1 = state_20763;
                                                        var statearr_20795_20835 = state_20763__$1;
                                                        statearr_20795_20835[2] = inst_20753;
                                                        statearr_20795_20835[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_20764 === 16) {
                                                          var inst_20733 = state_20763[2];
                                                          var inst_20734 = calc_state.call(null);
                                                          var inst_20707 = inst_20734;
                                                          var state_20763__$1 = function() {
                                                            var statearr_20796 = state_20763;
                                                            statearr_20796[7] = inst_20707;
                                                            statearr_20796[18] = inst_20733;
                                                            return statearr_20796;
                                                          }();
                                                          var statearr_20797_20836 = state_20763__$1;
                                                          statearr_20797_20836[2] = null;
                                                          statearr_20797_20836[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_20764 === 10) {
                                                            var inst_20723 = state_20763[15];
                                                            var inst_20722 = state_20763[8];
                                                            var inst_20721 = state_20763[2];
                                                            var inst_20722__$1 = cljs.core.nth.call(null, inst_20721, 0, null);
                                                            var inst_20723__$1 = cljs.core.nth.call(null, inst_20721, 1, null);
                                                            var inst_20724 = inst_20722__$1 == null;
                                                            var inst_20725 = cljs.core._EQ_.call(null, inst_20723__$1, change);
                                                            var inst_20726 = inst_20724 || inst_20725;
                                                            var state_20763__$1 = function() {
                                                              var statearr_20798 = state_20763;
                                                              statearr_20798[15] = inst_20723__$1;
                                                              statearr_20798[8] = inst_20722__$1;
                                                              return statearr_20798;
                                                            }();
                                                            if (cljs.core.truth_(inst_20726)) {
                                                              var statearr_20799_20837 = state_20763__$1;
                                                              statearr_20799_20837[1] = 11;
                                                            } else {
                                                              var statearr_20800_20838 = state_20763__$1;
                                                              statearr_20800_20838[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_20764 === 18) {
                                                              var inst_20717 = state_20763[17];
                                                              var inst_20723 = state_20763[15];
                                                              var inst_20718 = state_20763[16];
                                                              var inst_20740 = cljs.core.empty_QMARK_.call(null, inst_20718);
                                                              var inst_20741 = inst_20717.call(null, inst_20723);
                                                              var inst_20742 = cljs.core.not.call(null, inst_20741);
                                                              var inst_20743 = inst_20740 && inst_20742;
                                                              var state_20763__$1 = state_20763;
                                                              var statearr_20801_20839 = state_20763__$1;
                                                              statearr_20801_20839[2] = inst_20743;
                                                              statearr_20801_20839[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_20764 === 8) {
                                                                var inst_20707 = state_20763[7];
                                                                var state_20763__$1 = state_20763;
                                                                var statearr_20802_20840 = state_20763__$1;
                                                                statearr_20802_20840[2] = inst_20707;
                                                                statearr_20802_20840[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__6478__auto___20810, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__6463__auto__, c__6478__auto___20810, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__6464__auto__ = null;
            var state_machine__6464__auto____0 = function() {
              var statearr_20806 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_20806[0] = state_machine__6464__auto__;
              statearr_20806[1] = 1;
              return statearr_20806;
            };
            var state_machine__6464__auto____1 = function(state_20763) {
              while (true) {
                var ret_value__6465__auto__ = function() {
                  try {
                    while (true) {
                      var result__6466__auto__ = switch__6463__auto__.call(null, state_20763);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6466__auto__;
                      }
                      break;
                    }
                  } catch (e20807) {
                    if (e20807 instanceof Object) {
                      var ex__6467__auto__ = e20807;
                      var statearr_20808_20841 = state_20763;
                      statearr_20808_20841[5] = ex__6467__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20763);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e20807;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__20842 = state_20763;
                  state_20763 = G__20842;
                  continue;
                } else {
                  return ret_value__6465__auto__;
                }
                break;
              }
            };
            state_machine__6464__auto__ = function(state_20763) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6464__auto____0.call(this);
                case 1:
                  return state_machine__6464__auto____1.call(this, state_20763);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
            return state_machine__6464__auto__;
          }();
        }(switch__6463__auto__, c__6478__auto___20810, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__6480__auto__ = function() {
        var statearr_20809 = f__6479__auto__.call(null);
        statearr_20809[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___20810;
        return statearr_20809;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
    };
  }(c__6478__auto___20810, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj20844 = {};
  return obj20844;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3565__auto__ = p;
    if (and__3565__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4204__auto__ = p == null ? null : p;
    return function() {
      var or__3577__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3565__auto__ = p;
    if (and__3565__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3565__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4204__auto__ = p == null ? null : p;
    return function() {
      var or__3577__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4204__auto__)];
      if (or__3577__auto__) {
        return or__3577__auto__;
      } else {
        var or__3577__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3577__auto____$1) {
          return or__3577__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3565__auto__ = p;
      if (and__3565__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4204__auto__ = p == null ? null : p;
      return function() {
        var or__3577__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3565__auto__ = p;
      if (and__3565__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3565__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4204__auto__ = p == null ? null : p;
      return function() {
        var or__3577__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4204__auto__)];
        if (or__3577__auto__) {
          return or__3577__auto__;
        } else {
          var or__3577__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3577__auto____$1) {
            return or__3577__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3577__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3577__auto__)) {
          return or__3577__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3577__auto__, mults) {
            return function(p1__20845_SHARP_) {
              if (cljs.core.truth_(p1__20845_SHARP_.call(null, topic))) {
                return p1__20845_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__20845_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3577__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t20968 !== "undefined") {
      } else {
        cljs.core.async.t20968 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta20969) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta20969 = meta20969;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t20968.cljs$lang$type = true;
        cljs.core.async.t20968.cljs$lang$ctorStr = "cljs.core.async/t20968";
        cljs.core.async.t20968.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4144__auto__, writer__4145__auto__, opt__4146__auto__) {
            return cljs.core._write.call(null, writer__4145__auto__, "cljs.core.async/t20968");
          };
        }(mults, ensure_mult);
        cljs.core.async.t20968.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t20968.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20968.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t20968.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20968.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t20968.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t20968.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t20968.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_20970) {
            var self__ = this;
            var _20970__$1 = this;
            return self__.meta20969;
          };
        }(mults, ensure_mult);
        cljs.core.async.t20968.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_20970, meta20969__$1) {
            var self__ = this;
            var _20970__$1 = this;
            return new cljs.core.async.t20968(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta20969__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t20968 = function(mults, ensure_mult) {
          return function __GT_t20968(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta20969) {
            return new cljs.core.async.t20968(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta20969);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t20968(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__6478__auto___21090 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___21090, mults, ensure_mult, p) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___21090, mults, ensure_mult, p) {
            return function(state_21042) {
              var state_val_21043 = state_21042[1];
              if (state_val_21043 === 7) {
                var inst_21038 = state_21042[2];
                var state_21042__$1 = state_21042;
                var statearr_21044_21091 = state_21042__$1;
                statearr_21044_21091[2] = inst_21038;
                statearr_21044_21091[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21043 === 20) {
                  var state_21042__$1 = state_21042;
                  var statearr_21045_21092 = state_21042__$1;
                  statearr_21045_21092[2] = null;
                  statearr_21045_21092[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21043 === 1) {
                    var state_21042__$1 = state_21042;
                    var statearr_21046_21093 = state_21042__$1;
                    statearr_21046_21093[2] = null;
                    statearr_21046_21093[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21043 === 24) {
                      var inst_21021 = state_21042[7];
                      var inst_21030 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_21021);
                      var state_21042__$1 = state_21042;
                      var statearr_21047_21094 = state_21042__$1;
                      statearr_21047_21094[2] = inst_21030;
                      statearr_21047_21094[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21043 === 4) {
                        var inst_20973 = state_21042[8];
                        var inst_20973__$1 = state_21042[2];
                        var inst_20974 = inst_20973__$1 == null;
                        var state_21042__$1 = function() {
                          var statearr_21048 = state_21042;
                          statearr_21048[8] = inst_20973__$1;
                          return statearr_21048;
                        }();
                        if (cljs.core.truth_(inst_20974)) {
                          var statearr_21049_21095 = state_21042__$1;
                          statearr_21049_21095[1] = 5;
                        } else {
                          var statearr_21050_21096 = state_21042__$1;
                          statearr_21050_21096[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_21043 === 15) {
                          var inst_21015 = state_21042[2];
                          var state_21042__$1 = state_21042;
                          var statearr_21051_21097 = state_21042__$1;
                          statearr_21051_21097[2] = inst_21015;
                          statearr_21051_21097[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21043 === 21) {
                            var inst_21035 = state_21042[2];
                            var state_21042__$1 = function() {
                              var statearr_21052 = state_21042;
                              statearr_21052[9] = inst_21035;
                              return statearr_21052;
                            }();
                            var statearr_21053_21098 = state_21042__$1;
                            statearr_21053_21098[2] = null;
                            statearr_21053_21098[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_21043 === 13) {
                              var inst_20997 = state_21042[10];
                              var inst_20999 = cljs.core.chunked_seq_QMARK_.call(null, inst_20997);
                              var state_21042__$1 = state_21042;
                              if (inst_20999) {
                                var statearr_21054_21099 = state_21042__$1;
                                statearr_21054_21099[1] = 16;
                              } else {
                                var statearr_21055_21100 = state_21042__$1;
                                statearr_21055_21100[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_21043 === 22) {
                                var inst_21027 = state_21042[2];
                                var state_21042__$1 = state_21042;
                                if (cljs.core.truth_(inst_21027)) {
                                  var statearr_21056_21101 = state_21042__$1;
                                  statearr_21056_21101[1] = 23;
                                } else {
                                  var statearr_21057_21102 = state_21042__$1;
                                  statearr_21057_21102[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_21043 === 6) {
                                  var inst_21021 = state_21042[7];
                                  var inst_20973 = state_21042[8];
                                  var inst_21023 = state_21042[11];
                                  var inst_21021__$1 = topic_fn.call(null, inst_20973);
                                  var inst_21022 = cljs.core.deref.call(null, mults);
                                  var inst_21023__$1 = cljs.core.get.call(null, inst_21022, inst_21021__$1);
                                  var state_21042__$1 = function() {
                                    var statearr_21058 = state_21042;
                                    statearr_21058[7] = inst_21021__$1;
                                    statearr_21058[11] = inst_21023__$1;
                                    return statearr_21058;
                                  }();
                                  if (cljs.core.truth_(inst_21023__$1)) {
                                    var statearr_21059_21103 = state_21042__$1;
                                    statearr_21059_21103[1] = 19;
                                  } else {
                                    var statearr_21060_21104 = state_21042__$1;
                                    statearr_21060_21104[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_21043 === 25) {
                                    var inst_21032 = state_21042[2];
                                    var state_21042__$1 = state_21042;
                                    var statearr_21061_21105 = state_21042__$1;
                                    statearr_21061_21105[2] = inst_21032;
                                    statearr_21061_21105[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_21043 === 17) {
                                      var inst_20997 = state_21042[10];
                                      var inst_21006 = cljs.core.first.call(null, inst_20997);
                                      var inst_21007 = cljs.core.async.muxch_STAR_.call(null, inst_21006);
                                      var inst_21008 = cljs.core.async.close_BANG_.call(null, inst_21007);
                                      var inst_21009 = cljs.core.next.call(null, inst_20997);
                                      var inst_20983 = inst_21009;
                                      var inst_20984 = null;
                                      var inst_20985 = 0;
                                      var inst_20986 = 0;
                                      var state_21042__$1 = function() {
                                        var statearr_21062 = state_21042;
                                        statearr_21062[12] = inst_20984;
                                        statearr_21062[13] = inst_21008;
                                        statearr_21062[14] = inst_20986;
                                        statearr_21062[15] = inst_20985;
                                        statearr_21062[16] = inst_20983;
                                        return statearr_21062;
                                      }();
                                      var statearr_21063_21106 = state_21042__$1;
                                      statearr_21063_21106[2] = null;
                                      statearr_21063_21106[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_21043 === 3) {
                                        var inst_21040 = state_21042[2];
                                        var state_21042__$1 = state_21042;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21042__$1, inst_21040);
                                      } else {
                                        if (state_val_21043 === 12) {
                                          var inst_21017 = state_21042[2];
                                          var state_21042__$1 = state_21042;
                                          var statearr_21064_21107 = state_21042__$1;
                                          statearr_21064_21107[2] = inst_21017;
                                          statearr_21064_21107[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_21043 === 2) {
                                            var state_21042__$1 = state_21042;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21042__$1, 4, ch);
                                          } else {
                                            if (state_val_21043 === 23) {
                                              var state_21042__$1 = state_21042;
                                              var statearr_21065_21108 = state_21042__$1;
                                              statearr_21065_21108[2] = null;
                                              statearr_21065_21108[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_21043 === 19) {
                                                var inst_20973 = state_21042[8];
                                                var inst_21023 = state_21042[11];
                                                var inst_21025 = cljs.core.async.muxch_STAR_.call(null, inst_21023);
                                                var state_21042__$1 = state_21042;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21042__$1, 22, inst_21025, inst_20973);
                                              } else {
                                                if (state_val_21043 === 11) {
                                                  var inst_20997 = state_21042[10];
                                                  var inst_20983 = state_21042[16];
                                                  var inst_20997__$1 = cljs.core.seq.call(null, inst_20983);
                                                  var state_21042__$1 = function() {
                                                    var statearr_21066 = state_21042;
                                                    statearr_21066[10] = inst_20997__$1;
                                                    return statearr_21066;
                                                  }();
                                                  if (inst_20997__$1) {
                                                    var statearr_21067_21109 = state_21042__$1;
                                                    statearr_21067_21109[1] = 13;
                                                  } else {
                                                    var statearr_21068_21110 = state_21042__$1;
                                                    statearr_21068_21110[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_21043 === 9) {
                                                    var inst_21019 = state_21042[2];
                                                    var state_21042__$1 = state_21042;
                                                    var statearr_21069_21111 = state_21042__$1;
                                                    statearr_21069_21111[2] = inst_21019;
                                                    statearr_21069_21111[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_21043 === 5) {
                                                      var inst_20980 = cljs.core.deref.call(null, mults);
                                                      var inst_20981 = cljs.core.vals.call(null, inst_20980);
                                                      var inst_20982 = cljs.core.seq.call(null, inst_20981);
                                                      var inst_20983 = inst_20982;
                                                      var inst_20984 = null;
                                                      var inst_20985 = 0;
                                                      var inst_20986 = 0;
                                                      var state_21042__$1 = function() {
                                                        var statearr_21070 = state_21042;
                                                        statearr_21070[12] = inst_20984;
                                                        statearr_21070[14] = inst_20986;
                                                        statearr_21070[15] = inst_20985;
                                                        statearr_21070[16] = inst_20983;
                                                        return statearr_21070;
                                                      }();
                                                      var statearr_21071_21112 = state_21042__$1;
                                                      statearr_21071_21112[2] = null;
                                                      statearr_21071_21112[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_21043 === 14) {
                                                        var state_21042__$1 = state_21042;
                                                        var statearr_21075_21113 = state_21042__$1;
                                                        statearr_21075_21113[2] = null;
                                                        statearr_21075_21113[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_21043 === 16) {
                                                          var inst_20997 = state_21042[10];
                                                          var inst_21001 = cljs.core.chunk_first.call(null, inst_20997);
                                                          var inst_21002 = cljs.core.chunk_rest.call(null, inst_20997);
                                                          var inst_21003 = cljs.core.count.call(null, inst_21001);
                                                          var inst_20983 = inst_21002;
                                                          var inst_20984 = inst_21001;
                                                          var inst_20985 = inst_21003;
                                                          var inst_20986 = 0;
                                                          var state_21042__$1 = function() {
                                                            var statearr_21076 = state_21042;
                                                            statearr_21076[12] = inst_20984;
                                                            statearr_21076[14] = inst_20986;
                                                            statearr_21076[15] = inst_20985;
                                                            statearr_21076[16] = inst_20983;
                                                            return statearr_21076;
                                                          }();
                                                          var statearr_21077_21114 = state_21042__$1;
                                                          statearr_21077_21114[2] = null;
                                                          statearr_21077_21114[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_21043 === 10) {
                                                            var inst_20984 = state_21042[12];
                                                            var inst_20986 = state_21042[14];
                                                            var inst_20985 = state_21042[15];
                                                            var inst_20983 = state_21042[16];
                                                            var inst_20991 = cljs.core._nth.call(null, inst_20984, inst_20986);
                                                            var inst_20992 = cljs.core.async.muxch_STAR_.call(null, inst_20991);
                                                            var inst_20993 = cljs.core.async.close_BANG_.call(null, inst_20992);
                                                            var inst_20994 = inst_20986 + 1;
                                                            var tmp21072 = inst_20984;
                                                            var tmp21073 = inst_20985;
                                                            var tmp21074 = inst_20983;
                                                            var inst_20983__$1 = tmp21074;
                                                            var inst_20984__$1 = tmp21072;
                                                            var inst_20985__$1 = tmp21073;
                                                            var inst_20986__$1 = inst_20994;
                                                            var state_21042__$1 = function() {
                                                              var statearr_21078 = state_21042;
                                                              statearr_21078[12] = inst_20984__$1;
                                                              statearr_21078[14] = inst_20986__$1;
                                                              statearr_21078[17] = inst_20993;
                                                              statearr_21078[15] = inst_20985__$1;
                                                              statearr_21078[16] = inst_20983__$1;
                                                              return statearr_21078;
                                                            }();
                                                            var statearr_21079_21115 = state_21042__$1;
                                                            statearr_21079_21115[2] = null;
                                                            statearr_21079_21115[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_21043 === 18) {
                                                              var inst_21012 = state_21042[2];
                                                              var state_21042__$1 = state_21042;
                                                              var statearr_21080_21116 = state_21042__$1;
                                                              statearr_21080_21116[2] = inst_21012;
                                                              statearr_21080_21116[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_21043 === 8) {
                                                                var inst_20986 = state_21042[14];
                                                                var inst_20985 = state_21042[15];
                                                                var inst_20988 = inst_20986 < inst_20985;
                                                                var inst_20989 = inst_20988;
                                                                var state_21042__$1 = state_21042;
                                                                if (cljs.core.truth_(inst_20989)) {
                                                                  var statearr_21081_21117 = state_21042__$1;
                                                                  statearr_21081_21117[1] = 10;
                                                                } else {
                                                                  var statearr_21082_21118 = state_21042__$1;
                                                                  statearr_21082_21118[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___21090, mults, ensure_mult, p);
          return function(switch__6463__auto__, c__6478__auto___21090, mults, ensure_mult, p) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_21086 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_21086[0] = state_machine__6464__auto__;
                statearr_21086[1] = 1;
                return statearr_21086;
              };
              var state_machine__6464__auto____1 = function(state_21042) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_21042);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e21087) {
                      if (e21087 instanceof Object) {
                        var ex__6467__auto__ = e21087;
                        var statearr_21088_21119 = state_21042;
                        statearr_21088_21119[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21042);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e21087;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__21120 = state_21042;
                    state_21042 = G__21120;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_21042) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_21042);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___21090, mults, ensure_mult, p);
        }();
        var state__6480__auto__ = function() {
          var statearr_21089 = f__6479__auto__.call(null);
          statearr_21089[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___21090;
          return statearr_21089;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___21090, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__6478__auto___21257 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___21257, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___21257, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_21227) {
              var state_val_21228 = state_21227[1];
              if (state_val_21228 === 7) {
                var state_21227__$1 = state_21227;
                var statearr_21229_21258 = state_21227__$1;
                statearr_21229_21258[2] = null;
                statearr_21229_21258[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21228 === 1) {
                  var state_21227__$1 = state_21227;
                  var statearr_21230_21259 = state_21227__$1;
                  statearr_21230_21259[2] = null;
                  statearr_21230_21259[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21228 === 4) {
                    var inst_21191 = state_21227[7];
                    var inst_21193 = inst_21191 < cnt;
                    var state_21227__$1 = state_21227;
                    if (cljs.core.truth_(inst_21193)) {
                      var statearr_21231_21260 = state_21227__$1;
                      statearr_21231_21260[1] = 6;
                    } else {
                      var statearr_21232_21261 = state_21227__$1;
                      statearr_21232_21261[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21228 === 15) {
                      var inst_21223 = state_21227[2];
                      var state_21227__$1 = state_21227;
                      var statearr_21233_21262 = state_21227__$1;
                      statearr_21233_21262[2] = inst_21223;
                      statearr_21233_21262[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21228 === 13) {
                        var inst_21216 = cljs.core.async.close_BANG_.call(null, out);
                        var state_21227__$1 = state_21227;
                        var statearr_21234_21263 = state_21227__$1;
                        statearr_21234_21263[2] = inst_21216;
                        statearr_21234_21263[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_21228 === 6) {
                          var state_21227__$1 = state_21227;
                          var statearr_21235_21264 = state_21227__$1;
                          statearr_21235_21264[2] = null;
                          statearr_21235_21264[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21228 === 3) {
                            var inst_21225 = state_21227[2];
                            var state_21227__$1 = state_21227;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21227__$1, inst_21225);
                          } else {
                            if (state_val_21228 === 12) {
                              var inst_21213 = state_21227[8];
                              var inst_21213__$1 = state_21227[2];
                              var inst_21214 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_21213__$1);
                              var state_21227__$1 = function() {
                                var statearr_21236 = state_21227;
                                statearr_21236[8] = inst_21213__$1;
                                return statearr_21236;
                              }();
                              if (cljs.core.truth_(inst_21214)) {
                                var statearr_21237_21265 = state_21227__$1;
                                statearr_21237_21265[1] = 13;
                              } else {
                                var statearr_21238_21266 = state_21227__$1;
                                statearr_21238_21266[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_21228 === 2) {
                                var inst_21190 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_21191 = 0;
                                var state_21227__$1 = function() {
                                  var statearr_21239 = state_21227;
                                  statearr_21239[9] = inst_21190;
                                  statearr_21239[7] = inst_21191;
                                  return statearr_21239;
                                }();
                                var statearr_21240_21267 = state_21227__$1;
                                statearr_21240_21267[2] = null;
                                statearr_21240_21267[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_21228 === 11) {
                                  var inst_21191 = state_21227[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_21227, 10, Object, null, 9);
                                  var inst_21200 = chs__$1.call(null, inst_21191);
                                  var inst_21201 = done.call(null, inst_21191);
                                  var inst_21202 = cljs.core.async.take_BANG_.call(null, inst_21200, inst_21201);
                                  var state_21227__$1 = state_21227;
                                  var statearr_21241_21268 = state_21227__$1;
                                  statearr_21241_21268[2] = inst_21202;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21227__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_21228 === 9) {
                                    var inst_21191 = state_21227[7];
                                    var inst_21204 = state_21227[2];
                                    var inst_21205 = inst_21191 + 1;
                                    var inst_21191__$1 = inst_21205;
                                    var state_21227__$1 = function() {
                                      var statearr_21242 = state_21227;
                                      statearr_21242[7] = inst_21191__$1;
                                      statearr_21242[10] = inst_21204;
                                      return statearr_21242;
                                    }();
                                    var statearr_21243_21269 = state_21227__$1;
                                    statearr_21243_21269[2] = null;
                                    statearr_21243_21269[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_21228 === 5) {
                                      var inst_21211 = state_21227[2];
                                      var state_21227__$1 = function() {
                                        var statearr_21244 = state_21227;
                                        statearr_21244[11] = inst_21211;
                                        return statearr_21244;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21227__$1, 12, dchan);
                                    } else {
                                      if (state_val_21228 === 14) {
                                        var inst_21213 = state_21227[8];
                                        var inst_21218 = cljs.core.apply.call(null, f, inst_21213);
                                        var state_21227__$1 = state_21227;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21227__$1, 16, out, inst_21218);
                                      } else {
                                        if (state_val_21228 === 16) {
                                          var inst_21220 = state_21227[2];
                                          var state_21227__$1 = function() {
                                            var statearr_21245 = state_21227;
                                            statearr_21245[12] = inst_21220;
                                            return statearr_21245;
                                          }();
                                          var statearr_21246_21270 = state_21227__$1;
                                          statearr_21246_21270[2] = null;
                                          statearr_21246_21270[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_21228 === 10) {
                                            var inst_21195 = state_21227[2];
                                            var inst_21196 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_21227__$1 = function() {
                                              var statearr_21247 = state_21227;
                                              statearr_21247[13] = inst_21195;
                                              return statearr_21247;
                                            }();
                                            var statearr_21248_21271 = state_21227__$1;
                                            statearr_21248_21271[2] = inst_21196;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21227__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_21228 === 8) {
                                              var inst_21209 = state_21227[2];
                                              var state_21227__$1 = state_21227;
                                              var statearr_21249_21272 = state_21227__$1;
                                              statearr_21249_21272[2] = inst_21209;
                                              statearr_21249_21272[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___21257, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__6463__auto__, c__6478__auto___21257, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_21253 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_21253[0] = state_machine__6464__auto__;
                statearr_21253[1] = 1;
                return statearr_21253;
              };
              var state_machine__6464__auto____1 = function(state_21227) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_21227);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e21254) {
                      if (e21254 instanceof Object) {
                        var ex__6467__auto__ = e21254;
                        var statearr_21255_21273 = state_21227;
                        statearr_21255_21273[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21227);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e21254;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__21274 = state_21227;
                    state_21227 = G__21274;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_21227) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_21227);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___21257, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__6480__auto__ = function() {
          var statearr_21256 = f__6479__auto__.call(null);
          statearr_21256[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___21257;
          return statearr_21256;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___21257, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6478__auto___21382 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___21382, out) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___21382, out) {
            return function(state_21358) {
              var state_val_21359 = state_21358[1];
              if (state_val_21359 === 7) {
                var inst_21338 = state_21358[7];
                var inst_21337 = state_21358[8];
                var inst_21337__$1 = state_21358[2];
                var inst_21338__$1 = cljs.core.nth.call(null, inst_21337__$1, 0, null);
                var inst_21339 = cljs.core.nth.call(null, inst_21337__$1, 1, null);
                var inst_21340 = inst_21338__$1 == null;
                var state_21358__$1 = function() {
                  var statearr_21360 = state_21358;
                  statearr_21360[9] = inst_21339;
                  statearr_21360[7] = inst_21338__$1;
                  statearr_21360[8] = inst_21337__$1;
                  return statearr_21360;
                }();
                if (cljs.core.truth_(inst_21340)) {
                  var statearr_21361_21383 = state_21358__$1;
                  statearr_21361_21383[1] = 8;
                } else {
                  var statearr_21362_21384 = state_21358__$1;
                  statearr_21362_21384[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21359 === 1) {
                  var inst_21329 = cljs.core.vec.call(null, chs);
                  var inst_21330 = inst_21329;
                  var state_21358__$1 = function() {
                    var statearr_21363 = state_21358;
                    statearr_21363[10] = inst_21330;
                    return statearr_21363;
                  }();
                  var statearr_21364_21385 = state_21358__$1;
                  statearr_21364_21385[2] = null;
                  statearr_21364_21385[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21359 === 4) {
                    var inst_21330 = state_21358[10];
                    var state_21358__$1 = state_21358;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_21358__$1, 7, inst_21330);
                  } else {
                    if (state_val_21359 === 6) {
                      var inst_21354 = state_21358[2];
                      var state_21358__$1 = state_21358;
                      var statearr_21365_21386 = state_21358__$1;
                      statearr_21365_21386[2] = inst_21354;
                      statearr_21365_21386[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21359 === 3) {
                        var inst_21356 = state_21358[2];
                        var state_21358__$1 = state_21358;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21358__$1, inst_21356);
                      } else {
                        if (state_val_21359 === 2) {
                          var inst_21330 = state_21358[10];
                          var inst_21332 = cljs.core.count.call(null, inst_21330);
                          var inst_21333 = inst_21332 > 0;
                          var state_21358__$1 = state_21358;
                          if (cljs.core.truth_(inst_21333)) {
                            var statearr_21367_21387 = state_21358__$1;
                            statearr_21367_21387[1] = 4;
                          } else {
                            var statearr_21368_21388 = state_21358__$1;
                            statearr_21368_21388[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21359 === 11) {
                            var inst_21330 = state_21358[10];
                            var inst_21347 = state_21358[2];
                            var tmp21366 = inst_21330;
                            var inst_21330__$1 = tmp21366;
                            var state_21358__$1 = function() {
                              var statearr_21369 = state_21358;
                              statearr_21369[11] = inst_21347;
                              statearr_21369[10] = inst_21330__$1;
                              return statearr_21369;
                            }();
                            var statearr_21370_21389 = state_21358__$1;
                            statearr_21370_21389[2] = null;
                            statearr_21370_21389[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_21359 === 9) {
                              var inst_21338 = state_21358[7];
                              var state_21358__$1 = state_21358;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21358__$1, 11, out, inst_21338);
                            } else {
                              if (state_val_21359 === 5) {
                                var inst_21352 = cljs.core.async.close_BANG_.call(null, out);
                                var state_21358__$1 = state_21358;
                                var statearr_21371_21390 = state_21358__$1;
                                statearr_21371_21390[2] = inst_21352;
                                statearr_21371_21390[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_21359 === 10) {
                                  var inst_21350 = state_21358[2];
                                  var state_21358__$1 = state_21358;
                                  var statearr_21372_21391 = state_21358__$1;
                                  statearr_21372_21391[2] = inst_21350;
                                  statearr_21372_21391[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_21359 === 8) {
                                    var inst_21339 = state_21358[9];
                                    var inst_21338 = state_21358[7];
                                    var inst_21337 = state_21358[8];
                                    var inst_21330 = state_21358[10];
                                    var inst_21342 = function() {
                                      var c = inst_21339;
                                      var v = inst_21338;
                                      var vec__21335 = inst_21337;
                                      var cs = inst_21330;
                                      return function(c, v, vec__21335, cs, inst_21339, inst_21338, inst_21337, inst_21330, state_val_21359, c__6478__auto___21382, out) {
                                        return function(p1__21275_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__21275_SHARP_);
                                        };
                                      }(c, v, vec__21335, cs, inst_21339, inst_21338, inst_21337, inst_21330, state_val_21359, c__6478__auto___21382, out);
                                    }();
                                    var inst_21343 = cljs.core.filterv.call(null, inst_21342, inst_21330);
                                    var inst_21330__$1 = inst_21343;
                                    var state_21358__$1 = function() {
                                      var statearr_21373 = state_21358;
                                      statearr_21373[10] = inst_21330__$1;
                                      return statearr_21373;
                                    }();
                                    var statearr_21374_21392 = state_21358__$1;
                                    statearr_21374_21392[2] = null;
                                    statearr_21374_21392[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___21382, out);
          return function(switch__6463__auto__, c__6478__auto___21382, out) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_21378 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_21378[0] = state_machine__6464__auto__;
                statearr_21378[1] = 1;
                return statearr_21378;
              };
              var state_machine__6464__auto____1 = function(state_21358) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_21358);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e21379) {
                      if (e21379 instanceof Object) {
                        var ex__6467__auto__ = e21379;
                        var statearr_21380_21393 = state_21358;
                        statearr_21380_21393[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21358);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e21379;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__21394 = state_21358;
                    state_21358 = G__21394;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_21358) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_21358);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___21382, out);
        }();
        var state__6480__auto__ = function() {
          var statearr_21381 = f__6479__auto__.call(null);
          statearr_21381[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___21382;
          return statearr_21381;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___21382, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6478__auto___21487 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___21487, out) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___21487, out) {
            return function(state_21464) {
              var state_val_21465 = state_21464[1];
              if (state_val_21465 === 7) {
                var inst_21446 = state_21464[7];
                var inst_21446__$1 = state_21464[2];
                var inst_21447 = inst_21446__$1 == null;
                var inst_21448 = cljs.core.not.call(null, inst_21447);
                var state_21464__$1 = function() {
                  var statearr_21466 = state_21464;
                  statearr_21466[7] = inst_21446__$1;
                  return statearr_21466;
                }();
                if (inst_21448) {
                  var statearr_21467_21488 = state_21464__$1;
                  statearr_21467_21488[1] = 8;
                } else {
                  var statearr_21468_21489 = state_21464__$1;
                  statearr_21468_21489[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21465 === 1) {
                  var inst_21441 = 0;
                  var state_21464__$1 = function() {
                    var statearr_21469 = state_21464;
                    statearr_21469[8] = inst_21441;
                    return statearr_21469;
                  }();
                  var statearr_21470_21490 = state_21464__$1;
                  statearr_21470_21490[2] = null;
                  statearr_21470_21490[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21465 === 4) {
                    var state_21464__$1 = state_21464;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21464__$1, 7, ch);
                  } else {
                    if (state_val_21465 === 6) {
                      var inst_21459 = state_21464[2];
                      var state_21464__$1 = state_21464;
                      var statearr_21471_21491 = state_21464__$1;
                      statearr_21471_21491[2] = inst_21459;
                      statearr_21471_21491[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21465 === 3) {
                        var inst_21461 = state_21464[2];
                        var inst_21462 = cljs.core.async.close_BANG_.call(null, out);
                        var state_21464__$1 = function() {
                          var statearr_21472 = state_21464;
                          statearr_21472[9] = inst_21461;
                          return statearr_21472;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21464__$1, inst_21462);
                      } else {
                        if (state_val_21465 === 2) {
                          var inst_21441 = state_21464[8];
                          var inst_21443 = inst_21441 < n;
                          var state_21464__$1 = state_21464;
                          if (cljs.core.truth_(inst_21443)) {
                            var statearr_21473_21492 = state_21464__$1;
                            statearr_21473_21492[1] = 4;
                          } else {
                            var statearr_21474_21493 = state_21464__$1;
                            statearr_21474_21493[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21465 === 11) {
                            var inst_21441 = state_21464[8];
                            var inst_21451 = state_21464[2];
                            var inst_21452 = inst_21441 + 1;
                            var inst_21441__$1 = inst_21452;
                            var state_21464__$1 = function() {
                              var statearr_21475 = state_21464;
                              statearr_21475[8] = inst_21441__$1;
                              statearr_21475[10] = inst_21451;
                              return statearr_21475;
                            }();
                            var statearr_21476_21494 = state_21464__$1;
                            statearr_21476_21494[2] = null;
                            statearr_21476_21494[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_21465 === 9) {
                              var state_21464__$1 = state_21464;
                              var statearr_21477_21495 = state_21464__$1;
                              statearr_21477_21495[2] = null;
                              statearr_21477_21495[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_21465 === 5) {
                                var state_21464__$1 = state_21464;
                                var statearr_21478_21496 = state_21464__$1;
                                statearr_21478_21496[2] = null;
                                statearr_21478_21496[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_21465 === 10) {
                                  var inst_21456 = state_21464[2];
                                  var state_21464__$1 = state_21464;
                                  var statearr_21479_21497 = state_21464__$1;
                                  statearr_21479_21497[2] = inst_21456;
                                  statearr_21479_21497[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_21465 === 8) {
                                    var inst_21446 = state_21464[7];
                                    var state_21464__$1 = state_21464;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21464__$1, 11, out, inst_21446);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___21487, out);
          return function(switch__6463__auto__, c__6478__auto___21487, out) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_21483 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_21483[0] = state_machine__6464__auto__;
                statearr_21483[1] = 1;
                return statearr_21483;
              };
              var state_machine__6464__auto____1 = function(state_21464) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_21464);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e21484) {
                      if (e21484 instanceof Object) {
                        var ex__6467__auto__ = e21484;
                        var statearr_21485_21498 = state_21464;
                        statearr_21485_21498[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21464);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e21484;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__21499 = state_21464;
                    state_21464 = G__21499;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_21464) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_21464);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___21487, out);
        }();
        var state__6480__auto__ = function() {
          var statearr_21486 = f__6479__auto__.call(null);
          statearr_21486[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___21487;
          return statearr_21486;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___21487, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6478__auto___21596 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___21596, out) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___21596, out) {
            return function(state_21571) {
              var state_val_21572 = state_21571[1];
              if (state_val_21572 === 7) {
                var inst_21566 = state_21571[2];
                var state_21571__$1 = state_21571;
                var statearr_21573_21597 = state_21571__$1;
                statearr_21573_21597[2] = inst_21566;
                statearr_21573_21597[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21572 === 1) {
                  var inst_21548 = null;
                  var state_21571__$1 = function() {
                    var statearr_21574 = state_21571;
                    statearr_21574[7] = inst_21548;
                    return statearr_21574;
                  }();
                  var statearr_21575_21598 = state_21571__$1;
                  statearr_21575_21598[2] = null;
                  statearr_21575_21598[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21572 === 4) {
                    var inst_21551 = state_21571[8];
                    var inst_21551__$1 = state_21571[2];
                    var inst_21552 = inst_21551__$1 == null;
                    var inst_21553 = cljs.core.not.call(null, inst_21552);
                    var state_21571__$1 = function() {
                      var statearr_21576 = state_21571;
                      statearr_21576[8] = inst_21551__$1;
                      return statearr_21576;
                    }();
                    if (inst_21553) {
                      var statearr_21577_21599 = state_21571__$1;
                      statearr_21577_21599[1] = 5;
                    } else {
                      var statearr_21578_21600 = state_21571__$1;
                      statearr_21578_21600[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21572 === 6) {
                      var state_21571__$1 = state_21571;
                      var statearr_21579_21601 = state_21571__$1;
                      statearr_21579_21601[2] = null;
                      statearr_21579_21601[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21572 === 3) {
                        var inst_21568 = state_21571[2];
                        var inst_21569 = cljs.core.async.close_BANG_.call(null, out);
                        var state_21571__$1 = function() {
                          var statearr_21580 = state_21571;
                          statearr_21580[9] = inst_21568;
                          return statearr_21580;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21571__$1, inst_21569);
                      } else {
                        if (state_val_21572 === 2) {
                          var state_21571__$1 = state_21571;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21571__$1, 4, ch);
                        } else {
                          if (state_val_21572 === 11) {
                            var inst_21551 = state_21571[8];
                            var inst_21560 = state_21571[2];
                            var inst_21548 = inst_21551;
                            var state_21571__$1 = function() {
                              var statearr_21581 = state_21571;
                              statearr_21581[10] = inst_21560;
                              statearr_21581[7] = inst_21548;
                              return statearr_21581;
                            }();
                            var statearr_21582_21602 = state_21571__$1;
                            statearr_21582_21602[2] = null;
                            statearr_21582_21602[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_21572 === 9) {
                              var inst_21551 = state_21571[8];
                              var state_21571__$1 = state_21571;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21571__$1, 11, out, inst_21551);
                            } else {
                              if (state_val_21572 === 5) {
                                var inst_21548 = state_21571[7];
                                var inst_21551 = state_21571[8];
                                var inst_21555 = cljs.core._EQ_.call(null, inst_21551, inst_21548);
                                var state_21571__$1 = state_21571;
                                if (inst_21555) {
                                  var statearr_21584_21603 = state_21571__$1;
                                  statearr_21584_21603[1] = 8;
                                } else {
                                  var statearr_21585_21604 = state_21571__$1;
                                  statearr_21585_21604[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_21572 === 10) {
                                  var inst_21563 = state_21571[2];
                                  var state_21571__$1 = state_21571;
                                  var statearr_21586_21605 = state_21571__$1;
                                  statearr_21586_21605[2] = inst_21563;
                                  statearr_21586_21605[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_21572 === 8) {
                                    var inst_21548 = state_21571[7];
                                    var tmp21583 = inst_21548;
                                    var inst_21548__$1 = tmp21583;
                                    var state_21571__$1 = function() {
                                      var statearr_21587 = state_21571;
                                      statearr_21587[7] = inst_21548__$1;
                                      return statearr_21587;
                                    }();
                                    var statearr_21588_21606 = state_21571__$1;
                                    statearr_21588_21606[2] = null;
                                    statearr_21588_21606[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___21596, out);
          return function(switch__6463__auto__, c__6478__auto___21596, out) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_21592 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_21592[0] = state_machine__6464__auto__;
                statearr_21592[1] = 1;
                return statearr_21592;
              };
              var state_machine__6464__auto____1 = function(state_21571) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_21571);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e21593) {
                      if (e21593 instanceof Object) {
                        var ex__6467__auto__ = e21593;
                        var statearr_21594_21607 = state_21571;
                        statearr_21594_21607[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21571);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e21593;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__21608 = state_21571;
                    state_21571 = G__21608;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_21571) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_21571);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___21596, out);
        }();
        var state__6480__auto__ = function() {
          var statearr_21595 = f__6479__auto__.call(null);
          statearr_21595[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___21596;
          return statearr_21595;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___21596, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6478__auto___21743 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___21743, out) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___21743, out) {
            return function(state_21713) {
              var state_val_21714 = state_21713[1];
              if (state_val_21714 === 7) {
                var inst_21709 = state_21713[2];
                var state_21713__$1 = state_21713;
                var statearr_21715_21744 = state_21713__$1;
                statearr_21715_21744[2] = inst_21709;
                statearr_21715_21744[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21714 === 1) {
                  var inst_21676 = new Array(n);
                  var inst_21677 = inst_21676;
                  var inst_21678 = 0;
                  var state_21713__$1 = function() {
                    var statearr_21716 = state_21713;
                    statearr_21716[7] = inst_21678;
                    statearr_21716[8] = inst_21677;
                    return statearr_21716;
                  }();
                  var statearr_21717_21745 = state_21713__$1;
                  statearr_21717_21745[2] = null;
                  statearr_21717_21745[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21714 === 4) {
                    var inst_21681 = state_21713[9];
                    var inst_21681__$1 = state_21713[2];
                    var inst_21682 = inst_21681__$1 == null;
                    var inst_21683 = cljs.core.not.call(null, inst_21682);
                    var state_21713__$1 = function() {
                      var statearr_21718 = state_21713;
                      statearr_21718[9] = inst_21681__$1;
                      return statearr_21718;
                    }();
                    if (inst_21683) {
                      var statearr_21719_21746 = state_21713__$1;
                      statearr_21719_21746[1] = 5;
                    } else {
                      var statearr_21720_21747 = state_21713__$1;
                      statearr_21720_21747[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21714 === 15) {
                      var inst_21703 = state_21713[2];
                      var state_21713__$1 = state_21713;
                      var statearr_21721_21748 = state_21713__$1;
                      statearr_21721_21748[2] = inst_21703;
                      statearr_21721_21748[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21714 === 13) {
                        var state_21713__$1 = state_21713;
                        var statearr_21722_21749 = state_21713__$1;
                        statearr_21722_21749[2] = null;
                        statearr_21722_21749[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_21714 === 6) {
                          var inst_21678 = state_21713[7];
                          var inst_21699 = inst_21678 > 0;
                          var state_21713__$1 = state_21713;
                          if (cljs.core.truth_(inst_21699)) {
                            var statearr_21723_21750 = state_21713__$1;
                            statearr_21723_21750[1] = 12;
                          } else {
                            var statearr_21724_21751 = state_21713__$1;
                            statearr_21724_21751[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21714 === 3) {
                            var inst_21711 = state_21713[2];
                            var state_21713__$1 = state_21713;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21713__$1, inst_21711);
                          } else {
                            if (state_val_21714 === 12) {
                              var inst_21677 = state_21713[8];
                              var inst_21701 = cljs.core.vec.call(null, inst_21677);
                              var state_21713__$1 = state_21713;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21713__$1, 15, out, inst_21701);
                            } else {
                              if (state_val_21714 === 2) {
                                var state_21713__$1 = state_21713;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21713__$1, 4, ch);
                              } else {
                                if (state_val_21714 === 11) {
                                  var inst_21693 = state_21713[2];
                                  var inst_21694 = new Array(n);
                                  var inst_21677 = inst_21694;
                                  var inst_21678 = 0;
                                  var state_21713__$1 = function() {
                                    var statearr_21725 = state_21713;
                                    statearr_21725[7] = inst_21678;
                                    statearr_21725[10] = inst_21693;
                                    statearr_21725[8] = inst_21677;
                                    return statearr_21725;
                                  }();
                                  var statearr_21726_21752 = state_21713__$1;
                                  statearr_21726_21752[2] = null;
                                  statearr_21726_21752[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_21714 === 9) {
                                    var inst_21677 = state_21713[8];
                                    var inst_21691 = cljs.core.vec.call(null, inst_21677);
                                    var state_21713__$1 = state_21713;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21713__$1, 11, out, inst_21691);
                                  } else {
                                    if (state_val_21714 === 5) {
                                      var inst_21678 = state_21713[7];
                                      var inst_21686 = state_21713[11];
                                      var inst_21681 = state_21713[9];
                                      var inst_21677 = state_21713[8];
                                      var inst_21685 = inst_21677[inst_21678] = inst_21681;
                                      var inst_21686__$1 = inst_21678 + 1;
                                      var inst_21687 = inst_21686__$1 < n;
                                      var state_21713__$1 = function() {
                                        var statearr_21727 = state_21713;
                                        statearr_21727[11] = inst_21686__$1;
                                        statearr_21727[12] = inst_21685;
                                        return statearr_21727;
                                      }();
                                      if (cljs.core.truth_(inst_21687)) {
                                        var statearr_21728_21753 = state_21713__$1;
                                        statearr_21728_21753[1] = 8;
                                      } else {
                                        var statearr_21729_21754 = state_21713__$1;
                                        statearr_21729_21754[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_21714 === 14) {
                                        var inst_21706 = state_21713[2];
                                        var inst_21707 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_21713__$1 = function() {
                                          var statearr_21731 = state_21713;
                                          statearr_21731[13] = inst_21706;
                                          return statearr_21731;
                                        }();
                                        var statearr_21732_21755 = state_21713__$1;
                                        statearr_21732_21755[2] = inst_21707;
                                        statearr_21732_21755[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_21714 === 10) {
                                          var inst_21697 = state_21713[2];
                                          var state_21713__$1 = state_21713;
                                          var statearr_21733_21756 = state_21713__$1;
                                          statearr_21733_21756[2] = inst_21697;
                                          statearr_21733_21756[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_21714 === 8) {
                                            var inst_21686 = state_21713[11];
                                            var inst_21677 = state_21713[8];
                                            var tmp21730 = inst_21677;
                                            var inst_21677__$1 = tmp21730;
                                            var inst_21678 = inst_21686;
                                            var state_21713__$1 = function() {
                                              var statearr_21734 = state_21713;
                                              statearr_21734[7] = inst_21678;
                                              statearr_21734[8] = inst_21677__$1;
                                              return statearr_21734;
                                            }();
                                            var statearr_21735_21757 = state_21713__$1;
                                            statearr_21735_21757[2] = null;
                                            statearr_21735_21757[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___21743, out);
          return function(switch__6463__auto__, c__6478__auto___21743, out) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_21739 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_21739[0] = state_machine__6464__auto__;
                statearr_21739[1] = 1;
                return statearr_21739;
              };
              var state_machine__6464__auto____1 = function(state_21713) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_21713);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e21740) {
                      if (e21740 instanceof Object) {
                        var ex__6467__auto__ = e21740;
                        var statearr_21741_21758 = state_21713;
                        statearr_21741_21758[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21713);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e21740;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__21759 = state_21713;
                    state_21713 = G__21759;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_21713) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_21713);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___21743, out);
        }();
        var state__6480__auto__ = function() {
          var statearr_21742 = f__6479__auto__.call(null);
          statearr_21742[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___21743;
          return statearr_21742;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___21743, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__6478__auto___21902 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto___21902, out) {
      return function() {
        var f__6479__auto__ = function() {
          var switch__6463__auto__ = function(c__6478__auto___21902, out) {
            return function(state_21872) {
              var state_val_21873 = state_21872[1];
              if (state_val_21873 === 7) {
                var inst_21868 = state_21872[2];
                var state_21872__$1 = state_21872;
                var statearr_21874_21903 = state_21872__$1;
                statearr_21874_21903[2] = inst_21868;
                statearr_21874_21903[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21873 === 1) {
                  var inst_21831 = [];
                  var inst_21832 = inst_21831;
                  var inst_21833 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538);
                  var state_21872__$1 = function() {
                    var statearr_21875 = state_21872;
                    statearr_21875[7] = inst_21832;
                    statearr_21875[8] = inst_21833;
                    return statearr_21875;
                  }();
                  var statearr_21876_21904 = state_21872__$1;
                  statearr_21876_21904[2] = null;
                  statearr_21876_21904[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21873 === 4) {
                    var inst_21836 = state_21872[9];
                    var inst_21836__$1 = state_21872[2];
                    var inst_21837 = inst_21836__$1 == null;
                    var inst_21838 = cljs.core.not.call(null, inst_21837);
                    var state_21872__$1 = function() {
                      var statearr_21877 = state_21872;
                      statearr_21877[9] = inst_21836__$1;
                      return statearr_21877;
                    }();
                    if (inst_21838) {
                      var statearr_21878_21905 = state_21872__$1;
                      statearr_21878_21905[1] = 5;
                    } else {
                      var statearr_21879_21906 = state_21872__$1;
                      statearr_21879_21906[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21873 === 15) {
                      var inst_21862 = state_21872[2];
                      var state_21872__$1 = state_21872;
                      var statearr_21880_21907 = state_21872__$1;
                      statearr_21880_21907[2] = inst_21862;
                      statearr_21880_21907[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21873 === 13) {
                        var state_21872__$1 = state_21872;
                        var statearr_21881_21908 = state_21872__$1;
                        statearr_21881_21908[2] = null;
                        statearr_21881_21908[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_21873 === 6) {
                          var inst_21832 = state_21872[7];
                          var inst_21857 = inst_21832.length;
                          var inst_21858 = inst_21857 > 0;
                          var state_21872__$1 = state_21872;
                          if (cljs.core.truth_(inst_21858)) {
                            var statearr_21882_21909 = state_21872__$1;
                            statearr_21882_21909[1] = 12;
                          } else {
                            var statearr_21883_21910 = state_21872__$1;
                            statearr_21883_21910[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21873 === 3) {
                            var inst_21870 = state_21872[2];
                            var state_21872__$1 = state_21872;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21872__$1, inst_21870);
                          } else {
                            if (state_val_21873 === 12) {
                              var inst_21832 = state_21872[7];
                              var inst_21860 = cljs.core.vec.call(null, inst_21832);
                              var state_21872__$1 = state_21872;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21872__$1, 15, out, inst_21860);
                            } else {
                              if (state_val_21873 === 2) {
                                var state_21872__$1 = state_21872;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21872__$1, 4, ch);
                              } else {
                                if (state_val_21873 === 11) {
                                  var inst_21840 = state_21872[10];
                                  var inst_21836 = state_21872[9];
                                  var inst_21850 = state_21872[2];
                                  var inst_21851 = [];
                                  var inst_21852 = inst_21851.push(inst_21836);
                                  var inst_21832 = inst_21851;
                                  var inst_21833 = inst_21840;
                                  var state_21872__$1 = function() {
                                    var statearr_21884 = state_21872;
                                    statearr_21884[7] = inst_21832;
                                    statearr_21884[11] = inst_21850;
                                    statearr_21884[8] = inst_21833;
                                    statearr_21884[12] = inst_21852;
                                    return statearr_21884;
                                  }();
                                  var statearr_21885_21911 = state_21872__$1;
                                  statearr_21885_21911[2] = null;
                                  statearr_21885_21911[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_21873 === 9) {
                                    var inst_21832 = state_21872[7];
                                    var inst_21848 = cljs.core.vec.call(null, inst_21832);
                                    var state_21872__$1 = state_21872;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21872__$1, 11, out, inst_21848);
                                  } else {
                                    if (state_val_21873 === 5) {
                                      var inst_21840 = state_21872[10];
                                      var inst_21836 = state_21872[9];
                                      var inst_21833 = state_21872[8];
                                      var inst_21840__$1 = f.call(null, inst_21836);
                                      var inst_21841 = cljs.core._EQ_.call(null, inst_21840__$1, inst_21833);
                                      var inst_21842 = cljs.core.keyword_identical_QMARK_.call(null, inst_21833, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538));
                                      var inst_21843 = inst_21841 || inst_21842;
                                      var state_21872__$1 = function() {
                                        var statearr_21886 = state_21872;
                                        statearr_21886[10] = inst_21840__$1;
                                        return statearr_21886;
                                      }();
                                      if (cljs.core.truth_(inst_21843)) {
                                        var statearr_21887_21912 = state_21872__$1;
                                        statearr_21887_21912[1] = 8;
                                      } else {
                                        var statearr_21888_21913 = state_21872__$1;
                                        statearr_21888_21913[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_21873 === 14) {
                                        var inst_21865 = state_21872[2];
                                        var inst_21866 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_21872__$1 = function() {
                                          var statearr_21890 = state_21872;
                                          statearr_21890[13] = inst_21865;
                                          return statearr_21890;
                                        }();
                                        var statearr_21891_21914 = state_21872__$1;
                                        statearr_21891_21914[2] = inst_21866;
                                        statearr_21891_21914[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_21873 === 10) {
                                          var inst_21855 = state_21872[2];
                                          var state_21872__$1 = state_21872;
                                          var statearr_21892_21915 = state_21872__$1;
                                          statearr_21892_21915[2] = inst_21855;
                                          statearr_21892_21915[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_21873 === 8) {
                                            var inst_21832 = state_21872[7];
                                            var inst_21840 = state_21872[10];
                                            var inst_21836 = state_21872[9];
                                            var inst_21845 = inst_21832.push(inst_21836);
                                            var tmp21889 = inst_21832;
                                            var inst_21832__$1 = tmp21889;
                                            var inst_21833 = inst_21840;
                                            var state_21872__$1 = function() {
                                              var statearr_21893 = state_21872;
                                              statearr_21893[14] = inst_21845;
                                              statearr_21893[7] = inst_21832__$1;
                                              statearr_21893[8] = inst_21833;
                                              return statearr_21893;
                                            }();
                                            var statearr_21894_21916 = state_21872__$1;
                                            statearr_21894_21916[2] = null;
                                            statearr_21894_21916[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__6478__auto___21902, out);
          return function(switch__6463__auto__, c__6478__auto___21902, out) {
            return function() {
              var state_machine__6464__auto__ = null;
              var state_machine__6464__auto____0 = function() {
                var statearr_21898 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_21898[0] = state_machine__6464__auto__;
                statearr_21898[1] = 1;
                return statearr_21898;
              };
              var state_machine__6464__auto____1 = function(state_21872) {
                while (true) {
                  var ret_value__6465__auto__ = function() {
                    try {
                      while (true) {
                        var result__6466__auto__ = switch__6463__auto__.call(null, state_21872);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                          continue;
                        } else {
                          return result__6466__auto__;
                        }
                        break;
                      }
                    } catch (e21899) {
                      if (e21899 instanceof Object) {
                        var ex__6467__auto__ = e21899;
                        var statearr_21900_21917 = state_21872;
                        statearr_21900_21917[5] = ex__6467__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21872);
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                          throw e21899;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                    var G__21918 = state_21872;
                    state_21872 = G__21918;
                    continue;
                  } else {
                    return ret_value__6465__auto__;
                  }
                  break;
                }
              };
              state_machine__6464__auto__ = function(state_21872) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__6464__auto____0.call(this);
                  case 1:
                    return state_machine__6464__auto____1.call(this, state_21872);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
              state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
              return state_machine__6464__auto__;
            }();
          }(switch__6463__auto__, c__6478__auto___21902, out);
        }();
        var state__6480__auto__ = function() {
          var statearr_21901 = f__6479__auto__.call(null);
          statearr_21901[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto___21902;
          return statearr_21901;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
      };
    }(c__6478__auto___21902, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("cemerick.url");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("goog.Uri");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("pathetic.core");
goog.require("pathetic.core");
cemerick.url.url_encode = function url_encode(string) {
  var G__22030 = string;
  var G__22030__$1 = G__22030 == null ? null : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__22030);
  var G__22030__$2 = G__22030__$1 == null ? null : encodeURIComponent(G__22030__$1);
  var G__22030__$3 = G__22030__$2 == null ? null : G__22030__$2.replace("+", "%20");
  return G__22030__$3;
};
cemerick.url.url_decode = function url_decode(string) {
  var G__22032 = string;
  var G__22032__$1 = G__22032 == null ? null : "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__22032);
  var G__22032__$2 = G__22032__$1 == null ? null : decodeURIComponent(G__22032__$1);
  return G__22032__$2;
};
cemerick.url.map__GT_query = function map__GT_query(m) {
  var G__22036 = cljs.core.seq.call(null, m);
  var G__22036__$1 = G__22036 == null ? null : cljs.core.sort.call(null, G__22036);
  var G__22036__$2 = G__22036__$1 == null ? null : cljs.core.map.call(null, function(G__22036, G__22036__$1) {
    return function(p__22037) {
      var vec__22038 = p__22037;
      var k = cljs.core.nth.call(null, vec__22038, 0, null);
      var v = cljs.core.nth.call(null, vec__22038, 1, null);
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cemerick.url.url_encode.call(null, cljs.core.name.call(null, k)), "\x3d", cemerick.url.url_encode.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(v))], null);
    };
  }(G__22036, G__22036__$1), G__22036__$1);
  var G__22036__$3 = G__22036__$2 == null ? null : cljs.core.interpose.call(null, "\x26", G__22036__$2);
  var G__22036__$4 = G__22036__$3 == null ? null : cljs.core.flatten.call(null, G__22036__$3);
  var G__22036__$5 = G__22036__$4 == null ? null : cljs.core.apply.call(null, cljs.core.str, G__22036__$4);
  return G__22036__$5;
};
cemerick.url.split_param = function split_param(param) {
  return cljs.core.take.call(null, 2, cljs.core.concat.call(null, clojure.string.split.call(null, param, /=/), cljs.core.repeat.call(null, "")));
};
cemerick.url.query__GT_map = function query__GT_map(qstr) {
  if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, qstr))) {
    var G__22040 = clojure.string.split.call(null, qstr, /&/);
    var G__22040__$1 = G__22040 == null ? null : cljs.core.seq.call(null, G__22040);
    var G__22040__$2 = G__22040__$1 == null ? null : cljs.core.mapcat.call(null, cemerick.url.split_param, G__22040__$1);
    var G__22040__$3 = G__22040__$2 == null ? null : cljs.core.map.call(null, cemerick.url.url_decode, G__22040__$2);
    var G__22040__$4 = G__22040__$3 == null ? null : cljs.core.apply.call(null, cljs.core.hash_map, G__22040__$3);
    return G__22040__$4;
  } else {
    return null;
  }
};
cemerick.url.port_str = function port_str(protocol, port) {
  if (cljs.core.not_EQ_.call(null, null, port) && (cljs.core.not_EQ_.call(null, -1, port) && (!(port === 80 && cljs.core._EQ_.call(null, protocol, "http")) && !(port === 443 && cljs.core._EQ_.call(null, protocol, "https"))))) {
    return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(port);
  } else {
    return null;
  }
};
cemerick.url.url_creds = function url_creds(username, password) {
  if (cljs.core.truth_(username)) {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(username) + ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(password);
  } else {
    return null;
  }
};
cemerick.url.URL = function(protocol, username, password, host, port, path, query, anchor, __meta, __extmap) {
  this.protocol = protocol;
  this.username = username;
  this.password = password;
  this.host = host;
  this.port = port;
  this.path = path;
  this.query = query;
  this.anchor = anchor;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 8) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cemerick.url.URL.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  var creds = cemerick.url.url_creds.call(null, self__.username, self__.password);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.protocol) + "://" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(creds) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(creds) ? "@" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.host) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cemerick.url.port_str.call(null, self__.protocol, self__.port)) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.path) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.seq.call(null, 
  self__.query) ? "?" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(typeof self__.query === "string" ? self__.query : cemerick.url.map__GT_query.call(null, self__.query)) : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(self__.anchor) ? "#" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.anchor) : null);
};
cemerick.url.URL.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4163__auto__, k__4164__auto__) {
  var self__ = this;
  var this__4163__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4163__auto____$1, k__4164__auto__, null);
};
cemerick.url.URL.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4165__auto__, k22042, else__4166__auto__) {
  var self__ = this;
  var this__4165__auto____$1 = this;
  var G__22044 = k22042 instanceof cljs.core.Keyword ? k22042.fqn : null;
  switch(G__22044) {
    case "anchor":
      return self__.anchor;
      break;
    case "query":
      return self__.query;
      break;
    case "path":
      return self__.path;
      break;
    case "port":
      return self__.port;
      break;
    case "host":
      return self__.host;
      break;
    case "password":
      return self__.password;
      break;
    case "username":
      return self__.username;
      break;
    case "protocol":
      return self__.protocol;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k22042, else__4166__auto__);
  }
};
cemerick.url.URL.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4177__auto__, writer__4178__auto__, opts__4179__auto__) {
  var self__ = this;
  var this__4177__auto____$1 = this;
  var pr_pair__4180__auto__ = function(this__4177__auto____$1) {
    return function(keyval__4181__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4178__auto__, cljs.core.pr_writer, "", " ", "", opts__4179__auto__, keyval__4181__auto__);
    };
  }(this__4177__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4178__auto__, pr_pair__4180__auto__, "#cemerick.url.URL{", ", ", "}", opts__4179__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "protocol", "protocol", 4319707658), self__.protocol], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "username", "username", 748190792), self__.username], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "host", "host", 1017112858), self__.host], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "port", "port", 1017351155), self__.port], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "path", "path", 1017337751), self__.path], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query", "query", 1121848378), self__.query], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "anchor", "anchor", 3895572007), self__.anchor], null)], null), self__.__extmap));
};
cemerick.url.URL.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4161__auto__) {
  var self__ = this;
  var this__4161__auto____$1 = this;
  return self__.__meta;
};
cemerick.url.URL.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4157__auto__) {
  var self__ = this;
  var this__4157__auto____$1 = this;
  return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, self__.__hash);
};
cemerick.url.URL.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4167__auto__) {
  var self__ = this;
  var this__4167__auto____$1 = this;
  return 8 + cljs.core.count.call(null, self__.__extmap);
};
cemerick.url.URL.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4158__auto__) {
  var self__ = this;
  var this__4158__auto____$1 = this;
  var h__3988__auto__ = self__.__hash;
  if (!(h__3988__auto__ == null)) {
    return h__3988__auto__;
  } else {
    var h__3988__auto____$1 = cljs.core.hash_imap.call(null, this__4158__auto____$1);
    self__.__hash = h__3988__auto____$1;
    return h__3988__auto____$1;
  }
};
cemerick.url.URL.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4159__auto__, other__4160__auto__) {
  var self__ = this;
  var this__4159__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3565__auto__ = other__4160__auto__;
    if (cljs.core.truth_(and__3565__auto__)) {
      return this__4159__auto____$1.constructor === other__4160__auto__.constructor && cljs.core.equiv_map.call(null, this__4159__auto____$1, other__4160__auto__);
    } else {
      return and__3565__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cemerick.url.URL.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4172__auto__, k__4173__auto__) {
  var self__ = this;
  var this__4172__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "path", "path", 1017337751), null, new cljs.core.Keyword(null, "protocol", "protocol", 4319707658), null, new cljs.core.Keyword(null, "password", "password", 2230889997), null, new cljs.core.Keyword(null, "username", "username", 748190792), null, new cljs.core.Keyword(null, "port", "port", 1017351155), null, new cljs.core.Keyword(null, "host", "host", 
  1017112858), null, new cljs.core.Keyword(null, "anchor", "anchor", 3895572007), null, new cljs.core.Keyword(null, "query", "query", 1121848378), null], null), null), k__4173__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4172__auto____$1), self__.__meta), k__4173__auto__);
  } else {
    return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4173__auto__)), null);
  }
};
cemerick.url.URL.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4170__auto__, k__4171__auto__, G__22041) {
  var self__ = this;
  var this__4170__auto____$1 = this;
  var pred__22045 = cljs.core.keyword_identical_QMARK_;
  var expr__22046 = k__4171__auto__;
  if (cljs.core.truth_(pred__22045.call(null, new cljs.core.Keyword(null, "protocol", "protocol", 4319707658), expr__22046))) {
    return new cemerick.url.URL(G__22041, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__22045.call(null, new cljs.core.Keyword(null, "username", "username", 748190792), expr__22046))) {
      return new cemerick.url.URL(self__.protocol, G__22041, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__22045.call(null, new cljs.core.Keyword(null, "password", "password", 2230889997), expr__22046))) {
        return new cemerick.url.URL(self__.protocol, self__.username, G__22041, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__22045.call(null, new cljs.core.Keyword(null, "host", "host", 1017112858), expr__22046))) {
          return new cemerick.url.URL(self__.protocol, self__.username, self__.password, G__22041, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__22045.call(null, new cljs.core.Keyword(null, "port", "port", 1017351155), expr__22046))) {
            return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, G__22041, self__.path, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__22045.call(null, new cljs.core.Keyword(null, "path", "path", 1017337751), expr__22046))) {
              return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, G__22041, self__.query, self__.anchor, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__22045.call(null, new cljs.core.Keyword(null, "query", "query", 1121848378), expr__22046))) {
                return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, G__22041, self__.anchor, self__.__meta, self__.__extmap, null);
              } else {
                if (cljs.core.truth_(pred__22045.call(null, new cljs.core.Keyword(null, "anchor", "anchor", 3895572007), expr__22046))) {
                  return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, G__22041, self__.__meta, self__.__extmap, null);
                } else {
                  return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4171__auto__, G__22041), null);
                }
              }
            }
          }
        }
      }
    }
  }
};
cemerick.url.URL.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4175__auto__) {
  var self__ = this;
  var this__4175__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "protocol", "protocol", 4319707658), self__.protocol], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "username", "username", 748190792), self__.username], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "password", "password", 2230889997), self__.password], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "host", "host", 1017112858), self__.host], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "port", "port", 1017351155), self__.port], null), new cljs.core.PersistentVector(null, 2, 5, 
  cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "path", "path", 1017337751), self__.path], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query", "query", 1121848378), self__.query], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "anchor", "anchor", 3895572007), self__.anchor], null)], null), self__.__extmap));
};
cemerick.url.URL.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4162__auto__, G__22041) {
  var self__ = this;
  var this__4162__auto____$1 = this;
  return new cemerick.url.URL(self__.protocol, self__.username, self__.password, self__.host, self__.port, self__.path, self__.query, self__.anchor, G__22041, self__.__extmap, self__.__hash);
};
cemerick.url.URL.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4168__auto__, entry__4169__auto__) {
  var self__ = this;
  var this__4168__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4169__auto__)) {
    return cljs.core._assoc.call(null, this__4168__auto____$1, cljs.core._nth.call(null, entry__4169__auto__, 0), cljs.core._nth.call(null, entry__4169__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4168__auto____$1, entry__4169__auto__);
  }
};
cemerick.url.URL.cljs$lang$type = true;
cemerick.url.URL.cljs$lang$ctorPrSeq = function(this__4197__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cemerick.url/URL");
};
cemerick.url.URL.cljs$lang$ctorPrWriter = function(this__4197__auto__, writer__4198__auto__) {
  return cljs.core._write.call(null, writer__4198__auto__, "cemerick.url/URL");
};
cemerick.url.__GT_URL = function __GT_URL(protocol, username, password, host, port, path, query, anchor) {
  return new cemerick.url.URL(protocol, username, password, host, port, path, query, anchor);
};
cemerick.url.map__GT_URL = function map__GT_URL(G__22043) {
  return new cemerick.url.URL((new cljs.core.Keyword(null, "protocol", "protocol", 4319707658)).cljs$core$IFn$_invoke$arity$1(G__22043), (new cljs.core.Keyword(null, "username", "username", 748190792)).cljs$core$IFn$_invoke$arity$1(G__22043), (new cljs.core.Keyword(null, "password", "password", 2230889997)).cljs$core$IFn$_invoke$arity$1(G__22043), (new cljs.core.Keyword(null, "host", "host", 1017112858)).cljs$core$IFn$_invoke$arity$1(G__22043), (new cljs.core.Keyword(null, "port", "port", 1017351155)).cljs$core$IFn$_invoke$arity$1(G__22043), 
  (new cljs.core.Keyword(null, "path", "path", 1017337751)).cljs$core$IFn$_invoke$arity$1(G__22043), (new cljs.core.Keyword(null, "query", "query", 1121848378)).cljs$core$IFn$_invoke$arity$1(G__22043), (new cljs.core.Keyword(null, "anchor", "anchor", 3895572007)).cljs$core$IFn$_invoke$arity$1(G__22043), null, cljs.core.dissoc.call(null, G__22043, new cljs.core.Keyword(null, "protocol", "protocol", 4319707658), new cljs.core.Keyword(null, "username", "username", 748190792), new cljs.core.Keyword(null, 
  "password", "password", 2230889997), new cljs.core.Keyword(null, "host", "host", 1017112858), new cljs.core.Keyword(null, "port", "port", 1017351155), new cljs.core.Keyword(null, "path", "path", 1017337751), new cljs.core.Keyword(null, "query", "query", 1121848378), new cljs.core.Keyword(null, "anchor", "anchor", 3895572007)));
};
cemerick.url.translate_default = function translate_default(s, old_default, new_default) {
  if (cljs.core._EQ_.call(null, s, old_default)) {
    return new_default;
  } else {
    return s;
  }
};
cemerick.url.url_STAR_ = function url_STAR_(url) {
  var url__$1 = new goog.Uri(url);
  var vec__22050 = clojure.string.split.call(null, function() {
    var or__3577__auto__ = url__$1.getUserInfo();
    if (cljs.core.truth_(or__3577__auto__)) {
      return or__3577__auto__;
    } else {
      return "";
    }
  }(), /:/, 2);
  var user = cljs.core.nth.call(null, vec__22050, 0, null);
  var pass = cljs.core.nth.call(null, vec__22050, 1, null);
  return new cemerick.url.URL(url__$1.getScheme(), function() {
    var and__3565__auto__ = cljs.core.seq.call(null, user);
    if (and__3565__auto__) {
      return user;
    } else {
      return and__3565__auto__;
    }
  }(), function() {
    var and__3565__auto__ = cljs.core.seq.call(null, pass);
    if (and__3565__auto__) {
      return pass;
    } else {
      return and__3565__auto__;
    }
  }(), url__$1.getDomain(), cemerick.url.translate_default.call(null, url__$1.getPort(), null, -1), pathetic.core.normalize.call(null, url__$1.getPath()), cemerick.url.query__GT_map.call(null, cemerick.url.translate_default.call(null, url__$1.getQuery(), "", null)), cemerick.url.translate_default.call(null, url__$1.getFragment(), "", null));
};
cemerick.url.url = function() {
  var url = null;
  var url__1 = function(url__$1) {
    if (url__$1 instanceof cemerick.url.URL) {
      return url__$1;
    } else {
      return cemerick.url.url_STAR_.call(null, url__$1);
    }
  };
  var url__2 = function() {
    var G__22051__delegate = function(base_url, path_segments) {
      var base_url__$1 = base_url instanceof cemerick.url.URL ? base_url : url.call(null, base_url);
      return cljs.core.assoc.call(null, base_url__$1, new cljs.core.Keyword(null, "path", "path", 1017337751), pathetic.core.normalize.call(null, cljs.core.reduce.call(null, pathetic.core.resolve, (new cljs.core.Keyword(null, "path", "path", 1017337751)).cljs$core$IFn$_invoke$arity$1(base_url__$1), path_segments)));
    };
    var G__22051 = function(base_url, var_args) {
      var path_segments = null;
      if (arguments.length > 1) {
        path_segments = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__22051__delegate.call(this, base_url, path_segments);
    };
    G__22051.cljs$lang$maxFixedArity = 1;
    G__22051.cljs$lang$applyTo = function(arglist__22052) {
      var base_url = cljs.core.first(arglist__22052);
      var path_segments = cljs.core.rest(arglist__22052);
      return G__22051__delegate(base_url, path_segments);
    };
    G__22051.cljs$core$IFn$_invoke$arity$variadic = G__22051__delegate;
    return G__22051;
  }();
  url = function(base_url, var_args) {
    var path_segments = var_args;
    switch(arguments.length) {
      case 1:
        return url__1.call(this, base_url);
      default:
        return url__2.cljs$core$IFn$_invoke$arity$variadic(base_url, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  url.cljs$lang$maxFixedArity = 1;
  url.cljs$lang$applyTo = url__2.cljs$lang$applyTo;
  url.cljs$core$IFn$_invoke$arity$1 = url__1;
  url.cljs$core$IFn$_invoke$arity$variadic = url__2.cljs$core$IFn$_invoke$arity$variadic;
  return url;
}();
goog.provide("price");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("goog.net.XhrIo");
goog.require("dommy.core");
goog.require("goog.net.XhrIo");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("cemerick.url");
goog.require("dommy.core");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("edn");
goog.require("cemerick.url");
price.log = function log(s) {
  return console.log("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
};
price.GET = function GET(url) {
  var ch = cljs.core.async.chan.call(null, 1);
  goog.net.XhrIo.send(url, function(ch) {
    return function(event) {
      var res = event.target;
      var success_QMARK_ = cljs.core._EQ_.call(null, 200, res.getStatus());
      var text = success_QMARK_ ? res.getResponseText() : "";
      var c__6478__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto__, res, success_QMARK_, text, ch) {
        return function() {
          var f__6479__auto__ = function() {
            var switch__6463__auto__ = function(c__6478__auto__, res, success_QMARK_, text, ch) {
              return function(state_23142) {
                var state_val_23143 = state_23142[1];
                if (state_val_23143 === 2) {
                  var inst_23139 = state_23142[2];
                  var inst_23140 = cljs.core.async.close_BANG_.call(null, ch);
                  var state_23142__$1 = function() {
                    var statearr_23144 = state_23142;
                    statearr_23144[7] = inst_23139;
                    return statearr_23144;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23142__$1, inst_23140);
                } else {
                  if (state_val_23143 === 1) {
                    var state_23142__$1 = state_23142;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23142__$1, 2, ch, text);
                  } else {
                    return null;
                  }
                }
              };
            }(c__6478__auto__, res, success_QMARK_, text, ch);
            return function(switch__6463__auto__, c__6478__auto__, res, success_QMARK_, text, ch) {
              return function() {
                var state_machine__6464__auto__ = null;
                var state_machine__6464__auto____0 = function() {
                  var statearr_23148 = [null, null, null, null, null, null, null, null];
                  statearr_23148[0] = state_machine__6464__auto__;
                  statearr_23148[1] = 1;
                  return statearr_23148;
                };
                var state_machine__6464__auto____1 = function(state_23142) {
                  while (true) {
                    var ret_value__6465__auto__ = function() {
                      try {
                        while (true) {
                          var result__6466__auto__ = switch__6463__auto__.call(null, state_23142);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                            continue;
                          } else {
                            return result__6466__auto__;
                          }
                          break;
                        }
                      } catch (e23149) {
                        if (e23149 instanceof Object) {
                          var ex__6467__auto__ = e23149;
                          var statearr_23150_23152 = state_23142;
                          statearr_23150_23152[5] = ex__6467__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23142);
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                            throw e23149;
                          } else {
                            return null;
                          }
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      var G__23153 = state_23142;
                      state_23142 = G__23153;
                      continue;
                    } else {
                      return ret_value__6465__auto__;
                    }
                    break;
                  }
                };
                state_machine__6464__auto__ = function(state_23142) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__6464__auto____0.call(this);
                    case 1:
                      return state_machine__6464__auto____1.call(this, state_23142);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
                state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
                return state_machine__6464__auto__;
              }();
            }(switch__6463__auto__, c__6478__auto__, res, success_QMARK_, text, ch);
          }();
          var state__6480__auto__ = function() {
            var statearr_23151 = f__6479__auto__.call(null);
            statearr_23151[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto__;
            return statearr_23151;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
        };
      }(c__6478__auto__, res, success_QMARK_, text, ch));
      return c__6478__auto__;
    };
  }(ch));
  return ch;
};
price.localize_url = function localize_url(cpath) {
  var uri = new goog.Uri(window.location);
  var locale = cljs.core.second.call(null, clojure.string.split.call(null, uri.getPath(), /\//));
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(uri.setPath("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(locale) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cpath)));
};
price.update_price = function update_price(item, id) {
  var item__$1 = cljs.core.js__GT_clj.call(null, item);
  var url = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.assoc.call(null, cemerick.url.url.call(null, price.localize_url.call(null, "/price")), new cljs.core.Keyword(null, "query", "query", 1121848378), item__$1));
  var c__6478__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__6478__auto__, item__$1, url) {
    return function() {
      var f__6479__auto__ = function() {
        var switch__6463__auto__ = function(c__6478__auto__, item__$1, url) {
          return function(state_23179) {
            var state_val_23180 = state_23179[1];
            if (state_val_23180 === 2) {
              var inst_23173 = state_23179[2];
              var inst_23174 = cljs.core.keyword.call(null, id);
              var inst_23175 = dommy.core.selector.call(null, inst_23174);
              var inst_23176 = document.querySelector(inst_23175);
              var inst_23177 = dommy.core.set_text_BANG_.call(null, inst_23176, inst_23173);
              var state_23179__$1 = state_23179;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23179__$1, inst_23177);
            } else {
              if (state_val_23180 === 1) {
                var inst_23171 = price.GET.call(null, url);
                var state_23179__$1 = state_23179;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23179__$1, 2, inst_23171);
              } else {
                return null;
              }
            }
          };
        }(c__6478__auto__, item__$1, url);
        return function(switch__6463__auto__, c__6478__auto__, item__$1, url) {
          return function() {
            var state_machine__6464__auto__ = null;
            var state_machine__6464__auto____0 = function() {
              var statearr_23184 = [null, null, null, null, null, null, null];
              statearr_23184[0] = state_machine__6464__auto__;
              statearr_23184[1] = 1;
              return statearr_23184;
            };
            var state_machine__6464__auto____1 = function(state_23179) {
              while (true) {
                var ret_value__6465__auto__ = function() {
                  try {
                    while (true) {
                      var result__6466__auto__ = switch__6463__auto__.call(null, state_23179);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__6466__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__6466__auto__;
                      }
                      break;
                    }
                  } catch (e23185) {
                    if (e23185 instanceof Object) {
                      var ex__6467__auto__ = e23185;
                      var statearr_23186_23188 = state_23179;
                      statearr_23186_23188[5] = ex__6467__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23179);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e23185;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__6465__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__23189 = state_23179;
                  state_23179 = G__23189;
                  continue;
                } else {
                  return ret_value__6465__auto__;
                }
                break;
              }
            };
            state_machine__6464__auto__ = function(state_23179) {
              switch(arguments.length) {
                case 0:
                  return state_machine__6464__auto____0.call(this);
                case 1:
                  return state_machine__6464__auto____1.call(this, state_23179);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__6464__auto____0;
            state_machine__6464__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__6464__auto____1;
            return state_machine__6464__auto__;
          }();
        }(switch__6463__auto__, c__6478__auto__, item__$1, url);
      }();
      var state__6480__auto__ = function() {
        var statearr_23187 = f__6479__auto__.call(null);
        statearr_23187[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__6478__auto__;
        return statearr_23187;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__6480__auto__);
    };
  }(c__6478__auto__, item__$1, url));
  return c__6478__auto__;
};
goog.exportSymbol("price.update_price", price.update_price);

//# sourceMappingURL=main.js.map