#!/bin/bash

# Configures base configuration and code.
# Keep actions idempotent so that re-running the won't break things.

# ---------------------------------------------------
# Change to the project root directory.
# ---------------------------------------------------
PROJECT_HOME="$(cd $(dirname $BASH_SOURCE)/..; pwd)"
cd $PROJECT_HOME

# ---------------------------------------------------
# Install submodules if missing.
# ---------------------------------------------------
if [[ ! -e opt/bootstrap/.git ]] ; then
    git submodule init
    git submodule update
fi

# ---------------------------------------------------
# Source bootstrap utilities.
# ---------------------------------------------------
source "$(dirname $BASH_SOURCE)/../opt/bootstrap/bootstrap.bash"

# ---------------------------------------------------
# Determine the active profile. If not set, set it to development.
# ---------------------------------------------------
[[ undefined =  "$(get_profile)" ]] && set_profile development
assert_profile_in development staging production
export PROFILE=$(get_profile)

# ---------------------------------------------------
# Java
# ---------------------------------------------------
ensure_package openjdk-7-jdk

# ---------------------------------------------------
# Create daemon user.
# ---------------------------------------------------
ensure_daemon_user_with_home sm-www
ensure_clones_in_group sm-www

# ---------------------------------------------------
# Leiningen
# ---------------------------------------------------
wget -c -O bin/lein https://raw.github.com/technomancy/leiningen/stable/bin/lein
chmod +x bin/lein

# ---------------------------------------------------
# Image processing
# ---------------------------------------------------
ensure_package imagemagick

# ---------------------------------------------------
# File permissions
# ---------------------------------------------------
for DIR in .lein .m2 var/target; do
    mkdir -p $DIR
#    sudo chown sm-www:sm-www $DIR
#    sudo chmod 775 $DIR
done

# ---------------------------------------------------
# Ruby gems
# ---------------------------------------------------
ensure_gem edn

# ---------------------------------------------------
# Nginx
# ---------------------------------------------------
ensure_package nginx
ensure_link etc/nginx/conf.d/base.conf /etc/nginx/conf.d/base.conf
erb etc/nginx/site.conf.erb | sudo tee /etc/nginx/sites-available/sistemi-$PROFILE.conf > /dev/null
sudo ln -sf /etc/nginx/sites-available/sistemi-$PROFILE.conf /etc/nginx/sites-enabled
sudo service nginx restart
sudo nginx -t

# ---------------------------------------------------
# Cron
# ---------------------------------------------------
#ensure_crontab etc/cron.d/www /etc/cron.d/www

# ---------------------------------------------------
# Miscellaneous
# ---------------------------------------------------

# bash aliases
#ensure_link .bashrc ~admin/.bash.d/www

# prompt integration
#ensure_link .prompt /opt/eway/etc/prompt.d/www

# ---------------------------------------------------
# TODO PHANTOMJS
# See: http://blog.zolotko.me/2012/12/clojure-selenium-webdriver-and-phantomjs.html
# wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-linux-x86_64.tar.bz2
# tar -xjf phantomjs-1.9.7-linux-x86_64.tar.bz2 
# mv phantomjs-1.9.7-linux-x86_64 phantomjs/1.9.7-linux-x86_64
# cd phantomjs/
# ln -s 1.9.7-linux-x86_64 current

# TODO Setup Firewall
#   ufw allow 22/tcp
#   ufw allow 80/tcp
#   ufw allow 443/tcp
#   ufw default deny
#   ufw enable

# - BUG: when switching profile, disable the nginx config for the old profile
# - BUG: configure doesn't aleart if missing nginx ssl cert
# - BUG: need to copy files into etc/secure/{gpg,nginx} (use git-crypt?)
# - init datomic database and schema
