#!/usr/bin/ruby

require 'find'
require 'fileutils'
require 'shellwords'

CONF = {
  default: {
    enforce_aspect: true,
    sizes: [200, 630]
  },

  # For the modulo, use a width of 630 px and don't worry about the aspect ratio.
  "Modulo" => {
    enforce_aspect: false,
    sizes: [630]
  }
}


module Gallery

  GALLERY_DIR="www/raw/gallery"

  class << self
    # Munges a path for use on the web.
    # - lowercase
    # - replace space with '-'
    def munge(path)
      path.downcase.gsub(' ', '-')
    end

    def import_image(image, source_dir, target_dir, opts)
      rpath = image.gsub(source_dir + "/", "")  # relative path.
      trpath = munge(rpath)                     # target relative path
      puts "Importing image: #{rpath} -> #{trpath}."

      # Create the target directory if necessary.
      tpath = target_dir + "/" + trpath
      tdir = File.dirname(tpath)
      File.exists? tdir or FileUtils.mkdir tdir

      # Import the full resolution version.
      FileUtils.cp image, tpath

      # Create the scaled vesions.
      opts[:sizes].each do |size|
        sdir = tdir + "/#{size}"
        File.exists? sdir or FileUtils.mkdir sdir
        spath = sdir + "/" + File.basename(tpath)

        # Scale the image.
        cmd = ['convert',
               image,
               '-resize', "#{size}x#{size}>",
               spath]
        system(cmd.shelljoin)
      end
    end

    def identify_image(path)
      cmd = ['identify', '-verbose', path]
      out = `#{cmd.shelljoin}`
    end

    def image_geometry(data)
      #  Geometry: 1024x768+0+0
      if data.match(/^  Geometry: (\d+)x(\d+)+/)
        w = $1.to_i
        h = $2.to_i
        {width: w, height: h, aspect: w.to_f/h.to_f}
      end
    end

    def each_image(dir)
      Find.find(dir) do |path|
        ext = path.match(/\.([^\.]+)$/)[1] rescue nil
        case ext
        when 'jpeg','jpg'
          yield path
        end
      end
    end

    def import(source_dir, p_opts={})
      target_dir = GALLERY_DIR

      puts "Importing images into gallery from dropbox."
      puts "  source directory: '#{source_dir}'"
      puts "  target directory: '#{target_dir}'"

      # Delete old images.
      puts "Deleting previously imported images in '#{target_dir}'."
      each_image(target_dir) do |path|
        FileUtils.rm path
      end

      # Import images.
      each_image(source_dir) do |path|
        # Determine directory specific options.
        dir_opts = CONF[File.basename(File.dirname(path))] || {}
        opts = CONF[:default].merge(dir_opts).merge(p_opts)
        # puts "  options: #{opts.inspect}"

        # CHECK PRECONDITIONS
        # Aspect ratio must be 4/3.
        data = identify_image path
        g = image_geometry(data)
        a = g[:aspect]

        if opts[:enforce_aspect]
          unless a == 4.0/3.0
            puts "WARNING: Skipping image #{path} since aspect ratio (#{a}) is not 4/3."
            next
          end
        end

        # Image must be at least 1024 wide.
        w = g[:width]
        min_width = 1024
        if w < min_width
          puts "WARNING: Skipping image #{path} since width (#{w}) is less than #{min_width}."
          next
        end

        # Import the image.
        import_image(path, source_dir, target_dir, opts)
      end
    end
  end
end

# Change to project directory.
Dir.chdir File.dirname(File.dirname(File.expand_path(__FILE__)))

# Import images.
Gallery.import("dep/dropbox/Gallery")
