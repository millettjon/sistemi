# THIS FILE IS AUTOMATICALLY GENERATED FROM <%= File.expand_path(__FILE__) %>
# TO REGENERATE, RUN: <%= File.expand_path('bin/configure') %>
<% require 'edn' %>
<% m = EDN.read(File.read('etc/profiles/' + ENV['PROFILE'] + '/default.edn')) %>

# NAKED DOMAIN - HTTP
# Redirect to www and force use of https.
server {
  server_name <%= m[:domain] %>;
  rewrite ^ https://<%= m[:host] %>.<%= m[:domain] %>$request_uri? permanent;
}

# Common ssh options.
# See: https://mozilla.github.io/server-side-tls/ssl-config-generator/
# See: https://www.ssllabs.com/ssltest/
# Note: Diffie helman params are in the cert file.
ssl_certificate      <%= Dir.pwd %>/etc/nginx/ssl/<%= m[:host] %>.<%= m[:domain] %>/chain.crt;
ssl_certificate_key  <%= Dir.pwd %>/etc/nginx/ssl/<%= m[:host] %>.<%= m[:domain] %>/server.unencrypted.key;
ssl_session_timeout 5m;
ssl_session_cache shared:SSL:50m;

# intermediate configuration. tweak to your needs.
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
ssl_prefer_server_ciphers on;

# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
add_header Strict-Transport-Security max-age=15768000;

<% if m[:ocsp] %>
# OCSP Stapling ---
# fetch OCSP records from URL in ssl_certificate and cache them
ssl_stapling on;
ssl_stapling_verify on;
## verify chain of trust of OCSP response using Root CA and Intermediate certs
ssl_trusted_certificate <%= Dir.pwd %>/etc/nginx/ssl/<%= m[:host] %>.<%= m[:domain] %>/ocsp.crt;

# OCSP needs to know which resolver to use. Pick the first server defined in /etc/resolv.conf.
resolver <%= File.read("/etc/resolv.conf").match(/nameserver\s+(.+)$/)[1] %>;
<% end %>

# NAKED DOMAIN - HTTPS
# Redirect to <%= m[:host] %>.
server {
  server_name <%= m[:domain] %>;
  listen      443 ssl;
  rewrite ^ https://<%= m[:host] %>.<%= m[:domain] %>$request_uri? permanent;
}

# WWW - HTTP
# Redirect to https site.
server {
  server_name <%= m[:host] %>.<%= m[:domain] %>;
  rewrite ^ https://<%= m[:host] %>.<%= m[:domain] %>$request_uri? permanent;
}

# WWW - HTTPS
# Proxy all requests to back end.
server {
  server_name <%= m[:host] %>.<%= m[:domain] %>;
  listen      443 ssl;

  # Enable gzip compression.
  gzip on;
  gzip_types text/javascript text/css;

  location / {
    include <%= Dir.pwd %>/etc/nginx/common.conf;
  }

  # Configure caching for static resources.
  location ~* ^.+\.(jpg|jpeg|gif|png|ico|js|cljs)$ {
    include <%= Dir.pwd %>/etc/nginx/common.conf;

    add_header Cache-Control "max-age=3600, must-revalidate";
  }
}
